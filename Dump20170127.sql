CREATE DATABASE  IF NOT EXISTS `qadoor` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */;
USE `qadoor`;
-- MySQL dump 10.13  Distrib 5.7.9, for osx10.9 (x86_64)
--
-- Host: localhost    Database: qadoor
-- ------------------------------------------------------
-- Server version	5.7.17

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `answers`
--

DROP TABLE IF EXISTS `answers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `answers` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '回答id',
  `question_id` int(10) unsigned NOT NULL COMMENT '问题id',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '回答内容',
  `user_id` int(10) unsigned NOT NULL COMMENT '回答用户',
  `isaccept` tinyint(1) NOT NULL COMMENT '是否采纳',
  `votes` bigint(20) NOT NULL COMMENT '投票',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `answers_question_id_foreign` (`question_id`),
  KEY `answers_user_id_foreign` (`user_id`),
  CONSTRAINT `answers_question_id_foreign` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE,
  CONSTRAINT `answers_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answers`
--

LOCK TABLES `answers` WRITE;
/*!40000 ALTER TABLE `answers` DISABLE KEYS */;
INSERT INTO `answers` VALUES (1,1,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Short answer - de facto limit of 2000 characters</h2>\n\n<p>If you keep URLs under 2000 characters, they\'ll work in virtually any combination of client and server software.</p>\n\n<p>If you are targeting particular browsers, see below for more details specific limits.</p>\n\n<h2>Longer answer - first, the standards...</h2>\n\n<p><a href=\"http://www.faqs.org/rfcs/rfc2616.html\">RFC 2616</a> (Hypertext Transfer Protocol HTTP/1.1) section 3.2.1 says</p>\n\n<blockquote>\n  <p>The HTTP protocol does not place\n  any a priori limit on the length of \n  a URI. Servers MUST be able to handle\n  the URI of any resource they    serve,\n  and SHOULD be able to handle URIs of\n  unbounded length if they    provide\n  GET-based forms that could generate\n  such URIs. A server    SHOULD return\n  414 (Request-URI Too Long) status if a\n  URI is longer    than the server can\n  handle (see section 10.4.15).</p>\n</blockquote>\n\n<p>That RFC has been obsoleted by <a href=\"http://tools.ietf.org/html/rfc7230#section-3.1.1\">RFC7230</a> which is a refresh of the HTTP/1.1 specification. It contains similar language, but also goes on to suggest this:</p>\n\n<blockquote>\n  <p>Various ad hoc limitations on request-line length are found in \n  practice. It is RECOMMENDED that all HTTP senders and recipients \n  support, at a minimum, request-line lengths of 8000 octets.</p>\n</blockquote>\n\n<h2>...and the reality</h2>\n\n<p>That\'s what the <em>standards</em> say. For the <em>reality</em>, see <a href=\"http://www.boutell.com/newfaq/misc/urllength.html\">this research over at boutell.com</a> to see what individual browser and server implementations will support. It\'s worth a read, but the executive summary is:</p>\n\n<blockquote>\n  <p>Extremely long URLs are usually a\n  mistake. <strong>URLs over 2,000 characters\n  will not work in the most popular web\n  browsers.</strong> Don\'t use them if you intend\n  your site to work for the majority of\n  Internet users.</p>\n</blockquote>\n\n<p>(Note: this is a quote from an article written in <em>2006</em>, but in 2015 IE\'s declining usage means that longer URLs <em>do</em> work for the majority. However, IE still has the limitation...)</p>\n\n<h2>Internet Explorer\'s limitations...</h2>\n\n<p><a href=\"https://support.microsoft.com/en-us/kb/208427\">IE8\'s maximum URL length is 2083 chars</a>, and it seems <a href=\"http://stackoverflow.com/questions/3721034/how-long-an-url-can-internet-explorer-9-take\">IE9 has a similar limit</a>. </p>\n\n<p>I\'ve tested IE10 and the address bar will only accept 2083 chars. You can <em>click</em> a URL which is longer than this, but the address bar will still only show 2083 characters of this link.</p>\n\n<p>There\'s a <a href=\"https://blogs.msdn.microsoft.com/ieinternals/2014/08/13/url-length-limits/\">nice writeup on the IE Internals blog</a> which goes into some of the background to this. </p>\n\n<p>There are mixed reports IE11 supports longer URLS - see comments below. Given some people report issues, the general advice still stands.</p>\n\n<h2>Search engines like URLs &lt; 2048 chars...</h2>\n\n<p>Be aware that the <a href=\"http://www.sitemaps.org/protocol.html\">sitemaps protocol</a>, which allows a site to inform search engines about available pages, has a limit of 2048 characters in a URL. If you intend to use sitemaps, a limit has been decided for you! (see <a href=\"http://stackoverflow.com/a/7056886/6521\">Calin-Andrei Burloiu\'s answer</a> below) </p>\n\n<p>There\'s also some research from 2010 into the <a href=\"http://www.seomofo.com/experiments/title-and-h1-of-this-post-but-for-the-sake-of-keyword-prominence-stuffing-im-going-to-mention-it-again-using-various-synonyms-stemmed-variations-and-of-coursea-big-fat-prominent-font-size-heres-the-stumper-that-stumped-me-what-is-the-max-number-of-chars-in-a-url-that-google-is-willing-to-crawl-and-index-for-whatever-reason-i-thought-i-had-read-somewhere-that-googles-limit-on-urls-was-255-characters-but-that-turned-out-to-be-wrong-so-maybe-i-just-made-that-number-up-the-best-answer-i-could-find-was-this-quote-from-googles-webmaster-trends-analyst-john-mueller-we-can-certainly-crawl-and-index-urls-over-1000-characters-long-but-that-doesnt-mean-that-its-a-good-practice-the-setup-for-this-experiment-is-going-to-be-pretty-simple-im-going-to-edit-the-permalink-of-this-post-to-be-really-really-long-then-im-going-to-see-if-google-indexes-it-i-might-even-see-if-yahoo-and-bing-index-iteven-though-no-one-really-cares-what-those-assholes-are-doing-url-character-limits-unrelated-to-google-the-question-now-is-how-many-characters-should-i-make-the-url-of-this-post-there-are-a-couple-of-sources-ill-reference-to-help-me-make-this-decision-the-first-is-this-quote-from-the-microsoft-support-pages-microsoft-internet-explorer-has-a-maximum-uniform-resource-locator-url-length-of-2083-characters-internet-explorer-also-has-a-maximum-path-length-of-2048-characters-this-limit-applies-to-both-post-request-and-get-request-urls-the-second-source-ill-cite-is-the-http-11-protocol-which-says-the-http-protocol-does-not-place-any-a-priori-limit-on-the-length-of-a-uri-servers-must-be-able-to-handle-the-uri-of-any-resource-they-serve-and-should-be-able-to-handle-uris-of-unbounded-length-if-they-provide-get-based-forms-that-could-generate-such-uris-a-server-should-return-414-request-uri-too-long-status-if-a-uri-is-longer.html\">maximum URL length that search engines will crawl and index</a>. They found the limit was 2047 chars, which appears allied to the sitemap protocol spec. However, they also found the Google <a href=\"http://en.wikipedia.org/wiki/Search_engine_results_page\">SERP</a> tool wouldn\'t cope with URLs longer than 1855 chars.</p>\n\n<h2>Additional browser roundup</h2>\n\n<p>I tested the following against an Apache 2.4 server configured with a very large LimitRequestLine and LimitRequestFieldSize. </p>\n\n<pre><code>Browser     Address bar   document.location  \n                          or anchor tag\n------------------------------------------\nChrome          32779           &gt;64k      \nAndroid          8192           &gt;64k                         \nFirefox          &gt;64k           &gt;64k      \nSafari           &gt;64k           &gt;64k      \n</code></pre>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers/31250734#31250734\">this answer</a> from Matas Vaitkevicius below.</p>\n\n<h2>Is this information up to date?</h2>\n\n<p>This is a popular question, and as the original research is ~9 years old I\'ll try to keep it up to date: As of <strong>Nov 2016</strong>, the advice still stands. Even though IE11 may possibly accept longer URLs, the ubiquity of older IE installations plus the search engine limitations mean staying under 2000 chars is the best general policy.</p>\n    </div>',1,1,3403,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(2,2,'<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><strong>Note:</strong> This is a reply to another answer, not a proper response to this question. If you wish to have fast object cloning please follow <a href=\"http://stackoverflow.com/a/5344074/1438393\">Corban\'s advice in their answer</a> to this question.</p>\n</blockquote>\n\n<hr>\n\n<p>I want to note that the <a href=\"http://api.jquery.com/clone/\"><code>.clone()</code></a> method in <strong>jQuery</strong> only clones DOM elements. In order to clone JavaScript objects, you would do:</p>\n\n<pre><code>// Shallow copy\nvar newObject = jQuery.extend({}, oldObject);\n\n// Deep copy\nvar newObject = jQuery.extend(true, {}, oldObject);\n</code></pre>\n\n<p>More information can be found in the <a href=\"http://api.jquery.com/jQuery.extend/\">jQuery documentation</a>.</p>\n\n<p>I also want to note that the deep copy is actually much smarter than what is shown above – it\'s able to avoid many traps (trying to deep extend a DOM element, for example). It\'s used frequently in jQuery core and in plugins to great effect.</p>\n    </div>',1,1,3542,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(3,3,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming you\'re joining on columns with no duplicates, which is a very common case:</p>\n\n<ul>\n<li><p>An inner join of A and B gives the result of A intersect B, i.e. the inner part of a <a href=\"http://en.wikipedia.org/wiki/Venn_diagram\">Venn diagram</a> intersection.</p></li>\n<li><p>An outer join of A and B gives the results of A union B, i.e. the outer parts of a Venn diagram union.</p></li>\n</ul>\n\n<p><strong>Examples</strong></p>\n\n<p>Suppose you have two tables, with a single column each, and data as follows:</p>\n\n<pre><code>A    B\n-    -\n1    3\n2    4\n3    5\n4    6\n</code></pre>\n\n<p>Note that (1,2) are unique to A, (3,4) are common, and (5,6) are unique to B.</p>\n\n<p><strong>Inner join</strong></p>\n\n<p>An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.</p>\n\n<pre><code>select * from a INNER JOIN b on a.a = b.b;\nselect a.*,b.*  from a,b where a.a = b.b;\n\na | b\n--+--\n3 | 3\n4 | 4\n</code></pre>\n\n<p><strong>Left outer join</strong></p>\n\n<p>A left outer join will give all rows in A, plus any common rows in B.</p>\n\n<pre><code>select * from a LEFT OUTER JOIN b on a.a = b.b;\nselect a.*,b.*  from a,b where a.a = b.b(+);\n\na |  b\n--+-----\n1 | null\n2 | null\n3 |    3\n4 |    4\n</code></pre>\n\n<p><strong>Right outer join</strong></p>\n\n<p>A right outer join will give all rows in B, plus any common rows in A.</p>\n\n<pre><code>select * from a RIGHT OUTER JOIN b on a.a = b.b;\nselect a.*,b.*  from a,b where a.a(+) = b.b;\n\na    |  b\n-----+----\n3    |  3\n4    |  4\nnull |  5\nnull |  6\n</code></pre>\n\n<p><strong>Full outer join</strong></p>\n\n<p>A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn\'t have a corresponding datum in B, then the B portion is null, and vice versa.</p>\n\n<pre><code>select * from a FULL OUTER JOIN b on a.a = b.b;\n\n a   |  b\n-----+-----\n   1 | null\n   2 | null\n   3 |    3\n   4 |    4\nnull |    6\nnull |    5\n</code></pre>\n    </div>',1,1,4511,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(4,4,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Important: If you have any local changes, they will be lost. With or without <code>--hard</code> option, any local commits that haven\'t been pushed will be lost.<sup>[*]</sup></h2>\n\n<p>If you have any files that are <em>not</em> tracked by Git (e.g. uploaded user content), these files will not be affected.</p>\n\n<hr>\n\n<p>I think this is the right way:</p>\n\n<pre><code>git fetch --all\n</code></pre>\n\n<p>Then, you have two options:</p>\n\n<pre><code>git reset --hard origin/master\n</code></pre>\n\n<p>OR If you are on some other branch:</p>\n\n<pre><code>git reset --hard origin/&lt;branch_name&gt;\n</code></pre>\n\n<h3>Explanation:</h3>\n\n<p><code>git fetch</code> downloads the latest from remote without trying to merge or rebase anything.</p>\n\n<p>Then the <code>git reset</code> resets the master branch to what you just fetched. The <code>--hard</code> option changes all the files in your working tree to match the files in <code>origin/master</code></p>\n\n<hr>\n\n<p><sup>[*]</sup>: It\'s worth noting that it is possible to maintain current local commits by creating a branch from <code>master</code> before resetting:</p>\n\n<pre><code>git checkout master\ngit branch new-branch-to-save-current-commits\ngit fetch --all\ngit reset --hard origin/master\n</code></pre>\n\n<p>After this, all of the old commits will be kept in <code>new-branch-to-save-current-commits</code>. Uncommitted changes however (even staged), will be lost. Make sure to stash and commit anything you need.</p>\n    </div>',1,1,4847,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(5,5,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Overall:</strong> </p>\n\n<p>Both PUT and POST can be used for creating. </p>\n\n<p>You have to ask \"what are you performing the action to?\" to distinguish what you should be using. Let\'s assume you\'re designing an API for asking questions.  If you want to use POST then you would do that to a list of questions. If you want to use PUT then you would do that to a particular question.</p>\n\n<p><strong>Great both can be used, so which one should I use in my RESTful design:</strong></p>\n\n<p>You do not need to support both PUT and POST.  </p>\n\n<p>Which is used is left up to you.  But just remember to use the right one depending on what object you are referencing in the request. </p>\n\n<p>Some considerations:</p>\n\n<ul>\n<li>Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT.  If you let the server decide then use POST.</li>\n<li>PUT is idempotent, so if you PUT an object twice, it has no effect.  This is a nice property, so I would use PUT when possible. </li>\n<li>You can update or create a resource with PUT with the same object URL</li>\n<li>With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object. </li>\n</ul>\n\n<p><strong>An example:</strong></p>\n\n<p><a href=\"http://stackoverflow.com/questions/256349/what-are-the-best-common-restful-url-verbs-and-actions/256359#256359\">I wrote the following as part of another answer on SO regarding this</a>:</p>\n\n<blockquote>\n  <p><strong>POST:</strong></p>\n  \n  <p>Used to modify and update a resource</p>\n\n<pre><code>POST /questions/&lt;existing_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>Note that the following is an error:</p>\n\n<pre><code>POST /questions/&lt;new_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>If the URL is not yet created, you\n  should not be using POST to create it\n  while specifying the name.  This should\n  result in a \'resource not found\' error\n  because <code>&lt;new_question&gt;</code> does not exist\n  yet.  You should PUT the <code>&lt;new_question&gt;</code>\n  resource on the server first.</p>\n  \n  <p>You could though do something like\n  this to create a resources using POST:</p>\n\n<pre><code>POST /questions HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>Note that in this case the resource\n  name is not specified, the new objects\n  URL path would be returned to you.</p>\n  \n  <p><strong>PUT:</strong> </p>\n  \n  <p>Used to create a resource, or\n  overwrite it.  While you specify the\n  resources new URL.</p>\n  \n  <p>For a new resource:</p>\n\n<pre><code>PUT /questions/&lt;new_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n  \n  <p>To overwrite an existing resource:</p>\n\n<pre><code>PUT /questions/&lt;existing_question&gt; HTTP/1.1\nHost: www.example.com/\n</code></pre>\n</blockquote>\n    </div>',1,1,2605,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(6,6,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Like this:</p>\n\n<pre><code>delete myObject.regex;\n// or,\ndelete myObject[\'regex\'];\n// or,\nvar prop = \"regex\";\ndelete myObject[prop];\n</code></pre>\n\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"http://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on their blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></em>. It is highly recommended.</p>\n    </div>',1,1,5025,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(7,7,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Update</h2>\n\n<p><a href=\"http://stackoverflow.com/a/1787014/456814\">Jakub\'s answer</a> actually improves on this. With Git versions ≥ 1.6.6, you can just do:</p>\n\n<pre><code>git fetch\ngit checkout test\n</code></pre>\n\n<p>(User masukomi points out below that <code>git checkout test</code> will NOT work in modern git if you have multiple remotes. In this case use <code>git checkout -b test &lt;name of remote&gt;/test</code>).</p>\n\n<h2>Old Answer</h2>\n\n<p>Before you can start working locally on a remote branch, you need to fetch it as called out in answers below. </p>\n\n<p>To fetch a branch, you simply need to:</p>\n\n<pre><code>git fetch origin\n</code></pre>\n\n<p>This will fetch all of the remote branches for you. You can see the branches available for checkout with:</p>\n\n<pre><code>git branch -v -a\n</code></pre>\n\n<p>With the remote branches in hand, you now  need to check out the branch you are interested in, giving you a local working copy:</p>\n\n<pre><code>git checkout -b test origin/test\n</code></pre>\n    </div>',1,1,5271,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(8,8,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p><a href=\"https://i.stack.imgur.com/QQ0OK.png\"><img src=\"https://i.stack.imgur.com/QQ0OK.png\" alt=\"metaclass diagram\"></a></p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href=\"http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037\">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. <code>type</code> is the usual metaclass in Python. In case you\'re wondering, yes, <code>type</code> is itself a class, and it is its own type. You won\'t be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\n\n<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the \'class\' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do \'extra things\' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>\n\n<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal \'magic\' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here\'s an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n    \"\"\"Decorator to turn \'foo\' method into \'__foo__\'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(cls, name, bases, attrs):\n\n        if name.startswith(\'None\'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, \'is_hook\', 0):\n                newattrs[\'__%s__\' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, cls).__new__(cls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it\'s called \'AutoClass\'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code></pre>\n    </div>',1,1,1287,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(9,9,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>First, find the <code>index</code> of the element you want to remove:</p>\n\n<pre><code>var array = [2, 5, 9];\nvar index = array.indexOf(5);\n</code></pre>\n\n<p><em>Note: <a href=\"http://kangax.github.io/compat-table/es5/#test-Array.prototype.indexOf\">browser support for indexOf</a> is limited</em>; it is not supported in Internet Explorer 7 and 8.</p>\n\n<p>Then remove it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a>:</p>\n\n<pre><code>if (index &gt; -1) {\n    array.splice(index, 1);\n}\n</code></pre>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n\n<hr>\n\n<p>If you need <code>indexOf</code> in an unsupported browser, try the following <code>polyfill</code>. Find more info about this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\"><strong><em><code>polyfill</code> here</em></strong></a>.</p>\n\n<pre><code>Array.prototype.indexOf || (Array.prototype.indexOf = function(d, e) {\n    var a;\n    if (null == this) throw new TypeError(\'\"this\" is null or not defined\');\n    var c = Object(this),\n        b = c.length &gt;&gt;&gt; 0;\n    if (0 === b) return -1;\n    a = +e || 0;\n    Infinity === Math.abs(a) &amp;&amp; (a = 0);\n    if (a &gt;= b) return -1;\n    for (a = Math.max(0 &lt;= a ? a : b - Math.abs(a), 0); a &lt; b;) {\n        if (a in c &amp;&amp; c[a] === d) return a;\n        a++\n    }\n    return -1\n});\n</code></pre>\n    </div>',1,1,5892,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(10,10,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://msdn.microsoft.com/en-us/library/362314fe.aspx\"><code>string</code></a> is an alias in C# for <a href=\"https://msdn.microsoft.com/en-us/library/system.string.aspx\"><code>System.String</code></a>.  So technically, there is no difference.  It\'s like <a href=\"http://stackoverflow.com/questions/62503/c-int-or-int32-should-i-care\"><code>int</code> <em>vs.</em> <code>System.Int32</code></a>.</p>\n\n<p>But int automatically references <code>System.Int32</code> because it is the default, while there are many other integer(<code>int</code>) types. Using <code>int</code> just defaults to the 32 bit integer if you don´t explicitly tell in your code what type of integer it should expect. If you reference <code>Int16</code> instead of int, you will specify the type from the default <code>Int32</code>.</p>\n\n<p>As far as guidelines, I think it\'s generally recommended to use <code>string</code> any time you\'re referring to an object.  </p>\n\n<p>e.g. </p>\n\n<pre><code>string place = \"world\";\n</code></pre>\n\n<p>Likewise, I think it\'s generally recommended to use <code>String</code> if you need to refer specifically to the class.</p>\n\n<p>e.g.</p>\n\n<pre><code>string greet = String.Format(\"Hello {0}!\", place);\n</code></pre>\n\n<p>This is the style that Microsoft tends to use in <a href=\"http://msdn.microsoft.com/en-us/library/System.String.Format.aspx#Format1_Example\">their examples</a>.</p>\n\n<hr>\n\n<p>It appears that the guidance in this area may have changed, as <a href=\"http://stylecop.codeplex.com/\">StyleCop</a> now enforces the use of the C# specific aliases.</p>\n    </div>',1,1,3827,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(11,11,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Quick note, this is almost certainly confusing <a href=\"http://en.wikipedia.org/wiki/Big_O_notation\">Big O notation</a> (which is an upper bound) with Theta notation (which is a two-side bound). In my experience this is actually typical of discussions in non-academic settings. Apologies for any confusion caused.</p>\n\n<hr>\n\n<p>Big O complexity can be visualized with this graph:</p>\n\n<p><img src=\"https://i.stack.imgur.com/WcBRI.png\" alt=\"Big O Analysis\"></p>\n\n<p>The simplest definition I can give for Big-O notation is this:</p>\n\n<p><strong>Big-O notation is a relative representation of the complexity of an algorithm.</strong></p>\n\n<p>There are some important and deliberately chosen words in that sentence:</p>\n\n<blockquote>\n  <ul>\n  <li><strong>relative:</strong> you can only compare apples to apples.  You can\'t compare an algorithm to do arithmetic multiplication to an algorithm that sorts a list of integers.  But a comparison of two algorithms to do arithmetic operations (one multiplication, one addition) will tell you something meaningful;</li>\n  <li><strong>representation:</strong> Big-O (in its simplest form) reduces the comparison between algorithms to a single variable.  That variable is chosen based on observations or assumptions.  For example, sorting algorithms are typically compared based on comparison operations (comparing two nodes to determine their relative ordering).  This assumes that comparison is expensive.  But what if comparison is cheap but swapping is expensive?  It changes the comparison; and</li>\n  <li><strong>complexity:</strong> if it takes me one second to sort 10,000 elements how long will it take me to sort one million?  Complexity in this instance is a relative measure to something else.</li>\n  </ul>\n</blockquote>\n\n<p>Come back and reread the above when you\'ve read the rest.</p>\n\n<p>The best example of Big-O I can think of is doing arithmetic.  Take two numbers (123456 and 789012).  The basic arithmetic operations we learnt in school were:</p>\n\n<blockquote>\n  <ul>\n  <li>addition;</li>\n  <li>subtraction;</li>\n  <li>multiplication; and</li>\n  <li>division.</li>\n  </ul>\n</blockquote>\n\n<p>Each of these is an operation or a problem.  A method of solving these is called an <strong>algorithm</strong>.</p>\n\n<p>Addition is the simplest.  You line the numbers up (to the right) and add the digits in a column writing the last number of that addition in the result.  The \'tens\' part of that number is carried over to the next column.</p>\n\n<p>Let\'s assume that the addition of these numbers is the most expensive operation in this algorithm.  It stands to reason that to add these two numbers together we have to add together 6 digits (and possibly carry a 7th).  If we add two 100 digit numbers together we have to do 100 additions.  If we add <strong>two</strong> 10,000 digit numbers we have to do 10,000 additions.</p>\n\n<p>See the pattern?  The <strong>complexity</strong> (being the number of operations) is directly proportional to the number of digits <em>n</em> in the larger number.  We call this <strong>O(n)</strong> or <strong>linear complexity</strong>.</p>\n\n<p>Subtraction is similar (except you may need to borrow instead of carry).</p>\n\n<p>Multiplication is different.  You line the numbers up, take the first digit in the bottom number and multiply it in turn against each digit in the top number and so on through each digit.  So to multiply our two 6 digit numbers we must do 36 multiplications.  We may need to do as many as 10 or 11 column adds to get the end result too.</p>\n\n<p>If we have two 100-digit numbers we need to do 10,000 multiplications and 200 adds.  For two one million digit numbers we need to do one trillion (10<sup>12</sup>) multiplications and two million adds.</p>\n\n<p>As the algorithm scales with n-<em>squared</em>, this is <strong>O(n<sup>2</sup>)</strong> or <strong>quadratic complexity</strong>.  This is a good time to introduce another important concept:</p>\n\n<p><strong>We only care about the most significant portion of complexity.</strong></p>\n\n<p>The astute may have realized that we could express the number of operations as: n<sup>2</sup> + 2n.  But as you saw from our example with two numbers of a million digits apiece, the second term (2n) becomes insignificant (accounting for 0.0002% of the total operations by that stage).</p>\n\n<p>One can notice that we\'ve assumed the worst case scenario here. While multiplying 6 digit numbers if one of them is 4 digit and the other one is 6 digit, then we only have 24 multiplications. Still we calculate the worst case scenario for that \'n\', i.e when both are 6 digit numbers. Hence Big-O notation is about the Worst-case scenario of an algorithm</p>\n\n<h1>The Telephone Book</h1>\n\n<p>The next best example I can think of is the telephone book, normally called the White Pages or similar but it\'ll vary from country to country.  But I\'m talking about the one that lists people by surname and then initials or first name, possibly address and then telephone numbers.</p>\n\n<p>Now if you were instructing a computer to look up the phone number for \"John Smith\" in a telephone book that contains 1,000,000 names, what would you do?  Ignoring the fact that you could guess how far in the S\'s started (let\'s assume you can\'t), what would you do?</p>\n\n<p>A typical implementation might be to open up to the middle, take the 500,000<sup>th</sup> and compare it to \"Smith\".  If it happens to be \"Smith, John\", we just got real lucky.  Far more likely is that \"John Smith\" will be before or after that name.  If it\'s after we then divide the last half of the phone book in half and repeat.  If it\'s before then we divide the first half of the phone book in half and repeat.  And so on.</p>\n\n<p>This is called a <strong>binary search</strong> and is used every day in programming whether you realize it or not.</p>\n\n<p>So if you want to find a name in a phone book of a million names you can actually find any name by doing this at most 20 times.  In comparing search algorithms we decide that this comparison is our \'n\'.</p>\n\n<blockquote>\n  <ul>\n  <li>For a phone book of 3 names it takes 2 comparisons (at most).</li>\n  <li>For 7 it takes at most 3.</li>\n  <li>For 15 it takes 4.</li>\n  <li>…</li>\n  <li>For 1,000,000 it takes 20.</li>\n  </ul>\n</blockquote>\n\n<p>That is staggeringly good isn\'t it?</p>\n\n<p>In Big-O terms this is <strong>O(log n)</strong> or <strong>logarithmic complexity</strong>.  Now the logarithm in question could be ln (base e), log<sub>10</sub>, log<sub>2</sub> or some other base.  It doesn\'t matter it\'s still O(log n) just like O(2n<sup>2</sup>) and O(100n<sup>2</sup>) are still both O(n<sup>2</sup>).</p>\n\n<p>It\'s worthwhile at this point to explain that Big O can be used to determine three cases with an algorithm:</p>\n\n<blockquote>\n  <ul>\n  <li><strong>Best Case:</strong> In the telephone book search, the best case is that we find the name in one comparison.  This is <strong>O(1)</strong> or <strong>constant complexity</strong>;</li>\n  <li><strong>Expected Case:</strong> As discussed above this is O(log n); and</li>\n  <li><strong>Worst Case:</strong> This is also O(log n).</li>\n  </ul>\n</blockquote>\n\n<p>Normally we don\'t care about the best case.  We\'re interested in the expected and worst case.  Sometimes one or the other of these will be more important.</p>\n\n<p>Back to the telephone book.</p>\n\n<p>What if you have a phone number and want to find a name?  The police have a reverse phone book but such look-ups are denied to the general public.  Or are they?  Technically you can reverse look-up a number in an ordinary phone book.  How?</p>\n\n<p>You start at the first name and compare the number.  If it\'s a match, great, if not, you move on to the next.  You have to do it this way because the phone book is <strong>unordered</strong> (by phone number anyway).</p>\n\n<p>So to find a name given the phone number (reverse lookup):</p>\n\n<blockquote>\n  <ul>\n  <li><strong>Best Case:</strong> O(1);</li>\n  <li><strong>Expected Case:</strong> O(n) (for 500,000); and</li>\n  <li><strong>Worst Case:</strong> O(n) (for 1,000,000).</li>\n  </ul>\n</blockquote>\n\n<h1>The Travelling Salesman</h1>\n\n<p>This is quite a famous problem in computer science and deserves a mention.  In this problem you have N towns. Each of those towns is linked to 1 or more other towns by a road of a certain distance. The Travelling Salesman problem is to find the shortest tour that visits every town.</p>\n\n<p>Sounds simple?  Think again.</p>\n\n<p>If you have 3 towns A, B and C with roads between all pairs then you could go:</p>\n\n<blockquote>\n  <ul>\n  <li>A → B → C</li>\n  <li>A → C → B</li>\n  <li>B → C → A</li>\n  <li>B → A → C</li>\n  <li>C → A → B</li>\n  <li>C → B → A</li>\n  </ul>\n</blockquote>\n\n<p>Well actually there\'s less than that because some of these are equivalent (A → B → C and C → B → A are equivalent, for example, because they use the same roads, just in reverse).</p>\n\n<p>In actuality there are 3 possibilities.</p>\n\n<blockquote>\n  <ul>\n  <li>Take this to 4 towns and you have (iirc) 12 possibilities.</li>\n  <li>With 5 it\'s 60.</li>\n  <li>6 becomes 360.</li>\n  </ul>\n</blockquote>\n\n<p>This is a function of a mathematical operation called a <strong>factorial</strong>.  Basically:</p>\n\n<blockquote>\n  <ul>\n  <li>5! = 5 × 4 × 3 × 2 × 1 = 120</li>\n  <li>6! = 6 × 5 × 4 × 3 × 2 × 1 = 720</li>\n  <li>7! = 7 × 6 × 5 × 4 × 3 × 2 × 1 = 5040</li>\n  <li>…</li>\n  <li>25! = 25 × 24 × … × 2 × 1 = 15,511,210,043,330,985,984,000,000</li>\n  <li>…</li>\n  <li>50! = 50 × 49 × … × 2 × 1 = 3.04140932 × 10<sup>64</sup></li>\n  </ul>\n</blockquote>\n\n<p>So the Big-O of the Travelling Salesman problem is <strong>O(n!)</strong> or <strong>factorial or combinatorial complexity</strong>.</p>\n\n<p><strong>By the time you get to 200 towns there isn\'t enough time left in the universe to solve the problem with traditional computers.</strong></p>\n\n<p>Something to think about.</p>\n\n<h1>Polynomial Time</h1>\n\n<p>Another point I wanted to make quick mention of is that any algorithm that has a complexity of <strong>O(n<sup>a</sup>)</strong> is said to have <strong>polynomial complexity</strong> or is solvable in <strong>polynomial time</strong>.</p>\n\n<p>O(n), O(n<sup>2</sup>) etc are all polynomial time. Some problems cannot be solved in polynomial time.  Certain things are used in the world because of this.  Public Key Cryptography is a prime example.  It is computationally hard to find two prime factors of a very large number.  If it wasn\'t, we couldn\'t use the public key systems we use.</p>\n\n<p>Anyway, that\'s it for my (hopefully plain English) explanation of Big O (revised).</p>\n    </div>',1,1,5276,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(12,12,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the <a href=\"http://developer.android.com/guide/topics/resources/more-resources.html#Dimension\">Android Developer Documentation</a>:</p>\n\n<ol>\n<li><blockquote>\n  <p><strong>px</strong><br>\n  Pixels - corresponds to actual pixels on the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>in</strong><br>\n  Inches - based on the physical size of the screen.<br>\n  1 Inch = 2.54 centimeters</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>mm</strong><br>\n  Millimeters - based on the physical size of the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>pt</strong><br>\n  Points - 1/72 of an inch based on the physical size of the screen.</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>dp</strong> or <strong>dip</strong><br>\n  Density-independent Pixels - an abstract unit that is based on the physical density of the screen. These units are relative to a 160\n      dpi screen, so one dp is one pixel on a 160 dpi screen. The ratio of\n      dp-to-pixel will change with the screen density, but not necessarily\n      in direct proportion. Note: The compiler accepts both \"dip\" and\n      \"dp\", though \"dp\" is more consistent with \"sp\".</p>\n</blockquote></li>\n<li><blockquote>\n  <p><strong>sp</strong><br>\n  Scale-independent Pixels - this is like the dp unit, but it is also scaled by the user\'s font size preference. It is recommend you\n      use this unit when specifying font sizes, so they will be adjusted\n      for both the screen density and user\'s preference.</p>\n</blockquote></li>\n</ol>\n\n<p>From <a href=\"https://www.captechconsulting.com/blogs/understanding-density-independence-in-android\">Understanding Density Independence In Android</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+----------------+----------------+---------------+-------------------------------+\n| Density Bucket | Screen Density | Physical Size | Pixel Size                    | \n+----------------+----------------+---------------+-------------------------------+\n| ldpi           | 120 dpi        | 0.5 x 0.5 in  | 0.5 in * 120 dpi = 60x60 px   | \n+----------------+----------------+---------------+-------------------------------+\n| mdpi           | 160 dpi        | 0.5 x 0.5 in  | 0.5 in * 160 dpi = 80x80 px   | \n+----------------+----------------+---------------+-------------------------------+\n| hdpi           | 240 dpi        | 0.5 x 0.5 in  | 0.5 in * 240 dpi = 120x120 px | \n+----------------+----------------+---------------+-------------------------------+\n| xhdpi          | 320 dpi        | 0.5 x 0.5 in  | 0.5 in * 320 dpi = 160x160 px | \n+----------------+----------------+---------------+-------------------------------+\n| xxhdpi         | 480 dpi        | 0.5 x 0.5 in  | 0.5 in * 480 dpi = 240x240 px | \n+----------------+----------------+---------------+-------------------------------+\n| xxxhdpi        | 640 dpi        | 0.5 x 0.5 in  | 0.5 in * 640 dpi = 320x320 px | \n+----------------+----------------+---------------+-------------------------------+\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>+---------+-------------+---------------+-------------+--------------------+\n| Unit    | Description | Units Per     | Density     | Same Physical Size | \n|         |             | Physical Inch | Independent | On Every Screen    | \n+---------+-------------+---------------+-------------+--------------------+\n| px      | Pixels      | Varies        | No          | No                 | \n+---------+-------------+---------------+-------------+--------------------+\n| in      | Inches      | 1             | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| mm      | Millimeters | 25.4          | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| pt      | Points      | 72            | Yes         | Yes                | \n+---------+-------------+---------------+-------------+--------------------+\n| dp      | Density     | ~160          | Yes         | No                 | \n|         | Independent |               |             |                    | \n|         | Pixels      |               |             |                    | \n+---------+-------------+---------------+-------------+--------------------+\n| sp      | Scale       | ~160          | Yes         | No                 | \n|         | Independent |               |             |                    | \n|         | Pixels      |               |             |                    | \n+---------+-------------+---------------+-------------+--------------------+\n</code></pre>\n\n<p>More info can be also be found in the <a href=\"https://www.google.com/design/spec/layout/units-measurements.html#\">Google Design Documentation</a>.</p>\n\n<p>To calculate dimensions on real device <a href=\"https://play.google.com/store/apps/details?id=com.faizmalkani.keylines&amp;hl=en\">this</a> app can be used.</p>\n    </div>',1,1,4255,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(13,13,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can</p>\n\n<pre><code>git remote set-url origin git://new.url.here\n</code></pre>\n\n<p>(see <code>git help remote</code>) or you can just edit <code>.git/config</code> and change the URLs there. You\'re not in any danger of losing history unless you do something very silly (and if you\'re worried, just make a copy of your repo, since your repo <em>is</em> your history.)</p>\n    </div>',1,1,3550,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(14,14,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Iterate through the <a href=\"http://www.java2s.com/Code/JavaAPI/java.util/HashtableentrySet.htm\"><code>entrySet</code></a> like so:</p>\n\n<pre><code>public static void printMap(Map mp) {\n    Iterator it = mp.entrySet().iterator();\n    while (it.hasNext()) {\n        Map.Entry pair = (Map.Entry)it.next();\n        System.out.println(pair.getKey() + \" = \" + pair.getValue());\n        it.remove(); // avoids a ConcurrentModificationException\n    }\n}\n</code></pre>\n\n<p>Read more on <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Map.html\"><code>Map</code></a></p>\n    </div>',1,1,2266,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(15,15,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>return false</code> from <em>within a jQuery event handler</em> is effectively the same as calling both  <code>e.preventDefault</code> and <code>e.stopPropagation</code> on the passed <a href=\"http://api.jquery.com/category/events/event-object/\">jQuery.Event object.</a></p>\n\n<p><code>e.preventDefault()</code> will prevent the default event from occuring, <code>e.stopPropagation()</code> will prevent the event from bubbling up and <code>return false</code> will do both. Note that this behaviour differs from <em>normal</em> (non-jQuery) event handlers, in which, notably, <code>return false</code> does <em>not</em> stop the event from bubbling up.</p>\n\n<p>Source: <a href=\"http://ejohn.org/\">John Resig</a></p>\n\n<p><a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\"><strong>Any benefit to using event.preventDefault() over \"return false\" to cancel out an href click?</strong></a></p>\n    </div>',1,1,2257,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(16,16,'<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>UPDATE\n    Table_A\nSET\n    Table_A.col1 = Table_B.col1,\n    Table_A.col2 = Table_B.col2\nFROM\n    Some_Table AS Table_A\n    INNER JOIN Other_Table AS Table_B\n        ON Table_A.id = Table_B.id\nWHERE\n    Table_A.col3 = \'cool\'\n</code></pre>\n    </div>',1,1,3351,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(17,17,'<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>new ArrayList&lt;Element&gt;(Arrays.asList(array))\n</code></pre>\n    </div>',1,1,3033,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(18,18,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Strings are immutable</strong>. That means once you\'ve created the <code>String</code>, if another process can dump memory, there\'s no way (aside from <a href=\"https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\">reflection</a>) you can get rid of the data before <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29\">garbage collection</a> kicks in.</p>\n\n<p>With an array, you can explicitly wipe the data after you\'re done with it. You can overwrite the array with anything you like, and the password won\'t be present anywhere in the system, even before garbage collection.</p>\n\n<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only reduces the window of opportunity for an attacker, and it\'s only for this specific type of attack.</p>\n\n<p>As noted in comments, it\'s possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there\'s still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>\n    </div>',1,1,2909,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(19,19,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>To check if a directory exists in a shell script you can use the following:</p>\n\n<pre><code>if [ -d \"$DIRECTORY\" ]; then\n  # Control will enter here if $DIRECTORY exists.\nfi\n</code></pre>\n\n<p>Or to check if a directory doesn\'t exist:</p>\n\n<pre><code>if [ ! -d \"$DIRECTORY\" ]; then\n  # Control will enter here if $DIRECTORY doesn\'t exist.\nfi\n</code></pre>\n\n<hr>\n\n<p>However, as <a href=\"http://stackoverflow.com/users/1438/jon-ericson\">Jon Ericson</a> points out (thanks Jon), subsequent commands may not work as intended if you do not take into account that a symbolic link to a directory will also pass this check.\nE.g. running this:</p>\n\n<pre><code>ln -s \"$ACTUAL_DIR\" \"$SYMLINK\"\nif [ -d \"$SYMLINK\" ]; then \n  rmdir \"$SYMLINK\" \nfi\n</code></pre>\n\n<p>Will produce the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rmdir: failed to remove `symlink\': Not a directory\n</code></pre>\n\n<p>So symbolic links may have to be treated differently, if subsequent commands expect directories:</p>\n\n<pre><code>if [ -d \"$LINK_OR_DIR\" ]; then \n  if [ -L \"$LINK_OR_DIR\" ]; then\n    # It is a symlink!\n    # Symbolic link specific commands go here.\n    rm \"$LINK_OR_DIR\"\n  else\n    # It\'s a directory!\n    # Directory command goes here.\n    rmdir \"$LINK_OR_DIR\"\n  fi\nfi\n</code></pre>\n\n<hr>\n\n<p>Take particular note of the double-quotes used to wrap the variables, the reason for this is explained by 8jean <a href=\"http://stackoverflow.com/a/67458/102401\">in another answer</a>. </p>\n\n<p>If the variables contain spaces or other unusual characters it will probably cause the script to fail.</p>\n    </div>',1,1,3151,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(20,20,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>The difference is that <code>apply</code> lets you invoke the function with <code>arguments</code> as an array; <code>call</code> requires the parameters be listed explicitly. A useful mnemonic is \"A for array and C for comma.\"</p>\n\n<p>See MDN\'s documentation on <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">apply</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\">call</a>.</p>\n\n<p>Pseudo syntax:</p>\n\n<p><code>theFunction.apply(valueForThis, arrayOfArgs)</code></p>\n\n<p><code>theFunction.call(valueForThis, arg1, arg2, ...)</code></p>\n\n<p>There is also, as of ES6, the possibility to <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\"><code>spread</code></a> the array for use with the <code>call</code> function, you can see the compatibilities <a href=\"http://kangax.github.io/compat-table/es6/\">here</a>.</p>\n\n<p>Sample code:</p>\n\n<pre><code>function theFunction(name, profession) {\n    console.log(\"My name is \" + name + \" and I am a \" + profession + \".\");\n}\ntheFunction(\"John\", \"fireman\");\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\ntheFunction.call(undefined, ...[\"Matthew\", \"physicist\"]); // used with the spread operator\n\n// Output: \n\n// My name is John and I am a fireman.\n// My name is Susan and I am a school teacher.\n// My name is Claude and I am a mathematician.\n// My name is Matthew and I am a physicist.\n</code></pre>\n    </div>',1,1,2762,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(21,21,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>With <code>git log</code> check which commit is one prior the merge. Then you can reset it using:</p>\n\n<pre><code>git reset --hard commit_sha\n</code></pre>\n\n<p>There\'s also another way</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>will get you back 1 commit.</p>\n\n<p><strong>Be aware that any modified and uncommitted/unstashed files will be reset to their unmodified state</strong>. To keep them either stash changes away or see <code>--merge</code> option below.  </p>\n\n<hr>\n\n<p>As @Velmont suggested below in his answer, in this direct case using:</p>\n\n<pre><code>git reset --hard ORIG_HEAD\n</code></pre>\n\n<p>might yield better results, as it should preserve your changes. <code>ORIG_HEAD</code> will point to a commit directly before merge has occurred, so you don\'t have to hunt for it yourself.</p>\n\n<hr>\n\n<p>A tips is to use the <code>--merge</code> switch instead of <code>--hard</code>, it doesn\'t reset files unnecessarily:</p>\n\n<blockquote>\n  <p>--merge</p>\n  \n  <p>Resets the index and updates the files in the working tree that are different between &lt;commit&gt; and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added).      </p>\n</blockquote>\n    </div>',1,1,2459,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(22,22,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming the commit you want is <code>abcde</code>:</p>\n\n<pre><code>git checkout abcde file/to/restore\n</code></pre>\n\n<p>The <a href=\"http://schacon.github.com/git/git-checkout.html\">git checkout</a> man page gives more information.</p>\n\n<p>Note if you want to revert changes made to the files in commit <code>abcde</code> you have to pass the commit right before <code>abcde</code>. You can use <code>abcde~1</code> for this.</p>\n\n<p>As a side note, I\'ve always been uncomfortable with this command because it\'s used for both ordinary things (changing between branches) and unusual destructive things (discarding changes in the working directory).</p>\n    </div>',1,1,3307,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(23,23,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>There have been a couple attempts at this. The question is: do you want actual GUIDs, or just random numbers that <em>look</em> like GUIDs? It\'s easy enough to generate random numbers.</p>\n\n<pre><code>function guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + \'-\' + s4() + \'-\' + s4() + \'-\' +\n    s4() + \'-\' + s4() + s4() + s4();\n}\n</code></pre>\n\n<p><strike>\nHowever, note in the comments that such values are not genuine GUIDs. There\'s no way to generate real GUIDs in Javascript, because they depend on properties of the local computer that browsers do not expose. You\'ll need to use OS-specific services like ActiveX: <a href=\"http://p2p.wrox.com/topicindex/20339.htm\">http://p2p.wrox.com/topicindex/20339.htm</a>\n</strike> Edit: not correct - RFC4122 allows random (\"version 4\") ids.  See other answers for specifics.</p>\n\n<p>Use:</p>\n\n<pre><code>var uuid = guid();\n</code></pre>\n\n<h1>Demo:</h1>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function guid() {\r\n  return s4() + s4() + \'-\' + s4() + \'-\' + s4() + \'-\' +\r\n    s4() + \'-\' + s4() + s4() + s4();\r\n}\r\n\r\nfunction s4() {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n}\r\n\r\ndocument.getElementById(\'jsGenId\').addEventListener(\'click\', function() {\r\n  document.getElementById(\'jsIdResult\').value = guid();\r\n})</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input { font-family: monospace; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"jsGenId\" type=\"button\" onclick=\"runGuid\"&gt;Generate GUID&lt;/button&gt;\r\n&lt;br&gt;\r\n&lt;input id=\"jsIdResult\" type=\"text\" placeholder=\"Results will be placed here...\" readonly size=\"40\"/&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>',1,1,1369,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(24,24,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can force Android to hide the virtual keyboard using the <a href=\"http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html\">InputMethodManager</a>, calling <a href=\"http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow%28android.os.IBinder,%20int%29\"><code>hideSoftInputFromWindow</code></a>, passing in the token of the window containing your focused view.</p>\n\n<pre><code>// Check if no view has focus:\nView view = this.getCurrentFocus();\nif (view != null) {  \n    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n</code></pre>\n\n<p>This will force the keyboard to be hidden in all situations. In some cases you will want to pass in <code>InputMethodManager.HIDE_IMPLICIT_ONLY</code> as the second parameter to ensure you only hide the keyboard when the user didn\'t explicitly force it to appear (by holding down menu).</p>\n    </div>',1,1,3282,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(25,25,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Modern browsers have <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array#indexOf</code></a>, which can do that. Even newer browsers have <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility\"><code>Array#includes</code></a>, which does <em>exactly</em> that, but unfortunately <a href=\"http://kangax.github.io/compat-table/esnext/#test-Array.prototype.includes\">it\'s not widely supported</a>. Older browsers can be supported using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\">this polyfill</a>.</p>\n\n<p>jQuery offers <a href=\"http://api.jquery.com/jquery.inarray/\"><code>$.inArray</code></a>, which is functionally equivalent to <code>Array#indexOf</code>.</p>\n\n<p><a href=\"http://underscorejs.org/#\">underscore.js</a>, a JavaScript utility library, offers <a href=\"http://underscorejs.org/#contains\"><code>_.contains(list, value)</code></a>, alias <code>_.include(list, value)</code>, both of which use <a href=\"http://underscorejs.org/#indexOf\">indexOf</a> internally if passed a JavaScript array.</p>\n\n<p>Some other frameworks offer similar methods:</p>\n\n<ul>\n<li>Dojo Toolkit: <a href=\"http://dojotoolkit.org/reference-guide/dojo/indexOf.html\"><code>dojo.indexOf(array, value, [fromIndex, findLast])</code></a></li>\n<li>Prototype: <a href=\"http://api.prototypejs.org/language/Array/prototype/indexOf/\"><code>array.indexOf(value)</code></a></li>\n<li>MooTools: <a href=\"http://mootools.net/docs/core/Native/Array#Array:indexOf\"><code>array.indexOf(value)</code></a></li>\n<li>MochiKit: <a href=\"http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue\"><code>findValue(array, value)</code></a></li>\n<li>MS Ajax: <a href=\"http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx\"><code>array.indexOf(value)</code></a></li>\n<li>Ext: <a href=\"http://docs.sencha.com/extjs/4.0.0/#/api/Ext.Array-method-contains\"><code>Ext.Array.contains(array, value)</code></a></li>\n<li>Lodash: <a href=\"https://lodash.com/docs#includes\"><code>_.includes(array, value, [from])</code></a> (is <code>_.contains</code> prior 4.0.0)</li>\n</ul>\n\n<p>Notice that some frameworks implement this as a function, while others add the function to the array prototype.</p>\n\n<h2>Languages that compile to JavaScript</h2>\n\n<p>In <a href=\"http://coffeescript.org/#try:a%20%3D%20%5B1%2C%202%2C%203%2C%204%5D%0Aalert%282%20in%20a%29\">CoffeeScript</a>, the <code>in</code> operator is the equivalent of <code>contains</code>:</p>\n\n<pre><code>a = [1, 2, 3, 4]\nalert(2 in a)\n</code></pre>\n\n<p><a href=\"http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-collections\">Dart</a>:</p>\n\n<pre><code>var mylist = [1, 2, 3];\nassert(mylist.contains(1));\nassert(mylist.indexOf(1) == 0);\n</code></pre>\n    </div>',1,1,3018,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(26,26,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Basics</strong></p>\n\n<p>For controlling \"cellpadding\" in CSS, you can simply use <code>padding</code> on table cells. E.g. for 10px of \"cellpadding\":</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>td { \n    padding: 10px;\n}\n</code></pre>\n\n<p>For \"cellspacing\", you can apply the <code>border-spacing</code> CSS property to your table. E.g. for 10px of \"cellspacing\":</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>table { \n    border-spacing: 10px;\n    border-collapse: separate;\n}\n</code></pre>\n\n<p>This property will even allow separate horizontal and vertical spacing, something you couldn\'t do with old-school \"cellspacing\".</p>\n\n<p><strong>Issues in IE &lt;= 7</strong></p>\n\n<p>This will work in almost all popular browsers except for Internet Explorer up through Internet Explorer 7, where you\'re almost out of luck. I say \"almost\" because these browsers still support the <code>border-collapse</code> property, which merges the borders of adjoining table cells. If you\'re trying to eliminate cellspacing (that is, <code>cellspacing=\"0\"</code>) then <code>border-collapse:collapse</code> should have the same effect: no space between table cells. This support is buggy, though, as it does not override an existing <code>cellspacing</code> HTML attribute on the table element.</p>\n\n<p>In short: for non-Internet Explorer 5-7 browsers, <code>border-spacing</code> handles you. For Internet Explorer, if your situation is just right (you want 0 cellspacing and your table doesn\'t have it defined already), you can use <code>border-collapse:collapse</code>.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>table { \n    border-spacing: 0;\n    border-collapse: collapse;\n}\n</code></pre>\n\n<p>Note: For a great overview of CSS properties that one can apply to tables and for which browsers, see this <a href=\"http://www.quirksmode.org/css/tables.html\">fantastic Quirksmode page</a>.</p>\n    </div>',1,1,2773,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(27,27,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>When the Python interpreter reads a source file, it executes all of the code found in it.  </p>\n\n<p>Before executing the code, it will define a few special variables.  For example, if the python interpreter is running that module (the source file) as the main program, it sets the special <code>__name__</code> variable to have a value <code>\"__main__\"</code>.  If this file is being imported from another module, <code>__name__</code> will be set to the module\'s name.</p>\n\n<p>In the case of your script, let\'s assume that it\'s executing as the main function, e.g. you said something like</p>\n\n<pre><code>python threading_example.py\n</code></pre>\n\n<p>on the command line.  After setting up the special variables, it will execute the <code>import</code> statement and load those modules.  It will then evaluate the <code>def</code> block, creating a function object and creating a variable called <code>myfunction</code> that points to the function object.  It will then read the <code>if</code> statement and see that <code>__name__</code> does equal <code>\"__main__\"</code>, so it will execute the block shown there.</p>\n\n<p>One of the reasons for doing this is that sometimes you write a module (a <code>.py</code> file) where it can be executed directly.  Alternatively, it can also be imported and used in another module.  By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.</p>\n\n<p>See <a href=\"http://ibiblio.org/g2swap/byteofpython/read/module-name.html\">this page</a> for some extra details.</p>\n    </div>',1,1,2700,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(28,28,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a> is probably the best way. You can see a bunch of tests <a href=\"http://jsfiddle.net/ghvj4gy9/embedded/result,js/\">here</a> (taken from <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/fast/forms/resources/ValidityState-typeMismatch-email.js&amp;sq=package:chromium&amp;type=cs\">chromium</a>)</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n</code></pre>\n\n<p>Here\'s the example of regular expresion that accepts unicode:</p>\n\n<pre><code>var re = /^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can  easily be disabled. This should be validated on the server side as well.</p>\n\n<p>Here\'s an example of the above in action:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function validateEmail(email) {\r\n  var re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n}\r\n\r\nfunction validate() {\r\n  $(\"#result\").text(\"\");\r\n  var email = $(\"#email\").val();\r\n  if (validateEmail(email)) {\r\n    $(\"#result\").text(email + \" is valid :)\");\r\n    $(\"#result\").css(\"color\", \"green\");\r\n  } else {\r\n    $(\"#result\").text(email + \" is not valid :(\");\r\n    $(\"#result\").css(\"color\", \"red\");\r\n  }\r\n  return false;\r\n}\r\n\r\n$(\"#validate\").bind(\"click\", validate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;form&gt;\r\n  &lt;p&gt;Enter an email address:&lt;/p&gt;\r\n  &lt;input id=\'email\'&gt;\r\n  &lt;button type=\'submit\' id=\'validate\'&gt;Validate!&lt;/button&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;h2 id=\'result\'&gt;&lt;/h2&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>',1,1,2693,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(29,29,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are several differences between HashMap and Hashtable in Java:</p>\n\n<ol>\n<li><p><a href=\"http://java.sun.com/javase/7/docs/api/java/util/Hashtable.html\"><code>Hashtable</code></a> is <a href=\"http://stackoverflow.com/questions/1085709/what-does-synchronized-mean\">synchronized</a>, whereas <a href=\"http://java.sun.com/javase/7/docs/api/java/util/HashMap.html\"><code>HashMap</code></a> is not.  This makes <code>HashMap</code> better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.</p></li>\n<li><p><code>Hashtable</code> does not allow <code>null</code> keys or values.  <code>HashMap</code> allows one <code>null</code> key and any number of <code>null</code> values.</p></li>\n<li><p>One of HashMap\'s subclasses is <a href=\"http://java.sun.com/javase/7/docs/api/java/util/LinkedHashMap.html\"><code>LinkedHashMap</code></a>, so in the event that you\'d want predictable iteration order (which is insertion order by default), you could easily swap out the <code>HashMap</code> for a <code>LinkedHashMap</code>.  This wouldn\'t be as easy if you were using <code>Hashtable</code>.</p></li>\n</ol>\n\n<p>Since synchronization is not an issue for you, I\'d recommend <code>HashMap</code>. If synchronization becomes an issue, you may also look at <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\"><code>ConcurrentHashMap</code></a>.</p>\n    </div>',1,1,2508,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(30,30,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since <a href=\"https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137\">git1.8.3 (April 22d, 2013)</a>:</p>\n\n<blockquote>\n  <p>There was no Porcelain way to say \"I no longer am interested in this submodule\", once you express your interest in a submodule with \"<code>submodule init</code>\".<br>\n  \"<strong><code>submodule deinit</code></strong>\" is the way to do so.</p>\n</blockquote>\n\n<p>The deletion process also uses <code>git rm</code> (since git1.8.5 October 2013).  </p>\n\n<h2>Summary</h2>\n\n<p>The all removal process would then be:</p>\n\n<pre><code>mv asubmodule asubmodule_tmp\ngit submodule deinit asubmodule    \ngit rm asubmodule\n# Note: asubmodule (no trailing slash)\n# or, if you want to leave it in your working tree\ngit rm --cached asubmodule\nmv asubmodule_tmp asubmodule\n</code></pre>\n\n<p>But you seem to still need a:</p>\n\n<pre><code>rm -rf .git/modules/asubmodule\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p><code>rm -rf</code>: This is mentioned in <a href=\"http://stackoverflow.com/users/2753241/daniel-schroeder\">Daniel Schroeder</a>\'s <a href=\"http://stackoverflow.com/a/26505847/6309\">answer</a>, and summarized by <a href=\"http://stackoverflow.com/users/246776/eonil\">Eonil</a> in <a href=\"http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000\">the comments</a>:</p>\n\n<blockquote>\n  <p>This leaves <code>.git/modules/&lt;path-to-submodule&gt;/</code> unchanged.<br>\n  So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git rm</code>: See <a href=\"https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef\">commit 95c16418</a>:</p>\n\n<blockquote>\n  <p>Currently using \"<code>git rm</code>\" on a submodule removes the submodule\'s work tree from that of the superproject and the gitlink from the index.<br>\n  But the submodule\'s section in <code>.gitmodules</code> is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in <code>.git/config</code>, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</p>\n  \n  <p>Let \"<code>git rm</code>\" help the user by not only removing the submodule from the work tree but by also removing the \"<code>submodule.&lt;submodule name&gt;</code>\" section from the .gitmodules file and stage both.</p>\n</blockquote>\n\n<hr>\n\n<p><code>git submodule deinit</code>: It stems from <a href=\"http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html\">this patch</a>:</p>\n\n<blockquote>\n  <p>With \"<code>git submodule init</code>\" the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to \"<code>git submodule update</code>\".<br>\n  But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the \"<code>submodule.$name.url</code>\" setting from <code>.git/config</code> together with the work tree himself).</p>\n  \n  <p>Help those users by providing a \'<strong><code>deinit</code></strong>\' command.<br>\n  This <strong>removes the whole <code>submodule.&lt;name&gt;</code> section from <code>.git/config</code> either for the given\n  submodule(s)</strong> (or for all those which have been initialized if \'<code>.</code>\' is given).<br>\n  Fail if the current work tree contains modifications unless forced.<br>\n  Complain when for a submodule given on the command line the url setting can\'t be found in <code>.git/config</code>, but nonetheless don\'t fail. </p>\n</blockquote>\n\n<p>This takes care if the (de)initialization steps (<code>.git/config</code> and <code>.git/modules/xxx</code>)</p>\n\n<p>Since git1.8.5, the <code>git rm</code> takes <em>also</em> care of the:</p>\n\n<ul>\n<li>\'<code>add</code>\' step which records the url of a submodule in the <code>.gitmodules</code> file: it is need to removed for you.</li>\n<li>the submodule <strong><a href=\"http://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598\">special entry</a></strong> (as illustrated by <a href=\"http://stackoverflow.com/q/16574625/6309\">this question</a>): the git rm removes it from the index:<br>\n<code>git rm --cached path_to_submodule</code> (no trailing slash)<br>\nThat will remove that directory stored in the index with a special mode \"160000\", marking it as a submodule root directory.</li>\n</ul>\n\n<p>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</p>\n\n<pre><code>git add mysubmodule/file.txt \nPath \'mysubmodule/file.txt\' is in submodule \'mysubmodule\'\n</code></pre>\n    </div>',1,1,1357,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(31,31,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look at the <a href=\"https://docs.python.org/2/library/subprocess.html\">subprocess module</a> in the stdlib:</p>\n\n<pre><code>from subprocess import call\ncall([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of <strong>subprocess</strong> vs <strong>system</strong> is that it is more flexible (you can get the stdout, stderr, the \"real\" status code, better error handling, etc...). I think <a href=\"https://docs.python.org/library/os.html#os.system\"><code>os.system</code></a> is deprecated, too, or will be. See <a href=\"https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\">Replacing Older Functions with the subprocess Module</a>.</p>\n    </div>',1,1,2370,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(32,32,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>It prevents <a href=\"http://haacked.com/archive/2009/06/25/json-hijacking.aspx\">JSON hijacking</a>.</p>\n\n<p>Contrived example: say Google has a URL like <code>mail.google.com/json?action=inbox</code> which returns the first 50 messages of your inbox in JSON format. Evil websites on other domains can\'t make AJAX requests to get this data due to the same-origin policy, but they can include the URL via a <code>&lt;script&gt;</code> tag. The URL is visited with <em>your</em> cookies, and by <a href=\"http://ejohn.org/blog/re-securing-json/\">overriding the global array constructor or accessor methods</a> they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the JSON content.</p>\n\n<p>The <code>while(1);</code> or <code>&amp;&amp;&amp;BLAH&amp;&amp;&amp;</code> prevents this: an AJAX request at <code>mail.google.com</code> will have full access to the text content, and can strip it away. But a <code>&lt;script&gt;</code> tag insertion blindly executes the JavaScript without any processing, resulting in either an infinite loop or a syntax error.</p>\n\n<p>This does not address the issue of cross-site request forgery.</p>\n    </div>',1,1,2687,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(33,33,'<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>foreach (Suit suit in Enum.GetValues(typeof(Suit)))\n{\n    // ...\n}\n</code></pre>\n    </div>',1,1,3144,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(34,34,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>A nice way to do this is using <a href=\"http://commons.apache.org/\">Apache commons</a> <code><a href=\"https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html\">IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>... something like</p>\n\n<pre><code>StringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, encoding);\nString theString = writer.toString();\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>// NB: does not close inputStream, you can use IOUtils.closeQuietly for that\nString theString = IOUtils.toString(inputStream, encoding); \n</code></pre>\n\n<p>Alternatively, you could use <code>ByteArrayOutputStream</code> if you don\'t want to mix your Streams and Writers</p>\n    </div>',1,1,1535,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(35,35,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Given a branch <code>foo</code> and a remote <code>upstream</code>:</p>\n\n<p><strong>As of Git 1.8.0:</strong></p>\n\n<pre><code>git branch -u upstream/foo\n</code></pre>\n\n<p>Or, if local branch <code>foo</code> is not the current branch:</p>\n\n<pre><code>git branch -u upstream/foo foo\n</code></pre>\n\n<p>Or, if you like to type longer commands, these are equivalent to the above two:</p>\n\n<pre><code>git branch --set-upstream-to=upstream/foo\n\ngit branch --set-upstream-to=upstream/foo foo\n</code></pre>\n\n<p><strong>As of Git 1.7.0:</strong></p>\n\n<pre><code>git branch --set-upstream foo upstream/foo\n</code></pre>\n\n<p><strong>Notes:</strong></p>\n\n<p>All of the above commands will cause local branch <code>foo</code> to track remote branch <code>foo</code> from remote <code>upstream</code>.  The old (1.7.x) syntax is deprecated in favor of the new (1.8+) syntax.  The new syntax is intended to be more intuitive and easier to remember.</p>\n\n<hr>\n\n<p>See also: <a href=\"http://stackoverflow.com/q/6089294/95706\">Why do I need to do `--set-upstream` all the time?</a></p>\n    </div>',1,1,3062,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(36,36,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>From their <strong><a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#433\">source</a></strong>, the method used to return <code>false</code> until it was changed in API 21.</p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n * @return whether the user making this call is a goat \n */\npublic boolean isUserAGoat() {\n    return false;\n}\n</code></pre>\n\n<p>It looks like the method has no real use for us as developers. Someone has previously stated that it might be an <strong><a href=\"http://en.wikipedia.org/wiki/Easter_egg_(media)\">Easter egg</a></strong>.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>In API 21 the implementation was changed to check if there is an installed app with the package <code>com.coffeestainstudios.goatsimulator</code></p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n *\n * &lt;p&gt;As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method can\n * now automatically identify goats using advanced goat recognition technology.&lt;/p&gt;\n *\n * @return Returns true if the user making this call is a goat.\n */\npublic boolean isUserAGoat() {\n    return mContext.getPackageManager()\n            .isPackageAvailable(\"com.coffeestainstudios.goatsimulator\");\n}\n</code></pre>\n\n<p>Here is the updated <strong><a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java\">source link</a></strong></p>\n    </div>',1,1,1179,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(37,37,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Git 1.7.0 and later, you can checkout a new branch:</p>\n\n<pre><code>git checkout -b &lt;branch&gt;\n</code></pre>\n\n<p>Edit files, add and commit. Then push with the <code>-u</code> option:</p>\n\n<pre><code>git push -u origin &lt;branch&gt;\n</code></pre>\n\n<p>Git will set up the tracking information during the push.</p>\n    </div>',1,1,4190,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(38,38,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is no simple regular expression for this problem: see \n<a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\">this fully RFC‑822–compliant regex</a>, which is anything but simple. (It was written before the days of grammatical patterns.)  The grammar specified in <a href=\"http://www.ietf.org/rfc/rfc5322.txt\">RFC 5322</a> is too complicated for primitive regular expressions.</p>\n\n<p>The more sophisticated grammatical patterns in Perl, PCRE, and PHP can all <a href=\"http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">manage to correctly parse RFC 5322 without a hitch</a>. Python and C# should also be able to manage it, but they use a different syntax from those first three. However, if you are forced to use one of the many less powerful pattern-matching languages, then it’s best to use a real parser. </p>\n\n<p>It\'s also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered in the same web page as was the address. </p>\n\n<p>Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down <code>president@whitehouse.gov</code>, and that will even parse as legal, but it isn\'t likely to be the person at the other end.</p>\n\n<p>For PHP, you should <em>not</em> use the pattern given in <a href=\"http://www.linuxjournal.com/article/9585\">Validate an E-Mail Address with PHP, the Right Way</a> from which I quote:</p>\n\n<blockquote>\n  <p>There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.</p>\n</blockquote>\n\n<p>That is no better than all the other non-RFC patterns. It isn’t even smart enough to handle even <a href=\"http://www.ietf.org/rfc/rfc0822.txt\">RFC 822</a>, let alone RFC 5322. <a href=\"http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982\">This one</a>, however, is.</p>\n\n<p>If you want to get fancy and pedantic, <a href=\"http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html\">implement a complete state engine</a>. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can\'t handle it is just rude and impolite from the user\'s perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like</p>\n\n<blockquote>\n  <p>The specified e-mail address \'myemail@address,com\' is invalid. Did you mean \'myemail@address.com\'?</p>\n</blockquote>\n\n<p>See also <a href=\"http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx\">Validating Email Addresses</a>, including the comments. Or <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\">Comparing E-mail Address Validating Regular Expressions</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/SrUwP.png\"><img src=\"https://i.stack.imgur.com/SrUwP.png\" alt=\"Regular expression visualization\"></a></p>\n\n<p><a href=\"https://www.debuggex.com/r/aH_x42NflV8G-GS7\">Debuggex Demo</a></p>\n    </div>',1,1,1718,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(39,39,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Flash still has the ASO file, which is the compiled byte code for your classes. On Windows, you can see the ASO files here:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Documents and Settings\\username\\Local Settings\\Application Data\\Adobe\\Flash CS4\\en\\Configuration\\Classes\\aso\n</code></pre>\n\n<p>On a Mac, the directory structure is similar in <code>/Users/username/Library/Application Support/</code> </p>\n\n<hr>\n\n<p>You can remove those files by hand, or in Flash you can select <code>Control-&gt;Delete ASO files</code> to remove them.</p>\n    </div>',1,1,663,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(40,40,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Moving to a new branch</h2>\n\n<p>Unless there are other circumstances involved, this can be easily done by branching and rolling back.</p>\n\n<pre><code>git branch newbranch\ngit reset --hard HEAD~3 # Go back 3 commits. You *will* lose uncommitted work.*1\ngit checkout newbranch\n</code></pre>\n\n<p>But do make sure how many commits to go back. Alternatively, you can instead of <code>HEAD~3</code>, simply provide the hash of the commit (or the reference like <em>origin/master</em>) you want to \"revert back to\" on the <em>master</em> (/current) branch, e.g:</p>\n\n<pre><code>git reset --hard a1b2c3d4\n</code></pre>\n\n<p>*1 You will <strong>only</strong> be \"losing\" commits from the master branch, but don\'t worry, you\'ll have those commits in newbranch!</p>\n\n<h2>Moving to an existing branch</h2>\n\n<p><strong>WARNING</strong> The method above works because you are creating a <strong>new branch</strong> with the first command: <code>git branch newbranch</code>. If you want to use an <strong>existing branch</strong> you need to merge your changes into the <strong>existing branch</strong> before executing <code>git reset --hard HEAD~3</code>. If you don\'t merge your changes first, they will be lost. So, if you are working with an existing branch it will look like this:</p>\n\n<pre><code>git checkout existingbranch\ngit merge master\ngit checkout master\ngit reset --hard HEAD~3 # Go back 3 commits. You *will* lose uncommitted work.\ngit checkout existingbranch\n</code></pre>\n    </div>',1,1,3278,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(41,41,'<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><em><code>-&gt;</code> For a more general explanation of async behavior with different examples, please see</em> <a href=\"http://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a>  </p>\n  \n  <p><em><code>-&gt;</code> If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n\n<h1>Explanation of the problem</h1>\n\n<p>The <strong>A</strong> in Ajax stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer: </p>\n\n<h2>Synchronous</h2>\n\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer you needed.</p>\n\n<p>The same is happening when you make a function call containing \"normal\" code:</p>\n\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n\n// Do something with item\ndoSomethingElse();\n</code></pre>\n\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n\n<h2>Asynchronous</h2>\n\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n\n<p>That\'s exactly what\'s happening when you do an Ajax request. </p>\n\n<pre><code>findItem(function(item) {\n    // Do something with item\n});\ndoSomethingElse();\n</code></pre>\n\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n\n<hr>\n\n<h1>Solution(s)</h1>\n\n<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it\'s generally discouraged to use them, especially in a browser context.</p>\n\n<p>Why is it bad do you ask?</p>\n\n<p>JavaScript runs in the UI thread of the browser and any long running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not. </p>\n\n<p>All of this is really bad user experience. The user won\'t be able to tell whether everything is working fine or not. Furthermore the effect will be worse for users with a slow connection.</p>\n\n<h2>Restructure code</h2>\n\n<h3>Let functions accept callbacks</h3>\n\n<p>The better approach is to organize your code properly around callbacks. In the example in the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n\n<pre><code>var result = foo();\n// Code that depends on \'result\'\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>foo(function(result) {\n    // Code that depends on \'result\'\n});\n</code></pre>\n\n<p>Here we pass a function as argument to <code>foo</code>. You can pass any function reference, for example:</p>\n\n<pre><code>function myCallback(result) {\n    // Code that depends on \'result\'\n}\n\nfoo(myCallback);\n</code></pre>\n\n<p><code>foo</code> itself is defined as follows:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we simply pass it on to <code>success</code>. I.e. once the Ajax request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n\n<p>You can also process the response before passing it to the callback:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // For example, filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n\n<p>It\'s easier to write code using callbacks than it seems. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the Ajax response is nothing else but an event.<br>\nDifficulties could arise when you have to work with third party code, but most problems can be solved by just thinking through the application flow.</p>\n\n<h3>Use promises</h3>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise API</a> is a new feature of ECMAScript 6, but it has good <a href=\"http://caniuse.com/#feat=promises\" title=\"caniuse\">browser support</a> already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. <a href=\"https://github.com/petkaantonov/bluebird\">bluebird</a>).</p>\n\n<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is cancelled (<em>rejected</em>), it notifies all of its \"listeners\" who want to access this value.</p>\n\n<p>The advantage over plain callbacks is that they allow you do decouple your code and they are easier to compose.</p>\n\n<p>Here is a simple example of using a promise:</p>\n\n<pre><code>function delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay().then(function(v) { // `delay` returns a promise\n  console.log(v); // Log the value once it is resolved\n}).catch(function(v) {\n  // Or do something else if it is rejected \n  // (it would not happen in this example, since `reject` is not called).\n});\n</code></pre>\n\n<p>Applied to our Ajax call we could use promises like this:</p>\n\n<pre><code>function ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open(\'GET\', url);\n    xhr.send();\n  });\n}\n\najax(\"/echo/json\").then(function(result) {\n  // Code depending on result\n}).catch(function() {\n  // An error occurred\n});\n</code></pre>\n\n<p>Describing all the advantages that promises offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n\n<p>More information about promises: <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">HTML5 rocks - JavaScript Promises</a></p>\n\n<h3>jQuery: Use deferred objects</h3>\n\n<p><a href=\"http://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are jQuery\'s custom implementation of promises (before the Promise API was standardized). They behave almost like promises, but expose a slightly different API.</p>\n\n<p>Every Ajax method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:</p>\n\n<pre><code>function ajax() {\n    return $.ajax(...);\n}\n\najax().done(function(result) {\n    // Code depending on result\n}).fail(function() {\n    // An error occurred\n});\n</code></pre>\n\n<p><strong>Promise gotchas</strong></p>\n\n<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example, suppose you had the following:</p>\n\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: \'/password\',\n        data: {\n            username: $(\'#username\').val(),\n            password: $(\'#password\').val()\n        },\n        type: \'POST\',\n        dataType: \'json\'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they\'re logged in\n}\n</code></pre>\n\n<p>This code misunderstands the above asynchrony issues. Specifically, <code>$.ajax()</code> doesn\'t freeze the code while it checks the \'/password\' page on your server - it sends a request to the server and while it waits, immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n\n<p>But the fix is easy:</p>\n\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they\'re logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n\n<p>So now we\'re still calling the \'/password\' page on the server, but our code now properly handles the wait time for the server to respond. The <code>$.ajax()</code> call still returns immediately with a jQuery Ajax Deferred object, but we use it to attach event listeners to <code>.done()</code> and <code>.fail()</code>. In the <code>.done()</code> call, where the server responded with a normal response (HTTP 200), we check the object returned by the server. In this example the server is just returning true if the login was successful, false if not, so <code>if (r)</code> is checking for true/false.</p>\n\n<p>In the <code>.fail()</code> handler we\'re dealing with something going wrong - for example if the user lost their internet connection while they were typing in their username and password, or if your server went down.</p>\n\n<hr>\n\n<h3>Not recommended: Synchronous \"Ajax\" calls</h3>\n\n<p>As I mentioned, some asynchronous operations have synchronous counterparts. I don\'t advocate their use, but for completeness\' sake, here is how you would perform a synchronous call:</p>\n\n<h3>Without jQuery</h3>\n\n<p>If you directly use a <a href=\"http://www.w3.org/TR/XMLHttpRequest/\"><code>XMLHTTPRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-open%28%29-method\"><code>.open</code></a>.</p>\n\n<h3>jQuery</h3>\n\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\">jqXHR object</a>:</p>\n\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n\n<p>If you use any other jQuery Ajax method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"http://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n    </div>',1,1,3141,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(42,42,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Short &amp; Snazzy:</strong></p>\n\n<pre><code>+ new Date()\n</code></pre>\n\n<p>A unary operator like <code>plus</code> triggers the <code>valueOf</code> method in the <code>Date</code> object and it returns the time-stamp (without any alteration).</p>\n\n<p><strong>Details:</strong></p>\n\n<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"http://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It\'s slightly better because it\'s shorter &amp; doesn\'t create a new <code>Date</code> object. However, if you don\'t want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>milliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds like this:</p>\n\n<pre><code>Math.round(new Date().getTime()/1000)\n</code></pre>\n\n<p>And you can also use the <code>valueOf</code> method which we showed above:</p>\n\n<pre><code>new Date().valueOf()\n</code></pre>\n    </div>',1,1,3343,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(43,43,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>The notion that regex doesn\'t support inverse matching is not entirely true. You can mimic this behavior by using negative look-arounds:</p>\n\n<pre><code>^((?!hede).)*$\n</code></pre>\n\n<p>The regex above will match any string, or line without a line break, <strong>not</strong> containing the (sub) string \'hede\'.\nAs mentioned, this is not something regex is \"good\" at (or should do), but still, it <em>is</em> possible. </p>\n\n<p>And if you need to match line break chars as well, use the <a href=\"http://perldoc.perl.org/perlre.html#Modifiers\">DOT-ALL modifier</a> (the trailing <code>s</code> in the following pattern):</p>\n\n<pre><code>/^((?!hede).)*$/s\n</code></pre>\n\n<p>or use it inline:</p>\n\n<pre><code>/(?s)^((?!hede).)*$/\n</code></pre>\n\n<p><em>(where the <code>/.../</code> are the regex delimiters, ie, not part of the pattern)</em></p>\n\n<p>If the DOT-ALL modifier is not available, you can mimic the same behavior with the character class <code>[\\s\\S]</code>:</p>\n\n<pre><code>/^((?!hede)[\\s\\S])*$/\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>A string is just a list of <code>n</code> characters. Before, and after each character, there\'s an empty string. So a list of <code>n</code> characters will have <code>n+1</code> empty strings. Consider the string <code>\"ABhedeCD\"</code>:</p>\n\n<pre><code>    ┌──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┬───┬──┐\nS = │e1│ A │e2│ B │e3│ h │e4│ e │e5│ d │e6│ e │e7│ C │e8│ D │e9│\n    └──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┴───┴──┘\n\nindex    0      1      2      3      4      5      6      7\n</code></pre>\n\n<p>where the <code>e</code>\'s are the empty strings. The regex <code>(?!hede).</code> looks ahead to see if there\'s no substring <code>\"hede\"</code> to be seen, and if that is the case (so something else is seen), then the <code>.</code> (dot) will match any character except a line break. Look-arounds are also called <em>zero-width-assertions</em> because they don\'t <em>consume</em> any characters. They only assert/validate something. </p>\n\n<p>So, in my example, every empty string is first validated to see if there\'s no <code>\"hede\"</code> up ahead, before a character is consumed by the <code>.</code> (dot). The regex <code>(?!hede).</code> will do that only once, so it is wrapped in a group, and repeated zero or more times: <code>((?!hede).)*</code>. Finally, the start- and end-of-input are anchored to make sure the entire input is consumed: <code>^((?!hede).)*$</code></p>\n\n<p>As you can see, the input <code>\"ABhedeCD\"</code> will fail because on <code>e3</code>, the regex <code>(?!hede)</code> fails (there <em>is</em> <code>\"hede\"</code> up ahead!).</p>\n    </div>',1,1,3830,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(44,44,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another way to make a directory stay empty (in the repository) is to create a <code>.gitignore</code> file inside that directory that contains four lines:</p>\n\n<pre><code># Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n</code></pre>\n\n<p>Then you don\'t have to get the order right the way that you have to do in m104\'s solution.</p>\n    </div>',1,1,2629,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(45,45,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can apply this CSS to the inner <code>&lt;div&gt;</code>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n    width: 50%;\n    margin: 0 auto; \n}\n</code></pre>\n\n<p>Of course, you don\'t have to set the <code>width</code> to <code>50%</code>. Any width less than the containing <code>&lt;div&gt;</code> will work. The <code>margin: 0 auto</code> is what does the actual centering.</p>\n\n<p>If you are targeting IE8+, it might be better to have this instead:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n    display: table;\n    margin: 0 auto;\n}\n</code></pre>\n\n<p>It will make the inner element center horizontally and it works without setting a specific <code>width</code>.</p>\n\n<p>Working example here:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#inner {\r\n    display: table;\r\n    margin: 0 auto; \r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"outer\" style=\"width:100%\"&gt;  \r\n  &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>',1,1,3178,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(46,46,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Use prepared statements and parameterized queries.</strong> These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.</p>\n\n<p>You basically have two options to achieve this:</p>\n\n<ol>\n<li><p>Using <a href=\"http://php.net/manual/en/book.pdo.php\">PDO</a> (for any supported database driver):</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$stmt = $pdo-&gt;prepare(\'SELECT * FROM employees WHERE name = :name\');\n\n$stmt-&gt;execute(array(\'name\' =&gt; $name));\n\nforeach ($stmt as $row) {\n    // do something with $row\n}\n</code></pre></li>\n<li><p>Using <a href=\"http://php.net/manual/en/book.mysqli.php\">MySQLi</a> (for MySQL):</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$stmt = $dbConnection-&gt;prepare(\'SELECT * FROM employees WHERE name = ?\');\n$stmt-&gt;bind_param(\'s\', $name);\n\n$stmt-&gt;execute();\n\n$result = $stmt-&gt;get_result();\nwhile ($row = $result-&gt;fetch_assoc()) {\n    // do something with $row\n}\n</code></pre></li>\n</ol>\n\n<p>If you\'re connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (e.g. <code>pg_prepare()</code> and <code>pg_execute()</code> for PostgreSQL). PDO is the universal option.</p>\n\n<h2>Correctly setting up the connection</h2>\n\n<p>Note that when using <code>PDO</code> to access a MySQL database <em>real</em> prepared statements are <strong>not used by default</strong>. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using PDO is:</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$dbConnection = new PDO(\'mysql:dbname=dbtest;host=127.0.0.1;charset=utf8\', \'user\', \'pass\');\n\n$dbConnection-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n$dbConnection-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n</code></pre>\n\n<p>In the above example the error mode isn\'t strictly necessary, <strong>but it is advised to add it</strong>. This way the script will not stop with a <code>Fatal Error</code> when something goes wrong. And it gives the developer the chance to <code>catch</code> any error(s) which are <code>throw</code>n as <code>PDOException</code>s.</p>\n\n<p>What is <strong>mandatory</strong> however is the first <code>setAttribute()</code> line, which tells PDO to disable emulated prepared statements and use <em>real</em> prepared statements. This makes sure the statement and the values aren\'t parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).</p>\n\n<p>Although you can set the <code>charset</code> in the options of the constructor, it\'s important to note that \'older\' versions of PHP (&lt; 5.3.6) <a href=\"http://php.net/manual/en/ref.pdo-mysql.connection.php\">silently ignored the charset parameter</a> in the DSN.</p>\n\n<h2>Explanation</h2>\n\n<p>What happens is that the SQL statement you pass to <code>prepare</code> is parsed and compiled by the database server. By specifying parameters (either a <code>?</code> or a named parameter like <code>:name</code> in the example above) you tell the database engine where you want to filter on. Then when you call <code>execute</code>, the prepared statement is combined with the parameter values you specify. </p>\n\n<p>The important thing here is that the parameter values are combined with the compiled statement, not an SQL string. SQL injection works by tricking the script into including malicious strings when it creates SQL to send to the database. So by sending the actual SQL separately from the parameters, you limit the risk of ending up with something you didn\'t intend. Any parameters you send when using a prepared statement will just be treated as strings (although the database engine may do some optimization so parameters may end up as numbers too, of course). In the example above, if the <code>$name</code> variable contains <code>\'Sarah\'; DELETE FROM employees</code> the result would simply be a search for the string <code>\"\'Sarah\'; DELETE FROM employees\"</code>, and you will not end up with <a href=\"http://xkcd.com/327/\">an empty table</a>.</p>\n\n<p>Another benefit with using prepared statements is that if you execute the same statement many times in the same session it will only be parsed and compiled once, giving you some speed gains.</p>\n\n<p>Oh, and since you asked about how to do it for an insert, here\'s an example (using PDO):</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$preparedStatement = $db-&gt;prepare(\'INSERT INTO table (column) VALUES (:column)\');\n\n$preparedStatement-&gt;execute(array(\'column\' =&gt; $unsafeValue));\n</code></pre>\n\n<h2>Can Prepared Statements Be Used For Dynamic Queries?</h2>\n\n<p>While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.</p>\n\n<p>For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.</p>\n\n<pre><code>// Value whitelist\n// $dir can only be \'DESC\' otherwise it will be \'ASC\'\nif (empty($dir) || $dir !== \'DESC\') {\n   $dir = \'ASC\';\n}\n</code></pre>\n    </div>',1,1,6182,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(47,47,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>You don\'t need jQuery for that purpose. You can use just some pure JavaScript:</p>\n\n<pre><code>function getParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&amp;\");\n    var regex = new RegExp(\"[?&amp;]\" + name + \"(=([^&amp;#]*)|&amp;|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \'\';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>// query string: ?foo=lorem&amp;bar=&amp;baz\nvar foo = getParameterByName(\'foo\'); // \"lorem\"\nvar bar = getParameterByName(\'bar\'); // \"\" (present with empty value)\nvar baz = getParameterByName(\'baz\'); // \"\" (present with no value)\nvar qux = getParameterByName(\'qux\'); // null (absent)\n</code></pre>\n\n<p><br>\nNote: If a parameter is present several times (<code>?foo=lorem&amp;foo=ipsum</code>), you will get the first value (<code>lorem</code>). There is no standard about this and usages vary, see for example this question: <a href=\"http://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">Authoritative position of duplicate HTTP GET query keys</a>.</p>\n    </div>',1,1,5635,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(48,48,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the AngularJS mailing list I got <a href=\"https://groups.google.com/forum/#!msg/angular/56sdORWEoqg/HuZsOsMvKv4J\">an amazing thread</a> that explains service vs factory vs provider and their injection usage. Compiling the answers:</p>\n\n<h1>Services</h1>\n\n<p>Syntax: <code>module.service( \'serviceName\', function );</code> <br>\nResult: When declaring serviceName as an injectable argument <strong>you will be provided with an instance of the function. In other words</strong> <code>new FunctionYouPassedToService()</code>.</p>\n\n<h1>Factories</h1>\n\n<p>Syntax: <code>module.factory( \'factoryName\', function );</code> <br>\nResult: When declaring factoryName as an injectable argument you will be provided with <strong>the value that is returned by invoking the function reference passed to module.factory</strong>.</p>\n\n<h1>Providers</h1>\n\n<p>Syntax: <code>module.provider( \'providerName\', function );</code> <br>\nResult: When declaring providerName as an injectable argument <strong>you will be provided with</strong> <code>(new ProviderFunction()).$get()</code>. The constructor function is instantiated before the $get method is called - <code>ProviderFunction</code> is  the function reference passed to module.provider.</p>\n\n<p>Providers have the advantage that they can be configured during the module configuration phase.</p>\n\n<p>See <a href=\"http://jsbin.com/ohamub/1/edit\">here</a> for the provided code.</p>\n\n<p>Here\'s a great further explanation by Misko:</p>\n\n<pre><code>provide.value(\'a\', 123);\n\nfunction Controller(a) {\n  expect(a).toEqual(123);\n}\n</code></pre>\n\n<p>In this case the injector simply returns the value as is. But what if you want to compute the value? Then use a factory</p>\n\n<pre><code>provide.factory(\'b\', function(a) {\n  return a*2;\n});\n\nfunction Controller(b) {\n  expect(b).toEqual(246);\n}\n</code></pre>\n\n<p>So <code>factory</code> is a function which is responsible for creating the value. Notice that the factory function can ask for other dependencies.</p>\n\n<p>But what if you want to be more OO and have a class called Greeter?</p>\n\n<pre><code>function Greeter(a) {\n  this.greet = function() {\n    return \'Hello \' + a;\n  }\n}\n</code></pre>\n\n<p>Then to instantiate you would have to write</p>\n\n<pre><code>provide.factory(\'greeter\', function(a) {\n  return new Greeter(a);\n});\n</code></pre>\n\n<p>Then we could ask for \'greeter\' in controller like this</p>\n\n<pre><code>function Controller(greeter) {\n  expect(greeter instanceof Greeter).toBe(true);\n  expect(greeter.greet()).toEqual(\'Hello 123\');\n}\n</code></pre>\n\n<p>But that is way too wordy. A shorter way to write this would be <code>provider.service(\'greeter\', Greeter);</code></p>\n\n<p>But what if we wanted to configure the <code>Greeter</code> class before the injection? Then we could write</p>\n\n<pre><code>provide.provider(\'greeter2\', function() {\n  var salutation = \'Hello\';\n  this.setSalutation = function(s) {\n    salutation = s;\n  }\n\n  function Greeter(a) {\n    this.greet = function() {\n      return salutation + \' \' + a;\n    }\n  }\n\n  this.$get = function(a) {\n    return new Greeter(a);\n  };\n});\n</code></pre>\n\n<p>Then we can do this: </p>\n\n<pre><code>angular.module(\'abc\', []).config(function(greeter2Provider) {\n  greeter2Provider.setSalutation(\'Halo\');\n});\n\nfunction Controller(greeter2) {\n  expect(greeter2.greet()).toEqual(\'Halo 123\');\n}\n</code></pre>\n\n<p>As a side note, <code>service</code>, <code>factory</code>, and <code>value</code> are all derived from provider.</p>\n\n<pre><code>provider.service = function(name, Class) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.instantiate(Class);\n    };\n  });\n}\n\nprovider.factory = function(name, factory) {\n  provider.provide(name, function() {\n    this.$get = function($injector) {\n      return $injector.invoke(factory);\n    };\n  });\n}\n\nprovider.value = function(name, value) {\n  provider.factory(name, function() {\n    return value;\n  });\n};\n</code></pre>\n    </div>',1,1,2548,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(49,49,'<div class=\"post-text\" itemprop=\"text\">\r\n\n\n<p><strong>TL;DR</strong></p>\n\n<ul>\n<li>Don\'t use <code>for-in</code> unless you use it with safeguards or are at least aware of why it might bite you.</li>\n<li><p>Your best bets are usually</p>\n\n<ul>\n<li>a <code>for-of</code> loop (ES2015+ only),</li>\n<li><code>Array#forEach</code> (<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.foreach\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>MDN</code></a>) (or its relatives <code>some</code> and such) (ES5+ only),</li>\n<li>a simple old-fashioned <code>for</code> loop,</li>\n<li>or <code>for-in</code> with safeguards.</li>\n</ul></li>\n</ul>\n\n<p>But there\'s <strong>lots</strong> more to explore, read on...</p>\n\n<hr>\n\n<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I\'ve split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>\n\n<p>I\'ll quickly note that you can use the ES2015 options <em>now</em>, even on ES5 engines, by <em>transpiling</em> ES2015 to ES5. Search for \"ES2015 transpiling\" / \"ES6 transpiling\" for more...</p>\n\n<p>Okay, let\'s look at our options:</p>\n\n<h2>For Actual Arrays</h2>\n\n<p>You have three options in <a href=\"http://ecma-international.org/ecma-262/5.1/\">ECMAScript 5</a> (\"ES5\"), the version most broadly supported at the moment, and will soon have two more in <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\">ECMAScript 2015</a> (\"ES2015\", \"ES6\"), the latest version of JavaScript that vendors are working on supporting:</p>\n\n<ol>\n<li>Use <code>forEach</code> and related (ES5+)</li>\n<li>Use a simple <code>for</code> loop</li>\n<li>Use <code>for-in</code> <em>correctly</em></li>\n<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>\n<li>Use an iterator explicitly (ES2015+)</li>\n</ol>\n\n<p>Details:</p>\n\n<h3>1. Use <code>forEach</code> and related</h3>\n\n<p>If you\'re using an environment that supports the <code>Array</code> features of ES5 (directly or using a shim), you can use the new <code>forEach</code> (<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.foreach\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>MDN</code></a>):</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\na.forEach(function(entry) {\n    console.log(entry);\n});\n</code></pre>\n\n<p><code>forEach</code> accepts an iterator function and, optionally, a value to use as <code>this</code> when calling that iterator function (not used above). The iterator function is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the iterator function is called with three: The value of each entry, the index of that entry, and a reference to the array you\'re iterating over (in case your function doesn\'t already have it handy).</p>\n\n<p>Unless you\'re supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September 2016), you can happily use <code>forEach</code> in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling <code>forEach</code> is easily done (search for \"es5 shim\" for several options).</p>\n\n<p><code>forEach</code> has the benefit that you don\'t have to declare indexing and value variables in the containing scope, as they\'re supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>\n\n<p>If you\'re worried about the runtime cost of making a function call for each array entry, don\'t be; <a href=\"http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html\">details</a>.</p>\n\n<p>Additionally, <code>forEach</code> is the \"loop through them all\" function, but ES5 defined several other useful \"work your way through the array and do things\" functions, including:</p>\n\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.every\"><code>every</code></a> (stops looping the first time the iterator returns <code>false</code> or something falsey)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.some\"><code>some</code></a> (stops looping the first time the iterator returns <code>true</code> or something truthy)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.filter\"><code>filter</code></a> (creates a new array including elements where the filter function returns <code>true</code> and omitting the ones where it returns <code>false</code>)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.map\"><code>map</code></a> (creates a new array from the values returned by the iterator function)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.reduce\"><code>reduce</code></a> (builds up a value by repeated calling the iterator, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.reduceright\"><code>reduceRight</code></a> (like <code>reduce</code>, but works in descending rather than ascending order)</li>\n</ul>\n\n<h3>2. Use a simple <code>for</code> loop</h3>\n\n<p>Sometimes the old ways are the best:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0; index &lt; a.length; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>If the length of the array won\'t change during the loop, and it\'s in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <strong><em>tiny</em></strong> bit faster:</p>\n\n<pre><code>var index, len;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0, len = a.length; index &lt; len; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>And/or counting backward:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = a.length - 1; index &gt;= 0; --index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>But with modern JavaScript engines, it\'s rare you need to eke out that last bit of juice.</p>\n\n<p>In ES2015 and higher, you can make your index and value variables local to the <code>for</code> loop:</p>\n\n<pre><code>let a = [\"a\", \"b\", \"c\"];\nfor (let index = 0; index &lt; a.length; ++index) {\n    let value = a[index];\n}\n//console.log(index); // Would cause \"ReferenceError: index is not defined\"\n//console.log(value); // Would cause \"ReferenceError: value is not defined\"\n</code></pre>\n\n<p>And when you do that, not just <code>value</code> but also <code>index</code> is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> (and <code>value</code>) created for that specific iteration:</p>\n\n<pre><code>let divs = Array.from(document.querySelector(\"div\"));\nfor (let index = 0; index &lt; divs.length; ++index) {\n    div[index].addEventListener(e =&gt; {\n        alert(\"Index is: \" + index);\n    });\n}\n</code></pre>\n\n<p>If you had five divs, you\'d get \"Index is: 0\" if you clicked the first and \"Index is: 4\" if you clicked the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code>.</p>\n\n<h3>3. Use <code>for-in</code> <em>correctly</em></h3>\n\n<p>You\'ll get people telling you to use <code>for-in</code>, but <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\">that\'s not what <code>for-in</code> is for</a>. <code>for-in</code> loops through the <em>enumerable properties of an object</em>, not the indexes of an array. <strong>The order is not guaranteed</strong>, not even in ES2015 (ES6). ES2015 does define an order to object properties (via <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\"><code>[[OwnPropertyKeys]]</code></a>, <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\"><code>[[Enumerate]]</code></a>, and things that use them like <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.getownpropertynames\"><code>Object.getOwnPropertyKeys</code></a>), but it <strong>does not</strong> define that <code>for-in</code> will follow that order. (Details in <a href=\"http://stackoverflow.com/a/30919039/157247\">this other answer</a>.)</p>\n\n<p>Still, it <em>can</em> be useful, particularly for <a href=\"http://en.wikipedia.org/wiki/Sparse_array\"><em>sparse</em> arrays</a>, if you use appropriate safeguards:</p>\n\n<pre><code>// `a` is a sparse array\nvar key;\nvar a = [];\na[0] = \"a\";\na[10] = \"b\";\na[10000] = \"c\";\nfor (key in a) {\n    if (a.hasOwnProperty(key)  &amp;&amp;        // These are explained\n        /^0$|^[1-9]\\d*$/.test(key) &amp;&amp;    // and then hidden\n        key &lt;= 4294967294                // away below\n        ) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Note the two checks:</p>\n\n<ol>\n<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p></li>\n<li><p>That the key is a base-10 numeric string in its normal string form and its value is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It\'s part of the definition of an array index <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4\">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it\'s 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array\'s <code>length</code> can have. (E.g., an array\'s length fits in a 32-bit unsigned integer.) <em>(Props to RobG for pointing out in a comment <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\">on my blog post</a> that my previous test wasn\'t quite right.)</em></p></li>\n</ol>\n\n<p>That\'s a tiny bit of added overhead per loop iteration on most arrays, but if you have a <em>sparse</em> array, it can be a more efficient way to loop because it only loops for entries that actually exist. E.g., for the array above, we loop a total of three times (for keys <code>\"0\"</code>, <code>\"10\"</code>, and <code>\"10000\"</code> — remember, they\'re strings), not 10,001 times.</p>\n\n<p>Now, you won\'t want to write that every time, so you might put this in your toolkit:</p>\n\n<pre><code>function arrayHasOwnIndex(array, prop) {\n    return array.hasOwnProperty(prop) &amp;&amp; /^0$|^[1-9]\\d*$/.test(prop) &amp;&amp; prop &lt;= 4294967294; // 2^32 - 2\n}\n</code></pre>\n\n<p>And then we\'d use it like this:</p>\n\n<pre><code>for (key in a) {\n    if (arrayHasOwnIndex(a, key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Or if you\'re interested in just a \"good enough for most cases\" test, you could use this, but while it\'s close, it\'s not quite correct:</p>\n\n<pre><code>for (key in a) {\n    // \"Good enough\" for most cases\n    if (String(parseInt(key, 10)) === key &amp;&amp; a.hasOwnProperty(key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<h3>4. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>\n\n<p>ES2015 adds <em>iterators</em> to JavaScript. The easiest way to use iterators is the new <code>for-of</code> statement. It looks like this:</p>\n\n<pre><code>var val;\nvar a = [\"a\", \"b\", \"c\"];\nfor (val of a) {\n    console.log(val);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre>\na\nb\nc\n</pre>\n\n<p>Under the covers, that gets an <em>iterator</em> from the array and loops through it, getting the values from it. This doesn\'t have the issue that using <code>for-in</code> has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their <em>entries</em> (not their properties). Unlike <code>for-in</code> in ES5, the order in which the entries are visited is the numeric order of their indexes.</p>\n\n<h3>5. Use an iterator explicitly (ES2015+)</h3>\n\n<p>Sometimes, you might want to use an iterator <em>explicitly</em>. You can do that, too, although it\'s a lot clunkier than <code>for-of</code>. It looks like this:</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\nvar it = a.values();\nvar entry;\nwhile (!(entry = it.next()).done) {\n    console.log(entry.value);\n}\n</code></pre>\n\n<p>The iterator is a function (specifically, a <em>generator</em>) that returns a new object each time you call <code>next</code>. The object returned by the iterator has a property, <code>done</code>, telling us whether it\'s done, and a property <code>value</code> with the value for that iteration.</p>\n\n<p>The meaning of <code>value</code> varies depending on the iterator; arrays support (at least) three functions that return iterators:</p>\n\n<ul>\n<li><code>values()</code>: This is the one I used above. It returns an iterator where each <code>value</code> is the value for that iteration.</li>\n<li><code>keys()</code>: Returns an iterator where each <code>value</code> is the key for that iteration (so for our <code>a</code> above, that would be <code>\"0\"</code>, then <code>\"1\"</code>, then <code>\"2\"</code>).</li>\n<li><code>entries()</code>: Returns an iterator where each <code>value</code> is an array in the form <code>[key, value]</code> for that iteration.</li>\n</ul>\n\n<p>(As of this writing, Firefox 29 supports <code>entries</code> and <code>keys</code> but not <code>values</code>.)</p>\n\n<h2>For Array-Like Objects</h2>\n\n<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with numeric names: <code>NodeList</code> instances, the <code>arguments</code> object, etc. How do we loop through their contents?</p>\n\n<h3>Use any of the options above for arrays</h3>\n\n<p>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</p>\n\n<ol>\n<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>\n\n<p>The various functions on <code>Array.prototype</code> are \"intentionally generic\" and can usually be used on array-like objects via <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.call\"><code>Function#call</code></a> or <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.apply\"><code>Function#apply</code></a>. (See the <em>Caveat for host-provided objects</em> at the end of this answer, but it\'s a rare issue.)</p>\n\n<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>\'s <code>childNodes</code> property. You\'d do this:</p>\n\n<pre><code>Array.prototype.forEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre>\n\n<p>If you\'re going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>\n\n<pre><code>// (This is all presumably in some scoping function)\nvar forEach = Array.prototype.forEach;\n\n// Then later...\nforEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre></li>\n<li><p><strong>Use a simple <code>for</code> loop</strong></p>\n\n<p>Obviously, a simple <code>for</code> loop applies to array-like objects.</p></li>\n<li><p><strong>Use <code>for-in</code> <em>correctly</em></strong></p>\n\n<p><code>for-in</code> with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</p></li>\n<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>\n\n<p><code>for-of</code> will use the iterator provided by the object (if any); we\'ll have to see how this plays with the various array-like objects, particularly host-provided ones.</p></li>\n<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>\n\n<p>See #4, we\'ll have to see how iterators play out.</p></li>\n</ol>\n\n<h3>Create a true array</h3>\n\n<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>\n\n<ol>\n<li><p><strong>Use the <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.slice\"><code>slice</code></a> method of arrays</strong></p>\n\n<p>We can use the <code>slice</code> method of arrays, which like the other methods mentioned above is \"intentionally generic\" and so can be used with array-like objects, like this:</p>\n\n<pre><code>var trueArray = Array.prototype.slice.call(arrayLikeObject);\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>\n\n<pre><code>var divs = Array.prototype.slice.call(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>See the <em>Caveat for host-provided objects</em> below. In particular, note that this will fail in IE8 and earlier, which don\'t let you use host-provided objects as <code>this</code> like that.</p></li>\n<li><p><strong>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread notation (<code>...</code>)</a></strong></p>\n\n<p>It\'s also possible to use ES2015\'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread notation</a> (MDN currently calls it an operator; it isn\'t one), with JavaScript engines that support this feature:</p>\n\n<pre><code>var trueArray = [...iterableObject];\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>\n\n<pre><code>var divs = [...document.querySelectorAll(\"div\")];\n</code></pre></li>\n<li><p><strong>Use <code>Array.from</code></strong> <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.from\">(spec)</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">(MDN)</a></p>\n\n<p><code>Array.from</code> (ES2015, but shimmable) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>\n\n<pre><code>var divs = Array.from(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>Or if you wanted to get an array of the tag names of the elements with a given class, you\'d use the mapping function:</p>\n\n<pre><code>// Arrow function (ES2015):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), element =&gt; element.tagName);\n\n// Standard function (since `Array.from` can be shimmed):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), function(element) {\n    return element.tagName;\n});\n</code></pre></li>\n</ol>\n\n<h3>Caveat for host-provided objects</h3>\n\n<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. <strong>Most do behave properly</strong> (now), but it\'s important to test. The reason is that most of the <code>Array.prototype</code> methods you\'re likely to want to use rely on the host-provided object giving an honest answer to the abstract <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\"><code>[[HasProperty]]</code></a> operation. As of this writing, browsers do a very good job of this, but the ES5 spec did allow for the possibility a host-provided object may not be honest; it\'s in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\">§8.6.2</a> (several paragraphs below the big table near the beginning of that section), where it says:</p>\n\n<blockquote>\n  <p>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that <code>[[Get]]</code> and <code>[[Put]]</code> for a particular host object indeed fetch and store property values but <code>[[HasProperty]]</code> always generates <strong>false</strong>.</p>\n</blockquote>\n\n<p>(I couldn\'t find the equivalent verbiage in the ES2015 spec, but it\'s bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers (<code>NodeList</code> instances, for instance) <strong>do</strong> handle <code>[[HasProperty]]</code> correctly, but it\'s important to test.</p>\n    </div>',1,1,4899,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(50,50,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><a href=\"http://php.net/manual/en/language.operators.increment.php\">Incrementing / Decrementing Operators</a></strong></p>\n\n<p><code>++</code> increment operator</p>\n\n<p><code>--</code> decrement operator</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Example    Name              Effect\n---------------------------------------------------------------------\n++$a       Pre-increment     Increments $a by one, then returns $a.\n$a++       Post-increment    Returns $a, then increments $a by one.\n--$a       Pre-decrement     Decrements $a by one, then returns $a.\n$a--       Post-decrement    Returns $a, then decrements $a by one.\n</code></pre>\n\n<p>These can go before or after the variable.</p>\n\n<p>If put before the variable, the increment / decrement operation is done to the variable <strong>first</strong> then the result is returned. If put after the variable, the variable is <strong>first</strong> returned, then the increment / decrement operation is done.</p>\n\n<p>For example:</p>\n\n<pre><code>$apples = 10;\nfor ($i = 0; $i &lt; 10; ++$i) {\n    echo \'I have \' . $apples-- . \" apples. I just ate one.\\n\";\n}\n</code></pre>\n\n<p><strong><a href=\"http://codepad.org/5ZD3j0xb\">Live example</a></strong></p>\n\n<p>In the case above <code>++$i</code> is used, since it is faster. <code>$i++</code> would have the same results.</p>\n\n<p>Pre-increment is a little bit faster, because it really increments the variable and after that \'returns\' the result. Post-increment creates a special variable, copies there value of the first variable and only after first variable is used, replaces its value with second\'s.</p>\n\n<p>However, you must use <code>$apples--</code>, since first you want to display the current number of apples, and <strong>then</strong> you want to subtract one from it.</p>\n\n<p>You can also increment letters in PHP:</p>\n\n<pre><code>$i = \"a\";\nwhile ($i &lt; \"c\") {\n    echo $i++;\n}\n</code></pre>\n\n<p>Once <code>z</code> is reached <code>aa</code> is next, and so on.</p>\n\n<blockquote>\n  <p>Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Stack Overflow Posts:</strong></p>\n\n<ul>\n<li><strong><a href=\"http://stackoverflow.com/questions/1968371/understanding-incrementing\">Understanding Incrementing</a></strong>  </li>\n</ul>\n    </div>',1,1,659,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(51,51,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>As always with these questions, the JLS holds the answer. In this case <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2\">§15.26.2 Compound Assignment Operators</a>. An extract:</p>\n\n<blockquote>\n  <p>A compound assignment expression of the form <code>E1 op= E2</code> is equivalent to <code>E1 = (T)((E1) op (E2))</code>, where <code>T</code> is the type of <code>E1</code>, except that <code>E1</code> is evaluated only once.</p>\n</blockquote>\n\n<p>An example cited from <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2\">§15.26.2</a></p>\n\n<blockquote>\n  <p>[...] the following code is correct:</p>\n\n<pre><code>short x = 3;\nx += 4.6;\n</code></pre>\n  \n  <p>and results in x having the value 7 because it is equivalent to:</p>\n\n<pre><code>short x = 3;\nx = (short)(x + 4.6);\n</code></pre>\n</blockquote>\n\n<p>In other words, your assumption is correct.</p>\n    </div>',1,1,1932,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(52,52,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:</p>\n\n<blockquote>\n  <p>A URI can be further classified as a locator, a name, or both.  The\n     term \"Uniform Resource Locator\" (URL) refers to the subset of URIs\n     that, in addition to identifying a resource, provide a means of\n     locating the resource by describing its primary access mechanism\n     (e.g., its network \"location\").  The term \"Uniform Resource Name\"\n     (URN) has been used historically to refer to both URIs under the\n     \"urn\" scheme [RFC2141], which are required to remain globally unique\n     and persistent even when the resource ceases to exist or becomes\n     unavailable, and to any other URI with the properties of a name.</p>\n</blockquote>\n\n<p>So all URLs are URIs (actually not quite - see below), and all URNs are URIs - but URNs and URLs are different, so you can\'t say that all URIs are URLs.</p>\n\n<p>EDIT: I had previously thought that all URLs are valid URIs, but as per comments:</p>\n\n<blockquote>\n  <p><strong>Not</strong> \"all URLs are URIs\". It depends on the interpretation of the RFC. For example in Java the URI parser does not like <code>[</code> or <code>]</code> and that\'s because the spec says \"should not\" and not \"shall not\".</p>\n</blockquote>\n\n<p>So that muddies the waters further, unfortunately.</p>\n\n<p>If you haven\'t already read <a href=\"http://stackoverflow.com/a/1984225/22656\">Roger Pate\'s answer</a>, I\'d advise doing so as well.</p>\n    </div>',1,1,1180,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(53,53,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>jQuery 1.6+</h2>\n\n<p>Use the new <a href=\"https://api.jquery.com/prop\"><code>.prop()</code></a> method:</p>\n\n<pre><code>$(\'.myCheckbox\').prop(\'checked\', true);\n$(\'.myCheckbox\').prop(\'checked\', false);\n</code></pre>\n\n<h2>jQuery 1.5.x and below</h2>\n\n<p>The <code>.prop()</code> method is not available, so you need to use <a href=\"https://api.jquery.com/attr\"><code>.attr()</code></a>.</p>\n\n<pre><code>$(\'.myCheckbox\').attr(\'checked\', true);\n$(\'.myCheckbox\').attr(\'checked\', false);\n</code></pre>\n\n<p>Note that this is <a href=\"https://github.com/jquery/jquery/blob/1.5.2/test/unit/attributes.js#L157\">the approach used by jQuery\'s unit tests prior to version 1.6</a> and is preferable to using</p>\n\n<pre><code>$(\'.myCheckbox\').removeAttr(\'checked\');\n</code></pre>\n\n<p>since the latter will, if the box was initially checked, change the behaviour of a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.reset\"><code>.reset()</code></a> on any form that contains it - a subtle but probably unwelcome behaviour change.</p>\n\n<p>For more context, some incomplete discussion of the changes to the handling of the <code>checked</code> attribute/property in the transition from 1.5.x to 1.6 can be found in the <a href=\"https://blog.jquery.com/2011/05/03/jquery-16-released/\">version 1.6 release notes</a> and the <strong>Attributes vs. Properties</strong> section of the <a href=\"https://api.jquery.com/prop/\"><code>.prop()</code> documentation</a>.</p>\n\n<h2>Any version of jQuery</h2>\n\n<p>If you\'re working with just one element, you can always just modify the <a href=\"https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a>\'s <code>.checked</code> property:</p>\n\n<pre><code>$(\'.myCheckbox\')[0].checked = true;\n$(\'.myCheckbox\')[0].checked = false;\n</code></pre>\n\n<p>The benefit to using the <code>.prop()</code> and <code>.attr()</code> methods instead of this is that they will operate on all matched elements.</p>\n    </div>',1,1,4528,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(54,54,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Implementation</h2>\n\n<p>There are three different implementations: pseudo-elements, pseudo-classes, and nothing.</p>\n\n<ul>\n<li>WebKit, Blink (Safari, Google Chrome, Opera 15+) and Microsoft Edge are using a pseudo-element: <code>::-webkit-input-placeholder</code>. <sup>[<a href=\"https://bugs.webkit.org/show_bug.cgi?id=21227\">Ref</a>]</sup></li>\n<li>Mozilla Firefox 4 to 18 is using a pseudo-class: <code>:-moz-placeholder</code> (<em>one</em> colon). <sup>[<a href=\"https://developer.mozilla.org/en/CSS/:-moz-placeholder\">Ref</a>]</sup></li>\n<li>Mozilla Firefox 19+ is using a pseudo-element: <code>::-moz-placeholder</code>, but the old selector will still work for a while. <sup>[<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3A-moz-placeholder\">Ref</a>]</sup></li>\n<li>Internet Explorer 10 and 11 are using a pseudo-class: <code>:-ms-input-placeholder</code>. <sup>[<a href=\"http://msdn.microsoft.com/en-us/library/ie/hh772745(v=vs.85).aspx\">Ref</a>]</sup></li>\n</ul>\n\n<p>Internet Explorer 9 and lower does not support the <code>placeholder</code> attribute at all, while <a href=\"http://web.archive.org/web/20131206060908/http://my.opera.com/community/forums/topic.dml?id=841252&amp;t=1296553904&amp;page=1#comment8072202\">Opera 12 and lower do not support</a> any CSS selector for placeholders.</p>\n\n<p>The discussion about the best implementation is still going on. Note the pseudo-elements act like real elements in the <a href=\"http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/\">Shadow DOM</a>. A <code>padding</code> on an <code>input</code> will not get the same background color as the pseudo-element.</p>\n\n<h2>CSS selectors</h2>\n\n<p>User agents are required to ignore a rule with an unknown selector. See <a href=\"http://www.w3.org/TR/selectors/#Conformance\">Selectors Level 3</a>:</p>\n\n<blockquote>\n  <p>a <a href=\"http://www.w3.org/TR/selectors/#grouping\">group</a> of selectors containing an invalid selector is invalid.</p>\n</blockquote>\n\n<p>So we need separate rules for each browser. Otherwise the whole group would be ignored by all browsers.\n</p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>::-webkit-input-placeholder { /* WebKit, Blink, Edge */\r\n    color:    #909;\r\n}\r\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n:-ms-input-placeholder { /* Internet Explorer 10-11 */\r\n   color:    #909;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input placeholder=\"Stack Snippets are awesome!\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<h2>Usage notes</h2>\n\n<ul>\n<li>Be careful to avoid bad contrasts. Firefox\'s placeholder appears to be defaulting with a reduced opacity, so needs to use <code>opacity: 1</code> here.</li>\n<li>Note that placeholder text is just cut off if it doesn’t fit – size your input elements in <code>em</code> and test them with big minimum font size settings. Don’t forget translations: some languages <a href=\"http://www.w3.org/International/articles/article-text-size.en\">need more room</a> for the same word. </li>\n<li>Browsers with HTML support for <code>placeholder</code> but without CSS support for that (like Opera) should be tested too.</li>\n<li>Some browsers use additional default CSS for some <code>input</code> types (<code>email</code>, <code>search</code>). These might affect the rendering in unexpected ways. Use the <a href=\"https://developer.mozilla.org/en-US/docs/CSS/-moz-appearance\">properties</a> <code>-webkit-appearance</code> and <code>-moz-appearance</code> to change that. Example:</li>\n</ul>\n\n<pre class=\"lang-css prettyprint-override\"><code>    [type=\"search\"] {\n        -moz-appearance:    textfield;\n        -webkit-appearance: textfield;\n        appearance: textfield;\n    }\n</code></pre>\n    </div>',1,1,3829,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(55,55,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>First, clone a remote <a href=\"http://en.wikipedia.org/wiki/Git_%28software%29\">Git</a> repository and <a href=\"http://en.wikipedia.org/wiki/Cd_%28command%29\">cd</a> into it:</p>\n\n<pre><code>$ git clone git://example.com/myproject\n$ cd myproject\n</code></pre>\n\n<p>Next, look at the local branches in your repository:</p>\n\n<pre><code>$ git branch\n* master\n</code></pre>\n\n<p>But there are other branches hiding in your repository! You can see these using the <code>-a</code> flag:</p>\n\n<pre><code>$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n</code></pre>\n\n<p>If you just want to take a quick peek at an upstream branch, you can check it out directly:</p>\n\n<pre><code>$ git checkout origin/experimental\n</code></pre>\n\n<p>But if you want to work on that branch, you\'ll need to create a local tracking branch:</p>\n\n<pre><code>$ git checkout -b experimental origin/experimental\n</code></pre>\n\n<p>and you will see</p>\n\n<pre><code>Branch experimental set up to track remote branch experimental from origin.\nSwitched to a new branch \'experimental\'\n</code></pre>\n\n<p>That last line throw some people \"New branch\" - huh?\nWhat it really means is a new local branch that gets the branch from the index and creates it locally for you.  The <em>previous</em> line is actually more informative as it tells you that the branch is being set up to track the remote branch, which usually means the origin/branch_name branch </p>\n\n<p>Now, if you look at your local branches, this is what you\'ll see:</p>\n\n<pre><code>$ git branch\n* experimental\n  master\n</code></pre>\n\n<p>You can actually track more than one remote repository using <code>git remote</code>.</p>\n\n<pre><code>$ git remote add win32 git://example.com/users/joe/myproject-win32-port\n$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n  remotes/win32/master\n  remotes/win32/new-widgets\n</code></pre>\n\n<p>At this point, things are getting pretty crazy, so run <code>gitk</code> to see what\'s going on:</p>\n\n<pre><code>$ gitk --all &amp;\n</code></pre>\n    </div>',1,1,3463,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(56,56,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" title=\"[Python-Dev] Conditional Expression Resolution\">added</a> in version 2.5.<br>\nThe syntax is:</p>\n\n<pre><code>a if condition else b\n</code></pre>\n\n<p>First <code>condition</code> is evaluated, then either <code>a</code> or <code>b</code> is returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" title=\"Boolean data type\">Boolean</a> value of <code>condition</code><br>\nIf <code>condition</code> evaluates to <em>True</em> <code>a</code> is returned, else <code>b</code> is returned. </p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; \'true\' if True else \'false\'\n\'true\'\n&gt;&gt;&gt; \'true\' if False else \'false\'\n\'false\'\n</code></pre>\n\n<p>Keep in mind that it\'s frowned upon by some Pythonistas for several reasons:</p>\n\n<ul>\n<li>The order of the arguments is different from many other languages (such as C, Ruby, Java, etc.), which may lead to bugs when people unfamiliar with Python\'s \"surprising\" behaviour use it (they may reverse the order).</li>\n<li>Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n<li>Stylistic reasons.</li>\n</ul>\n\n<p>If you\'re having trouble remembering the order, then remember that if you read it out loud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation:</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" title=\"Conditional expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" title=\"Is there an equivalent of C’s ”?:” ternary operator?\">Is there an equivalent of C’s ”?:” ternary operator?</a></li>\n</ul>\n    </div>',1,1,3387,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(57,57,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don\'t know or don\'t trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.</p>\n\n<p>To put this another way, there are two instances where null checking comes up:</p>\n\n<ol>\n<li><p>Where null is a valid response in terms of the contract; and</p></li>\n<li><p>Where it isn\'t a valid response.</p></li>\n</ol>\n\n<p>(2) is easy.  Either use <code>assert</code> statements (assertions) or allow failure (for example,  <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/NullPointerException.html\">NullPointerException</a>).  Assertions are a highly-underused Java feature that was added in 1.4.  The syntax is:</p>\n\n<pre><code>assert &lt;condition&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>assert &lt;condition&gt; : &lt;object&gt;\n</code></pre>\n\n<p>where <code>&lt;condition&gt;</code> is a boolean expression and <code>&lt;object&gt;</code> is an object whose <code>toString()</code> method\'s output will be included in the error.</p>\n\n<p>An <code>assert</code> statement throws an <code>Error</code> (<code>AssertionError</code>) if the condition is not true.  By default, Java ignores assertions.  You can enable assertions by passing the option <code>-ea</code> to the JVM.  You can enable and disable assertions for individual classes and packages.  This means that you can validate code with the assertions while developing and testing, and disable them in a production environment, although my testing has shown next to no performance impact from assertions.</p>\n\n<p>Not using assertions in this case is OK because the code will just fail, which is what will happen if you use assertions.  The only difference is that with assertions it might happen sooner, in a more-meaningful way and possibly with extra information, which may help you to figure out why it happened if you weren\'t expecting it.</p>\n\n<p>(1) is a little harder.  If you have no control over the code you\'re calling then you\'re stuck.  If null is a valid response, you have to check for it.</p>\n\n<p>If it\'s code that you do control, however (and this is often the case), then it\'s a different story.  Avoid using nulls as a response.  With methods that return collections, it\'s easy: return empty collections (or arrays) instead of nulls pretty much all the time.</p>\n\n<p>With non-collections it might be harder.  Consider this as an example: if you have these interfaces:</p>\n\n<pre><code>public interface Action {\n  void doSomething();\n}\n\npublic interface Parser {\n  Action findAction(String userInput);\n}\n</code></pre>\n\n<p>where Parser takes raw user input and finds something to do, perhaps if you\'re implementing a command line interface for something.  Now you might make the contract that it returns null if there\'s no appropriate action.  That leads the null checking you\'re talking about.</p>\n\n<p>An alternative solution is to never return null and instead use the <a href=\"https://en.wikipedia.org/wiki/Null_Object_pattern\">Null Object pattern</a>:</p>\n\n<pre><code>public class MyParser implements Parser {\n  private static Action DO_NOTHING = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can\'t find any actions */ ) {\n      return DO_NOTHING;\n    }\n  }\n}\n</code></pre>\n\n<p>Compare:</p>\n\n<pre><code>Parser parser = ParserFactory.getParser();\nif (parser == null) {\n  // now what?\n  // this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n  // do nothing\n} else {\n  action.doSomething();\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>ParserFactory.getParser().findAction(someInput).doSomething();\n</code></pre>\n\n<p>which is a much better design because it leads to more concise code.</p>\n\n<p>That said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.</p>\n\n<pre><code>try {\n    ParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\n    userConsole.err(anfe.getMessage());\n}\n</code></pre>\n\n<p>Or if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.</p>\n\n<pre><code>public Action findAction(final String userInput) {\n    /* Code to return requested Action if found */\n    return new Action() {\n        public void doSomething() {\n            userConsole.err(\"Action not found: \" + userInput);\n        }\n    }\n}\n</code></pre>\n    </div>',1,1,1935,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(58,58,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another quicker way is:</p>\n\n<pre><code>git stash save --keep-index\n</code></pre>\n\n<p>After that, you can drop that stash with a <code>git stash drop</code> command if you like.</p>\n    </div>',1,1,1615,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(59,59,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>This worked for me:</p>\n\n<pre><code>$get(\"isAgeSelected \").checked == true\n</code></pre>\n\n<p>Where <code>isAgeSelected</code> is the id of the control.</p>\n\n<p>Also, @karim79\'s <a href=\"http://stackoverflow.com/questions/901712/check-checkbox-checked-property-using-jquery/901727#901727\">answer</a> works fine. I am not sure what I missed at the time I tested it.</p>\n\n<p><strong>Note, this is answer uses Microsoft Ajax, not jQuery</strong></p>\n    </div>',1,1,55,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(60,60,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>I don\'t believe you can have an actual comment.  The JSON should all be data, and if you include a comment, then it will be data too.</p>\n\n<p>You could have a designated data element called <code>\"_comment\"</code> (or something) that would be ignored by apps that use the JSON data.</p>\n\n<p>You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it. </p>\n\n<p>But if you decided to:</p>\n\n<pre><code>{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}\n</code></pre>\n    </div>',1,1,2729,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(61,61,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>JavaScript has no import, include, or require. <em>(Update 2015: it does now with <a href=\"http://exploringjs.com/es6/ch_modules.html\">ES6 modules</a>)</em> There are other ways for JavaScript to include external JavaScript contents, though.</p>\n\n<h3>Ajax Loading</h3>\n\n<p>Load an additional script with an Ajax call and then use <code>eval</code>. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs and hacks.</p>\n\n<h3>jQuery Loading</h3>\n\n<p>The <a href=\"http://jquery.com/\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\">in one line</a>:</p>\n\n<pre><code>$.getScript(\"my_lovely_script.js\", function(){\n\n   alert(\"Script loaded but not necessarily executed.\");\n\n});\n</code></pre>\n\n<h3>Dynamic Script Loading</h3>\n\n<p>Add a script tag with the script URL in the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Both of these solutions are discussed and illustrated in <em><a href=\"http://unixpapa.com/js/dyna.html\">JavaScript Madness: Dynamic Script Loading</a></em>.</p>\n\n<h2>Detecting when the script has been executed</h2>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won\'t be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName(\'head\')[0];\n    var script = document.createElement(\'script\');\n    script.type = \'text/javascript\';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\">lambda function</a>:</p>\n\n<pre><code>var myPrettyCode = function() {\n\n   // Here, do what ever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There\'s a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h3>Source Code Merge</h3>\n\n<p>Another <a href=\"http://stackoverflow.com/q/5511989/59087\">solution</a> is to combine the two files into a single file. This can be used with minification to produce a single, minimally sized JavaScript file to include as normal.</p>\n    </div>',1,1,2757,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(62,62,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sorting solutions have been proposed, but <strong>sorting is a little too much</strong>: We don\'t need order; <strong>we just need equality groups</strong>.</p>\n\n<p>So <strong>hashing</strong> would be enough (and faster).</p>\n\n<ol>\n<li>For each color of socks, <strong>form a pile</strong>. Iterate over all socks in your input basket <strong>and distribute them onto the color piles</strong>.</li>\n<li>Iterate over each pile and <strong>distribute it by some other metric</strong> (e.g. pattern) into a second set of piles</li>\n<li><strong>Recursively apply this scheme</strong> until you have distributed all socks onto <strong>very small piles that you can visually process immediately</strong></li>\n</ol>\n\n<p>This kind of recursive hash partitioning is actually being done by <a href=\"http://en.wikipedia.org/wiki/Microsoft_SQL_Server\">SQL Server</a> when it needs to hash join or hash aggregate over huge data sets. It distributes its build input stream into many partitions which are independent. This scheme scales to arbitrary amounts of data and multiple CPUs linearly.</p>\n\n<p>You don\'t need recursive partitioning if you can find a distribution key (hash key) that <strong>provides enough buckets</strong> that each bucket is small enough to be processed very quickly. Unfortunately, I don\'t think socks have such a property.</p>\n\n<p>If each sock had an integer called \"PairID\" one could easily distribute them into 10 buckets according to <code>PairID % 10</code> (the last digit).</p>\n\n<p>The best real-world partitioning I can think of is creating a <strong>rectangle of piles</strong>: one dimension is color, the other is pattern. Why a rectangle? Because we need O(1) random-access to piles. (A 3D <a href=\"http://en.wikipedia.org/wiki/Cuboid\">cuboid</a> would also work, but that is not very practical.)</p>\n\n<hr>\n\n<p>Update:</p>\n\n<p>What about <strong>parallelism</strong>? Can multiple humans match the socks faster?</p>\n\n<ol>\n<li>The simplest parallization strategy is to have multiple workers take from the input basket and put the socks onto the piles. This only scales up so much - imagine 100 people fighting over 10 piles. <strong>The synchronization costs</strong> (manifesting themselves as hand-collisions and human communication) <strong>destroy efficiency and speed-up</strong> (see the <a href=\"http://www.perfdynamics.com/Manifesto/USLscalability.html\">Universal Scalability Law</a>!). Is this prone to <strong>deadlocks</strong>? No, because each worker only needs to access one pile at a time. With just one \"lock\" there cannot be a deadlock. <strong>Livelocks</strong> might be possible depending on how the humans coordinate access to piles. They might just use <a href=\"http://en.wikipedia.org/wiki/Exponential_backoff\">random backoff</a> like network cards do that on a physical level to determine what card can exclusively access the network wire. If it works for <a href=\"http://en.wikipedia.org/wiki/Network_interface_controller\">NICs</a>, it should work for humans as well.</li>\n<li>It scales nearly indefinitely if <strong>each worker has its own set of piles</strong>. Workers can then take big chunks of socks from the input basket (very little contention as they are doing it rarely) and they do not need to synchronise when distributing the socks at all (because they have thread-local piles). At the end, all workers need to union their pile-sets. I believe that can be done in O(log (worker count * piles per worker)) if the workers form an <strong>aggregation tree</strong>.</li>\n</ol>\n\n<p>What about the <a href=\"http://en.wikipedia.org/wiki/Element_distinctness_problem\">element distinctness problem</a>? As the article states, the element distinctness problem can be solved in <code>O(N)</code>. This is the same for the socks problem (also <code>O(N)</code>, if you need only one distribution step (I proposed multiple steps only because humans are bad at calculations - one step is enough if you distribute on <code>md5(color, length, pattern, ...)</code>, i.e. a <strong>perfect hash</strong> of all attributes)).</p>\n\n<p>Clearly, one cannot go faster than <code>O(N)</code>, so we have reached the <strong>optimal lower bound</strong>.</p>\n\n<p>Although the outputs are not exactly the same (in one case, just a boolean. In the other case, the pairs of socks), the asymptotic complexities are the same.</p>\n    </div>',1,1,1933,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(63,63,'<div class=\"post-text\" itemprop=\"text\">\r\n<h1> Tracking it down </h1>\n\n<p>At first I thought this was a coercion bug where <code>null</code> was getting coerced to <code>\"null\"</code> and a test of <code>\"null\" == null</code> was passing. It\'s not. <strong>I was close, but so very, very wrong. Sorry about that!</strong></p>\n\n<p>I\'ve since done lots of <a href=\"http://wonderfl.net/c/dd23/read\">fiddling on wonderfl.net</a> and tracing through the code in <code>mx.rpc.xml.*</code>. At line 1795 of <code>XMLEncoder</code> (in the 3.5 source), in <code>setValue</code>, all of the XMLEncoding boils down to </p>\n\n<pre><code>currentChild.appendChild(xmlSpecialCharsFilter(Object(value)));\n</code></pre>\n\n<p>which is essentially the same as:</p>\n\n<pre><code>currentChild.appendChild(\"null\");\n</code></pre>\n\n<p>This code, according to my original fiddle, returns an empty XML element. But why?</p>\n\n<p></p><h1> Cause </h1>\n\n<p>According to commenter Justin Mclean on bug report <a href=\"https://issues.apache.org/jira/browse/FLEX-33644\">FLEX-33664</a>, the following is the culprit (see last two tests in my <a href=\"http://wonderfl.net/c/dd23/read\">fiddle</a> which verify this):</p>\n\n<pre><code>var thisIsNotNull:XML = &lt;root&gt;null&lt;/root&gt;;\nif(thisIsNotNull == null){\n    // always branches here, as (thisIsNotNull == null) strangely returns true\n    // despite the fact that thisIsNotNull is a valid instance of type XML\n}\n</code></pre>\n\n<p>When <code>currentChild.appendChild</code> is passed the string <code>\"null\"</code>, it first converts it to a root XML element with text <code>null</code>, and then tests that element against the null literal. This is a weak equality test, so either the XML containing null is coerced to the null type, or the null type is coerced to a root xml element containing the string \"null\", and the test passes where it arguably should fail. One fix might be to always use <a href=\"http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/operators.html#strict_equality\">strict equality</a> tests when checking XML (or anything, really) for \"nullness.\"</p>\n\n<p></p><h1>Solution</h1>\nThe only reasonable workaround I can think of, short of fixing this bug in every damn version of ActionScript, is to test fields for \"null\" and <strong>escape them as <a href=\"http://stackoverflow.com/q/1239466/203705\">CDATA values</a>.</strong> \n\n<p><strong>CDATA values are the most appropriate way to mutate an entire text value that would otherwise cause encoding/decoding problems.</strong> Hex encoding, for instance, is meant for individual characters. CDATA values are preferred when you\'re escaping the entire text of an element. The biggest reason for this is that it maintains human readability.</p>\n    </div>',1,1,912,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(64,64,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>As per the Git Documentation <a href=\"https://git-scm.com/docs/git-clean\">git clean</a></p>\n\n<blockquote>\n  <p>Remove untracked files from the working tree</p>\n</blockquote>\n\n<hr>\n\n<p>Step 1 is to show what will be deleted by using the <code>-n</code> option:</p>\n\n<pre><code>git clean -n\n</code></pre>\n\n<p>Clean Step - <strong>beware: this will delete files</strong>:</p>\n\n<pre><code>git clean -f\n</code></pre>\n\n<ul>\n<li>To remove directories, run <code>git clean -f -d</code> or <code>git clean -fd</code></li>\n<li>To remove ignored files, run <code>git clean -f -X</code> or <code>git clean -fX</code></li>\n<li>To remove ignored and non-ignored files, run <code>git clean -f -x</code> or <code>git clean -fx</code></li>\n</ul>\n\n<p><strong>Note</strong> the case difference on the <code>X</code> for the two latter commands.</p>\n\n<p>If <code>clean.requireForce</code> is set to \"true\" (the default) in your configuration, one needs to specify <code>-f</code> otherwise nothing will actually happen.</p>\n\n<p>Again see the <a href=\"http://git-scm.com/docs/git-clean\"><code>git-clean</code></a> docs for more information.</p>\n\n<h2>Options</h2>\n\n<p><strong>-f</strong></p>\n\n<p><strong>--force</strong></p>\n\n<p>If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or -i.</p>\n\n<p><strong>-x</strong></p>\n\n<p>Don’t use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build.</p>\n\n<p><strong>-X</strong></p>\n\n<p>Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.</p>\n\n<p><strong>-n</strong></p>\n\n<p><strong>--dry-run</strong></p>\n\n<p>Don’t actually remove anything, just show what would be done.</p>\n\n<p><strong>-d</strong></p>\n\n<p>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use -f option twice if you really want to remove such a directory.</p>\n    </div>',1,1,5513,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(65,65,'<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &amp;&amp; pwd )\"\n</code></pre>\n\n<p>is a useful one-liner which will give you the full directory name of the script no matter where it is being called from.</p>\n\n<p>This will work as long as the last component of the path used to find the script is not a symlink (directory links are OK).  If you want to also resolve any links to the script itself, you need a multi-line solution:</p>\n\n<pre><code>SOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\n  SOURCE=\"$(readlink \"$SOURCE\")\"\n  [[ $SOURCE != /* ]] &amp;&amp; SOURCE=\"$DIR/$SOURCE\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\ndone\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\n</code></pre>\n\n<p>This last one will work with any combination of aliases, <code>source</code>, <code>bash -c</code>, symlinks, etc.</p>\n\n<p>Beware: if you <code>cd</code> to a different directory before running this snippet, the result may be incorrect! Also, watch out for <a href=\"http://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/\"><code>$CDPATH</code> gotchas</a>.</p>\n\n<p>To understand how it works, try running this more verbose form:</p>\n\n<pre><code>#!/bin/bash\n\nSOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  TARGET=\"$(readlink \"$SOURCE\")\"\n  if [[ $TARGET == /* ]]; then\n    echo \"SOURCE \'$SOURCE\' is an absolute symlink to \'$TARGET\'\"\n    SOURCE=\"$TARGET\"\n  else\n    DIR=\"$( dirname \"$SOURCE\" )\"\n    echo \"SOURCE \'$SOURCE\' is a relative symlink to \'$TARGET\' (relative to \'$DIR\')\"\n    SOURCE=\"$DIR/$TARGET\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\n  fi\ndone\necho \"SOURCE is \'$SOURCE\'\"\nRDIR=\"$( dirname \"$SOURCE\" )\"\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" &amp;&amp; pwd )\"\nif [ \"$DIR\" != \"$RDIR\" ]; then\n  echo \"DIR \'$RDIR\' resolves to \'$DIR\'\"\nfi\necho \"DIR is \'$DIR\'\"\n</code></pre>\n\n<p>And it will print something like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SOURCE \'./scriptdir.sh\' is a relative symlink to \'sym2/scriptdir.sh\' (relative to \'.\')\nSOURCE is \'./sym2/scriptdir.sh\'\nDIR \'./sym2\' resolves to \'/home/ubuntu/dotfiles/fo fo/real/real1/real2\'\nDIR is \'/home/ubuntu/dotfiles/fo fo/real/real1/real2\'\n</code></pre>\n    </div>',1,1,4053,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(66,66,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>This depends a lot on what you mean by \"revert\".</p>\n\n<h2>Temporarily switch to a different commit</h2>\n\n<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will detach your HEAD, that is, leave you with no branch checked out:\ngit checkout 0d1d7fc32\n</code></pre>\n\n<p>Or if you want to make commits while you\'re there, go ahead and make a new branch while you\'re at it:</p>\n\n<pre><code>git checkout -b old-state 0d1d7fc32\n</code></pre>\n\n<p>To go back to where you were, just check out the branch you were on again. (If you\'ve made changes, as always when switching branches, you\'ll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)</p>\n\n<h2>Hard delete unpublished commits</h2>\n\n<p>If, on the other hand, you want to really get rid of everything you\'ve done since then, there are two possibilities. One, if you haven\'t published any of these commits, simply reset:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will destroy any local modifications.\n# Don\'t do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there\'s work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you\'ve modified things which were\n# changed since the commit you reset to.\n</code></pre>\n\n<p>If you mess up, you\'ve already thrown away your local changes, but you can at least get back to where you were before by resetting again.</p>\n\n<h2>Undo published commits with new commits</h2>\n\n<p>On the other hand, if you\'ve published the work, you probably don\'t want to reset the branch, since that\'s effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don\'t rewrite any history.</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code># This will create three separate revert commits:\ngit revert a867b4af 25eee4ca 0766c053\n\n# It also takes ranges. This will revert the last two commits:\ngit revert HEAD~2..HEAD\n\n# Reverting a merge commit\ngit revert -m 1 &lt;merge_commit_sha&gt;\n\n# To get just one, you could use `rebase -i` to squash them afterwards\n# Or, you could do it manually (be sure to do this at top level of the repo)\n# get your index and work tree into the desired state, without changing HEAD:\ngit checkout 0d1d7fc32 .\n\n# Then commit. Be sure and write a good message describing what you just did\ngit commit\n</code></pre>\n\n<p>The <a href=\"http://schacon.github.com/git/git-revert.html\"><code>git-revert</code> manpage</a> actually covers a lot of this in its description. Another useful link is <a href=\"http://git-scm.com/blog/2010/03/02/undoing-merges.html\">this git-scm.com blog post discussing git-revert</a>.</p>\n\n<p>If you decide you didn\'t want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).</p>\n\n<p>You may also find this answer helpful in this case:<br>\n<a href=\"http://stackoverflow.com/questions/34519665/how-to-move-head-forward-checkout-revet-reflog-reset/34519716#34519716\">How to move HEAD (checkout, revert, reflog, reset)</a></p>\n    </div>',1,1,5845,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(67,67,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>The identity (<code>===</code>) operator behaves identically to the equality (<code>==</code>) operator except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. Both are equally quick.</p>\n\n<p>To quote Douglas Crockford\'s excellent <a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>\'\' == \'0\'           // false\n0 == \'\'             // true\n0 == \'0\'            // true\n\nfalse == \'false\'    // false\nfalse == \'0\'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n\' \\t\\r\\n \' == 0     // true\n</code></pre>\n  \n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"http://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"http://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert\'s</a> <a href=\"http://stackoverflow.com/a/957602/1288\">answer</a> concerning reference types.  For reference types <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a literal with an object that evaluates to the same literal, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string literal with a string object created by the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they\'re not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you\'re trying to compare.  My advice is to bypass the question entirely and just don\'t use the <code>String</code> constructor to create string objects.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n    </div>',1,1,4382,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(68,68,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to rename a branch while pointed to any branch, do :</p>\n\n<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;\n</code></pre>\n\n<p>If you want to rename the current branch, you can do:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n\n<p>A way to remember this, is <code>-m</code> is for \"move\" (or <code>mv</code>), which is how you rename files.</p>\n    </div>',1,1,7424,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(69,69,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>The difference is that <code>functionOne</code> is a function expression and so only defined when that line is reached, whereas <code>functionTwo</code> is a function declaration and is defined as soon as its surrounding function or script is executed (due to <a href=\"http://adripofjavascript.com/blog/drips/variable-and-function-hoisting\">hoisting</a>).  </p>\n\n<p>For example, a function expression:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// TypeError: undefined is not a function\r\nfunctionOne();\r\n\r\nvar functionOne = function() {\r\n  console.log(\"Hello!\");\r\n};</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>And, a function declaration:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Outputs: \"Hello!\"\r\nfunctionTwo();\r\n\r\nfunction functionTwo() {\r\n  console.log(\"Hello!\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>This also means you can\'t conditionally define functions using function declarations:</p>\n\n<pre><code>if (test) {\n   // Error or misbehavior\n   function functionThree() { doSomething(); }\n}\n</code></pre>\n\n<p>The above actually defines <code>functionThree</code> irrespective of <code>test</code>\'s value — unless <code>use strict</code> is in effect, in which case it simply raises an error.</p>\n    </div>',1,1,3540,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(70,70,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>It\'s a time zone change on December 31st in Shanghai.</p>\n\n<p>See <a href=\"http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927\">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So \"1927-12-31 23:54:08\" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>\n\n<p>Just another episode in the often weird and wonderful world of time zones.</p>\n\n<p><strong>EDIT:</strong> Stop press! History changes...</p>\n\n<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with  version 2013a of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>\n\n<p>I only noticed this because I\'m collecting questions like this in Noda Time, in the form of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>\n\n<p><strong>EDIT:</strong> History has changed again...</p>\n\n<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it\'s now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>\n\n<p><strong>EDIT:</strong> To answer <a href=\"http://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result/6841479#comment22684267_6841479\">Ken Kin\'s question</a> around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>\n\n<pre><code>import java.util.TimeZone;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        long startOf1900Utc = -2208988800000L;\n        for (String id : TimeZone.getAvailableIDs()) {\n            TimeZone zone = TimeZone.getTimeZone(id);\n            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {\n                System.out.println(id);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn\'t rely on any idea of a \"fixed\" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn\'t introduce this artificial transition.</p>\n    </div>',1,1,8071,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(71,71,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>It\'s a holdover from the Netscape days:</p>\n\n<blockquote>\n  <p>Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.</p>\n</blockquote>\n\n<p>It is from the blog post <em><a href=\"http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html\">A little rant about Microsoft Internet Explorer\'s color parsing</a></em> which covers it in great detail, including varying lengths of color values, etc.</p>\n\n<p>If we apply the rules in turn from the blog post, we get the following:</p>\n\n<ol>\n<li><p>Replace all nonvalid hexadecimal characters with 0\'s</p>\n\n<pre><code>chucknorris becomes c00c0000000\n</code></pre></li>\n<li><p>Pad out to the next total number of characters divisible by 3 (11 -&gt; 12)</p>\n\n<pre><code>c00c 0000 0000\n</code></pre></li>\n<li><p>Split into three equal groups, with each component representing the corresponding colour component of an RGB colour:</p>\n\n<pre><code>RGB (c00c, 0000, 0000)\n</code></pre></li>\n<li><p>Truncate each of the arguments from the right down to two characters</p></li>\n</ol>\n\n<p>Which gives the following result:</p>\n\n<pre><code>RGB (c0, 00, 00) = #C00000 or RGB(192, 0, 0)\n</code></pre>\n\n<p>Here\'s an example demonstrating the <code>bgcolor</code> attribute in action, to produce this \"amazing\" colour swatch:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;td bgcolor=\"chucknorris\" cellpadding=\"8\" width=\"100\" align=\"center\"&gt;chuck norris&lt;/td&gt;\r\n    &lt;td bgcolor=\"mrt\"         cellpadding=\"8\" width=\"100\" align=\"center\" style=\"color:#ffffff\"&gt;Mr T&lt;/td&gt;\r\n    &lt;td bgcolor=\"ninjaturtle\" cellpadding=\"8\" width=\"100\" align=\"center\" style=\"color:#ffffff\"&gt;ninjaturtle&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td bgcolor=\"sick\"  cellpadding=\"8\" width=\"100\" align=\"center\"&gt;sick&lt;/td&gt;\r\n    &lt;td bgcolor=\"crap\"  cellpadding=\"8\" width=\"100\" align=\"center\"&gt;crap&lt;/td&gt;\r\n    &lt;td bgcolor=\"grass\" cellpadding=\"8\" width=\"100\" align=\"center\"&gt;grass&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>This also answers the other part of the question; why does <code>bgcolor=\"chucknorr\"</code> produce a yellow colour? Well, if we apply the rules, the string is:</p>\n\n<pre><code>c00c00000 =&gt; c00 c00 000 =&gt; c0 c0 00 [RGB(192, 192, 0)]\n</code></pre>\n\n<p>Which gives a light yellow gold colour. As the string starts off as 9 characters, we keep the second C this time around hence it ends up in the final colour value.</p>\n\n<p>I originally encountered this when someone pointed out you could do <code>color=\"crap\"</code> and, well, it comes out brown.</p>\n    </div>',1,1,4534,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(72,72,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>This article about Javascript Strict Mode might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n\n<p>To quote some interesting parts:</p>\n\n<blockquote>\n  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n  <p>Strict mode helps out in a couple ways:</p>\n  \n  <ul>\n  <li>It catches some common coding bloopers, throwing exceptions.</li>\n  <li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n  <li>It disables features that are confusing or poorly thought out.</li>\n  </ul>\n</blockquote>\n\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig\'s article)</em>:</p>\n\n<blockquote>\n<pre><code>// Non-strict code...\n\n(function(){\n  \"use strict\";\n\n  // Define your library strictly...\n})();\n\n// Non-strict code... \n</code></pre>\n</blockquote>\n\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n\n<p>So, I suppose it\'s a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n\n<p>Currently, it\'s <a href=\"http://caniuse.com/#use-strict\"><strong>supported by all major browsers</strong></a> <em>(bar IE 9 and below)</em>.</p>\n    </div>',1,1,3453,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(73,73,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre><code>// Checks for display:[none|block], ignores visible:[true|false]\n$(element).is(\":visible\"); \n</code></pre>\n\n<p>Same as <a href=\"http://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt\'s suggestion</a>, but applied to a single element; and it <a href=\"http://stackoverflow.com/a/4685330/49942\">matches the algorithm recommended in the jQuery FAQ</a></p>\n    </div>',1,1,6671,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(74,74,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>PART I: How To Log In</h2>\n\n<p>We\'ll assume you already know how to build a login+password HTML form which POSTs the values to a script on the server side for authentication. The sections below will deal with patterns for sound practical auth, and how to avoid the most common security pitfalls.</p>\n\n<p><strong>To HTTPS or not to HTTPS?</strong></p>\n\n<p>Unless the connection is already secure (that is, tunneled through HTTPS using SSL/TLS), your login form values will be sent in cleartext, which allows anyone eavesdropping on the line between browser and web server will be able to read logins as they pass through. This type of wiretapping is done routinely by governments, but in general we won\'t address \'owned\' wires other than to say this: If you are protecting anything important, use HTTPS.</p>\n\n<p>In essence, the only <strong>practical</strong> way to protect against wiretapping / packet sniffing during login is by using HTTPS or another certificate-based encryption scheme (for example, <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">TLS</a>) or a proven &amp; tested challenge-response scheme (for example, the <a href=\"http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">Diffie-Hellman</a>-based SRP). <em>Any other method can be easily circumvented</em> by an eavesdropping attacker.</p>\n\n<p>Of course, if you are willing to get a little bit impractical, you could also employ some form of two-factor authentication scheme (e.g. the Google Authenticator app, a physical \'cold war style\' codebook, or an RSA key generator dongle). If applied correctly, this could work even with an unsecured connection, but it\'s hard to imagine that a dev would be willing to implement two-factor auth but not SSL.</p>\n\n<p><strong>(Do not) Roll-your-own JavaScript encryption/hashing</strong></p>\n\n<p>Given the nonzero cost and perceived technical difficulty of setting up an SSL certificate on your website, some developers are tempted to roll their own in-browser hashing or encryption schemes in order to avoid passing cleartext logins over an unsecured wire.</p>\n\n<p>While this is a noble thought, it is essentially useless (and can be a <a href=\"http://stackoverflow.com/questions/1380168/does-it-make-security-sense-to-hash-password-on-client-end\">security flaw</a>) unless it is combined with one of the above - that is, either securing the line with strong encryption or using a tried-and-tested challenge-response mechanism (if you don\'t know what that is, just know that it is one of the most difficult to prove, most difficult to design, and most difficult to implement concepts in digital security).</p>\n\n<p>While it is true that hashing the password <em>can be</em> effective against <strong>password disclosure</strong>, it is vulnerable to replay attacks, Man-In-The-Middle attacks / hijackings (if an attacker can inject a few bytes into your unsecured HTML page before it reaches your browser, they can simply comment out the hashing in the JavaScript), or brute-force attacks (since you are handing the attacker both username, salt and hashed password).</p>\n\n<p><strong>CAPTCHAS against humanity</strong></p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/CAPTCHA\">CAPTCHAs</a> are meant to thwart one specific category of attack: automated dictionary/brute force trial-and-error with no human operator. There is no doubt that this is a real threat, however there are ways of dealing with it seamlessly that don\'t require a CAPTCHA, specifically properly designed serverside login throttling schemes - we\'ll discuss those later.</p>\n\n<p>Know that CAPTCHA implementations are not created alike; they often aren\'t human-solvable, most of them are actually ineffective against bots, all of them are ineffective against cheap third-world labor (according to <a href=\"http://en.wikipedia.org/wiki/OWASP\">OWASP</a>, the current sweatshop rate is $12 per 500 tests), and some implementations may be technically illegal in some countries (see <a href=\"http://www.owasp.org/index.php/Guide_to_Authentication\">OWASP Guide To Authentication</a>). If you must use a CAPTCHA, use Google\'s <a href=\"http://en.wikipedia.org/wiki/ReCAPTCHA\">reCAPTCHA</a>, since it is OCR-hard by definition (since it uses already OCR-misclassified book scans) and tries very hard to be user-friendly.</p>\n\n<p>Personally, I tend to find CAPTCHAS annoying, and use them only as a last resort when a user has failed to login a number of times and throttling delays are maxxed out. This will happen rarely enough to be acceptable, and it strengthens the system as a whole.</p>\n\n<p><strong>Storing Passwords / Verifying logins</strong></p>\n\n<p>This may finally be common knowledge after all the highly-publicized hacks and user data leaks we\'ve seen in recent years, but it has to be said: Do not store passwords in cleartext in your database. User databases are routinely hacked, leaked or gleaned through SQL injection, and if you are storing raw, plaintext passwords, that is instant game over for your login security.</p>\n\n<p>So if you can\'t store the password, how do you check that the login+password combination POSTed from the login form is correct? The answer is hashing using a <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\">key derivation function</a>. Whenever a new user is created or a password is changed, you take the password and run it through a KDF, such as bcrypt, scrypt or PBKDF2, turning the cleartext password (\"correcthorsebatterystaple\") into a long, random-looking string, which is a lot safer to store in your database. To verify a login, you run the same hash function on the entered password, this time passing in the salt and compare the resulting hash string to the value stored in your database. bcrypt and scrypt store the salt with the hash already. Check out this <a href=\"http://security.stackexchange.com/a/31846/8340\">article</a> on sec.stackexchange for more detailed information.</p>\n\n<p>The reason a salt is used is because hashing in itself is not sufficient -- you\'ll want to add a so-called \'salt\' to protect the hash against <a href=\"https://en.wikipedia.org/wiki/Rainbow_table\">rainbow tables</a>. A salt effectively prevents two passwords that exactly match from being stored as the same hash value, preventing the whole database being scanned in one run if an attacker is executing a password guessing attack.</p>\n\n<p>A cryptographic hash should not be used for password storage because user selected passwords are not strong enough (i.e. do not usually contain enough entropy) and a password guessing attack could be completed in a relatively short time by an attacker with access to the hashes. This is why a KDF is used - these effectively <a href=\"https://en.wikipedia.org/wiki/Key_stretching\">\"stretch the key\"</a> meaning that each password guess an attacker makes involves iterating the hashing algorithm multiple times, for example 10,000 times, making the attacker\'s password guessing 10,000 times slower.</p>\n\n<p><strong>Session data - \"You are logged in as Spiderman69\"</strong></p>\n\n<p>Once the server has verified the login and password against your user database and found a match, the system needs a way to remember that the browser has been authenticated. This fact should only ever be stored server side in the session data.</p>\n\n<blockquote>\n  <p>If you are unfamiliar with session data, here\'s how it works: A single randomly-generated string is stored in an expiring cookie and used to reference a collection of data - the session data - which is stored on the server. If you are using an MVC framework, this is undoubtedly handled already.</p>\n</blockquote>\n\n<p>If at all possible, make sure the session cookie has the secure and HTTP Only flags set when sent to the browser. The httponly flag provides some protection against the cookie being read by a XSS attack. The secure flag ensures that the cookie is only sent back via HTTPS, and therefore protects against network sniffing attacks. The value of the cookie should not be predictable. Where a cookie referencing a non-existent session is presented, its value should be replaced immediately to prevent <a href=\"https://www.owasp.org/index.php/Session_fixation\">session fixation</a>.</p>\n\n<h2>PART II: How To Remain Logged In - The Infamous \"Remember Me\" Checkbox</h2>\n\n<p>Persistent Login Cookies (\"remember me\" functionality) are a danger zone; on the one hand, they are entirely as safe as conventional logins when users understand how to handle them; and on the other hand, they are an enormous security risk in the hands of careless users, who may use them on public computers and forget to log out, and who may not know what browser cookies are or how to delete them.</p>\n\n<p>Personally, I like persistent logins for the web sites I visit on a regular basis, but I know how to handle them safely. If you are positive that your users know the same, you can use persistent logins with a clean conscience. If not - well, then you may subscribe to the philosophy that users who are careless with their login credentials brought it upon themselves if they get hacked. It\'s not like we go to our user\'s houses and tear off all those facepalm-inducing Post-It notes with passwords they have lined up on the edge of their monitors, either.</p>\n\n<p>Of course, some systems can\'t afford to have <em>any</em> accounts hacked; for such systems, there is no way you can justify having persistent logins.</p>\n\n<p><strong>If you DO decide to implement persistent login cookies, this is how you do it:</strong></p>\n\n<ol>\n<li><p>First, take some time to read <a href=\"https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence\">Paragon Initiative\'s article</a> on the subject. You\'ll need to get a bunch of elements right, and the article does a great job of explaining each.</p></li>\n<li><p>And just to reiterate one of the most common pitfalls, <strong>DO NOT STORE THE PERSISTENT LOGIN COOKIE (TOKEN) IN YOUR DATABASE, ONLY A HASH OF IT!</strong> The login token is Password Equivalent, so if an attacker got their hands on your database, they could use the tokens to log in to any account, just as if they were cleartext login-password combinations. Therefore, use hashing (according to <a href=\"http://security.stackexchange.com/a/63438/5002\">http://security.stackexchange.com/a/63438/5002</a> a weak hash will do just fine for this purpose) when storing persistent login tokens.</p></li>\n</ol>\n\n<h2>PART III: Using Secret Questions</h2>\n\n<p><strong>Don\'t implement \'secret questions\'</strong>. The \'secret questions\' feature is a security anti-pattern. Read the paper from link number 4 from the MUST-READ list. You can ask Sarah Palin about that one, after her Yahoo! email account got hacked during a previous presidential campaign because the answer to her security question was... \"Wasilla High School\"!</p>\n\n<p>Even with user-specified questions, it is highly likely that most users will choose either:</p>\n\n<ul>\n<li><p>A \'standard\' secret question like mother\'s maiden name or favourite pet</p></li>\n<li><p>A simple piece of trivia that anyone could lift from their blog, LinkedIn profile, or similar</p></li>\n<li><p>Any question that is easier to answer than guessing their password. Which, for any decent password, is every question you can imagine</p></li>\n</ul>\n\n<p><strong>In conclusion, security questions are inherently insecure in virtually all their forms and variations, and should not be employed in an authentication scheme for any reason.</strong></p>\n\n<p>The true reason why security questions even exist in the wild is that they conveniently save the cost of a few support calls from users who can\'t access their email to get to a reactivation code. This at the expense of security and Sarah Palin\'s reputation. Worth it? Probably not.</p>\n\n<h2>PART IV: Forgotten Password Functionality</h2>\n\n<p>I already mentioned why you should <strong>never use security questions</strong> for handling forgotten/lost user passwords; it also goes without saying that you should never e-mail users their actual passwords. There are at least two more all-too-common pitfalls to avoid in this field:</p>\n\n<ol>\n<li><p>Don\'t <em>reset</em> a forgotten password to an autogenerated strong password - such passwords are notoriously hard to remember, which means the user must either change it or write it down - say, on a bright yellow Post-It on the edge of their monitor. Instead of setting a new password, just let users pick a new one right away - which is what they want to do anyway.</p></li>\n<li><p>Always hash the lost password code/token in the database. <strong><em>AGAIN</em></strong>, this code is another example of a Password Equivalent, so it MUST be hashed in case an attacker got their hands on your database. When a lost password code is requested, send the plaintext code to the user\'s email address, then hash it, save the hash in your database -- and <em>throw away the original</em>. Just like a password or a persistent login token.</p></li>\n</ol>\n\n<p>A final note: always make sure your interface for entering the \'lost password code\' is at least as secure as your login form itself, or an attacker will simply use this to gain access instead. Making sure you generate very long \'lost password codes\' (for example, 16 case sensitive alphanumeric characters) is a good start, but consider adding the same throttling scheme that you do for the login form itself.</p>\n\n<h2>PART V: Checking Password Strength</h2>\n\n<p>First, you\'ll want to read this small article for a reality check: <a href=\"http://www.whatsmypass.com/?p=415\">The 500 most common passwords</a></p>\n\n<p>Okay, so maybe the list isn\'t the <em>canonical</em> list of most common passwords on <em>any</em> system <em>anywhere ever</em>, but it\'s a good indication of how poorly people will choose their passwords when there is no enforced policy in place. Plus, the list looks frighteningly close to home when you compare it to publicly available analyses of recently stolen passwords.</p>\n\n<p>So: With no minimum password strength requirements, 2% of users use one of the top 20 most common passwords. Meaning: if an attacker gets just 20 attempts, 1 in 50 accounts on your website will be crackable.</p>\n\n<p>Thwarting this requires calculating the entropy of a password and then applying a threshold.  The National Institute of Standards and Technology (NIST) <a href=\"http://en.wikipedia.org/wiki/Password_strength#NIST_Special_Publication_800-63\">Special Publication 800-63</a> has a set of very good suggestions.  That, when combined with a dictionary and keyboard layout analysis (for example, \'qwertyuiop\' is a bad password), can <a href=\"http://cubicspot.blogspot.com/2012/01/how-to-calculate-password-strength-part.html\">reject 99% of all poorly selected passwords</a> at a level of 18 bits of entropy.  Simply calculating password strength and <a href=\"https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/\">showing a visual strength meter</a> to a user is good, but insufficient.  Unless it is enforced, a lot of users will most likely ignore it.</p>\n\n<p>And for a refreshing take on user-friendliness of high-entropy passwords, Randall Munroe\'s <a href=\"https://xkcd.com/936/\">Password Strength xkcd</a> is highly recommended.</p>\n\n<h2>PART VI: Much More - Or: Preventing Rapid-Fire Login Attempts</h2>\n\n<p>First, have a look at the numbers: <a href=\"http://www.lockdown.co.uk/?pg=combi&amp;s=articles\">Password Recovery Speeds - How long will your password stand up</a></p>\n\n<p>If you don\'t have the time to look through the tables in that link, here\'s the list of them:</p>\n\n<ol>\n<li><p>It takes <em>virtually no time</em> to crack a weak password, even if you\'re cracking it with an abacus</p></li>\n<li><p>It takes <em>virtually no time</em> to crack an alphanumeric 9-character password, if it is <strong>case insensitive</strong></p></li>\n<li><p>It takes <em>virtually no time</em> to crack an intricate, symbols-and-letters-and-numbers, upper-and-lowercase password, if it is <strong>less than 8 characters long</strong> (a desktop PC can search the entire keyspace up to 7 characters in a matter of days or even hours)</p></li>\n<li><p><strong>It would, however, take an inordinate amount of time to crack even a 6-character password, <em>if you were limited to one attempt per second!</em></strong></p></li>\n</ol>\n\n<p>So what can we learn from these numbers? Well, lots, but we can focus on the most important part: the fact that preventing large numbers of rapid-fire successive login attempts (ie. the <em>brute force</em> attack) really isn\'t that difficult. But preventing it <em>right</em> isn\'t as easy as it seems.</p>\n\n<p>Generally speaking, you have three choices that are all effective against brute-force attacks <em>(and dictionary attacks, but since you are already employing a strong passwords policy, they shouldn\'t be an issue)</em>:</p>\n\n<ul>\n<li><p>Present a <strong>CAPTCHA</strong> after N failed attempts (annoying as hell and often ineffective -- but I\'m repeating myself here)</p></li>\n<li><p><strong>Locking accounts</strong> and requiring email verification after N failed attempts (this is a <a href=\"http://en.wikipedia.org/wiki/Denial-of-service_attack\">DoS</a> attack waiting to happen)</p></li>\n<li><p>And finally, <strong>login throttling</strong>: that is, setting a time delay between attempts after N failed attempts (yes, DoS attacks are still possible, but at least they are far less likely and a lot more complicated to pull off).</p></li>\n</ul>\n\n<p><strong>Best practice #1:</strong> A short time delay that increases with the number of failed attempts, like:</p>\n\n<ul>\n<li>1 failed attempt = no delay</li>\n<li>2 failed attempts = 2 sec delay</li>\n<li>3 failed attempts = 4 sec delay</li>\n<li>4 failed attempts = 8 sec delay</li>\n<li>5 failed attempts = 16 sec delay</li>\n<li>etc.</li>\n</ul>\n\n<p>DoS attacking this scheme would be very impractical, since the resulting lockout time is slightly larger than the sum of the previous lockout times.</p>\n\n<blockquote>\n  <p>To clarify: The delay is <em>not</em> a delay before returning the response to the browser. It is more like a timeout or refractory period during which login attempts to a specific account or from a specific IP address will not be accepted or evaluated at all. That is, correct credentials will not return in a successful login, and incorrect credentials will not trigger a delay increase.</p>\n</blockquote>\n\n<p><strong>Best practice #2:</strong> A medium length time delay that goes into effect after N failed attempts, like:</p>\n\n<ul>\n<li>1-4 failed attempts = no delay</li>\n<li>5 failed attempts = 15-30 min delay</li>\n</ul>\n\n<p>DoS attacking this scheme would be quite impractical, but certainly doable. Also, it might be relevant to note that such a long delay can be very annoying for a legitimate user. Forgetful users will dislike you.</p>\n\n<p><strong>Best practice #3:</strong> Combining the two approaches - either a fixed, short time delay that goes into effect after N failed attempts, like:</p>\n\n<ul>\n<li>1-4 failed attempts = no delay</li>\n<li>5+ failed attempts = 20 sec delay</li>\n</ul>\n\n<p>Or, an increasing delay with a fixed upper bound, like:</p>\n\n<ul>\n<li>1 failed attempt = 5 sec delay</li>\n<li>2 failed attempts = 15 sec delay</li>\n<li>3+ failed attempts = 45 sec delay</li>\n</ul>\n\n<p>This final scheme was taken from the OWASP best-practices suggestions (link 1 from the MUST-READ list), and should be considered best practice, even if it is admittedly on the restrictive side.</p>\n\n<blockquote>\n  <p><em>As a rule of thumb however, I would say: the stronger your password policy is, the less you have to bug users with delays. If you require strong (case-sensitive alphanumerics + required numbers and symbols) 9+ character passwords, you could give the users 2-4 non-delayed password attempts before activating the throttling.</em></p>\n</blockquote>\n\n<p>DoS attacking this final login throttling scheme would be <strong><em>very</em></strong> impractical. And as a final touch, always allow persistent (cookie) logins (and/or a CAPTCHA-verified login form) to pass through, so legitimate users won\'t even be delayed <em>while the attack is in progress</em>. That way, the very impractical DoS attack becomes an <em>extremely</em> impractical attack.</p>\n\n<p>Additionally, it makes sense to do more aggressive throttling on admin accounts, since those are the most attractive entry points</p>\n\n<h2>PART VII: Distributed Brute Force Attacks</h2>\n\n<p>Just as an aside, more advanced attackers will try to circumvent login throttling by \'spreading their activities\':</p>\n\n<ul>\n<li><p>Distributing the attempts on a botnet to prevent IP address flagging</p></li>\n<li><p>Rather than picking one user and trying the 50.000 most common passwords (which they can\'t, because of our throttling), they will pick THE most common password and try it against 50.000 users instead. That way, not only do they get around maximum-attempts measures like CAPTCHAs and login throttling, their chance of success increases as well, since the number 1 most common password is far more likely than number 49.995</p></li>\n<li><p>Spacing the login requests for each user account, say, 30 seconds apart, to sneak under the radar</p></li>\n</ul>\n\n<p>Here, the best practice would be <strong>logging the number of failed logins, system-wide</strong>, and using a running average of your site\'s bad-login frequency as the basis for an upper limit that you then impose on all users.</p>\n\n<p>Too abstract? Let me rephrase:</p>\n\n<p>Say your site has had an average of 120 bad logins per day over the past 3 months. Using that (running average), your system might set the global limit to 3 times that -- ie. 360 failed attempts over a 24 hour period. Then, if the total number of failed attempts across all accounts exceeds that number within one day (or even better, monitor the rate of acceleration and trigger on a calculated threshold), it activates system-wide login throttling - meaning short delays for ALL users (still, with the exception of cookie logins and/or backup CAPTCHA logins).</p>\n\n<p>I also posted a question with <a href=\"http://stackoverflow.com/questions/479233/what-is-the-best-distributed-brute-force-countermeasure\">more details and a really good discussion of how to avoid tricky pitfals</a> in fending off distributed brute force attacks</p>\n\n<h2>PART VIII: Two-Factor Authentication and Authentication Providers</h2>\n\n<p>Credentials can be compromised, whether by exploits, passwords being written down and lost, laptops with keys being stolen, or users entering logins into phishing sites.  Logins can be further protected with two-factor authentication, which use out-of-band factors such as single-use codes received from a phone call, SMS message, app, or dongle. Several providers offer two-factor authentication services.</p>\n\n<p>Authentication can be completely delegated to a single-sign-on service, where another provider handles collecting credentials. This pushes the problem to a trusted third party. Google and Twitter both provide standards-based SSO services, while Facebook provides a similar proprietary solution.</p>\n\n<h2>MUST-READ LINKS About Web Authentication</h2>\n\n<ol>\n<li><a href=\"http://www.owasp.org/index.php/Guide_to_Authentication\">OWASP Guide To Authentication</a> / <a href=\"https://www.owasp.org/index.php/Authentication_Cheat_Sheet\">OWASP Authentication Cheat Sheet</a></li>\n<li><a href=\"https://pdos.csail.mit.edu/papers/webauth:sec10.pdf\">Dos and Don’ts of Client Authentication on the Web (very readable MIT research paper)</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/HTTP_cookie#Drawbacks_of_cookies\">Wikipedia: HTTP cookie</a></li>\n<li><a href=\"http://cups.cs.cmu.edu/soups/2008/proceedings/p13Rabkin.pdf\">Personal knowledge questions for fallback authentication: Security questions in the era of Facebook (very readable Berkeley research paper)</a></li>\n</ol>\n    </div>',1,1,3054,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(75,75,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>The stack is the memory set aside as scratch space for a thread of execution.  When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data.  When that function returns, the block becomes unused and can be used the next time a function is called.  The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed.  This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.</p>\n\n<p>The heap is memory set aside for dynamic allocation.  Unlike the stack, there\'s no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time.  This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.</p>\n\n<p>Each thread gets a stack, while there\'s typically only one heap for the application (although it isn\'t uncommon to have multiple heaps for different types of allocation).</p>\n\n<p>To answer your questions directly:  </p>\n\n<blockquote>\n  <p><em>To what extent are they controlled by the OS or language runtime?</em></p>\n</blockquote>\n\n<p>The OS allocates the stack for each system-level thread when the thread is created.  Typically the OS is called by the language runtime to allocate the heap for the application.</p>\n\n<blockquote>\n  <p><em>What is their scope?</em></p>\n</blockquote>\n\n<p>The stack is attached to a thread, so when the thread exits the stack is reclaimed.  The heap is typically allocated at application startup by the runtime, and is reclaimed when the application (technically process) exits.</p>\n\n<blockquote>\n  <p><em>What determines the size of each of them?</em>  </p>\n</blockquote>\n\n<p>The size of the stack is set when a thread is created.  The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).</p>\n\n<blockquote>\n  <p><em>What makes one faster?</em></p>\n</blockquote>\n\n<p>The stack is faster because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or deallocation.  Also, each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor\'s cache, making it very fast. Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with \"all\" other heap accesses in the program.</p>\n\n<p>A clear demonstration:\n<img src=\"https://i.stack.imgur.com/i6k0Z.png\" alt=\"\">\n<br><sub>Image source: <a href=\"http://vikashazrati.wordpress.com/2007/10/01/quicktip-java-basics-stack-and-heap/\">vikashazrati.wordpress.com</a></sub></p>\n    </div>',1,1,4059,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(76,76,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a list of current possibilities:</p>\n\n<p><strong>1. indexOf</strong> - (see bottom)</p>\n\n<p><strong>2. (ES6) includes</strong> - <a href=\"http://stackoverflow.com/a/14193950/2689455\">go to answer</a>, or <a href=\"http://stackoverflow.com/a/2385801/2689455\">this answer</a></p>\n\n<pre><code>var string = \"foo\",\n    substring = \"oo\";\nstring.includes(substring);\n</code></pre>\n\n<p><strong>3. search</strong> - <a href=\"http://stackoverflow.com/a/2385801/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr= \"/oo/\";\nstring.search(expr);\n</code></pre>\n\n<p><strong>4. lodash includes</strong> - <a href=\"http://stackoverflow.com/a/20575032/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    substring = \"oo\";\n_.includes(string, substring);\n</code></pre>\n\n<p><strong>5. RegExp</strong> - <a href=\"http://stackoverflow.com/a/1789980/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr= \"/oo/\";\nexpr.test(string);\n</code></pre>\n\n<p><strong>6. Match</strong> - <a href=\"http://stackoverflow.com/a/12652006/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr= \"/oo/\";\nstring.match(expr);\n</code></pre>\n\n<p>Performance tests (<a href=\"http://jsben.ch/#/RVYk7\">http://jsben.ch/#/RVYk7</a>) are showing that indexOf might be the best choice, if it comes to a point where speed matters.</p>\n\n<hr>\n\n<p>Outdated answer: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String.prototype.indexOf</code></a> returns the position of the string in the other string. If not found, it will return <code>-1</code>:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var string = \"foo\",\r\n    substring = \"oo\";\r\nconsole.log(string.indexOf(substring) !== -1);</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>',1,1,8120,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(77,77,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>--&gt;</code> is not an operator. It is in fact two separate operators, <code>--</code> and <code>&gt;</code>.</p>\n\n<p>The conditional\'s code decrements <code>x</code>, while returning <code>x</code>\'s original (not decremented) value, and then compares the original value with <code>0</code> using the <code>&gt;</code> operator.</p>\n\n<p><strong>To better understand, the statement could be written as follows:</strong></p>\n\n<pre><code>while( (x--) &gt; 0 )\n</code></pre>\n    </div>',1,1,6033,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(78,78,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>One does not simply redirect using jQuery</h2>\n\n<p>jQuery is not necessary, and <strong><code>window.location.replace(...)</code></strong> will best simulate an HTTP redirect.  </p>\n\n<p>It is better than using <code>window.location.href =</code>, because <code>replace()</code> does not keep the originating page in the session history, meaning the user won\'t get stuck in a never-ending back-button fiasco.  If you want to simulate someone clicking on a link, use <code>location.href</code>.  If you want to simulate an HTTP redirect, use <code>location.replace</code>.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>// similar behavior as an HTTP redirect\nwindow.location.replace(\"http://stackoverflow.com\");\n\n// similar behavior as clicking on a link\nwindow.location.href = \"http://stackoverflow.com\";\n</code></pre>\n    </div>',1,1,9984,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(79,79,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can undo <code>git add</code> before commit with</p>\n\n<pre><code>git reset &lt;file&gt;\n</code></pre>\n\n<p>which will remove it from the current index (the \"about to be committed\" list) without changing anything else.</p>\n\n<p>You can use</p>\n\n<pre><code>git reset\n</code></pre>\n\n<p>without any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.</p>\n\n<p>In old versions of Git, the above commands are equivalent to <code>git reset HEAD &lt;file&gt;</code> and <code>git reset HEAD</code> respectively, and will fail if <code>HEAD</code> is undefined (because you haven\'t yet made any commits in your repo) or ambiguous (because you created a branch called <code>HEAD</code>, which is a stupid thing that you shouldn\'t do). This <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.2.txt#n179\">was changed in Git 1.8.2</a>, though, so in modern versions of Git you can use the commands above even prior to making your first commit:</p>\n\n<blockquote>\n  <p>\"git reset\" (without options or parameters) used to error out when\n     you do not have any commits in your history, but it now gives you\n     an empty index (to match non-existent commit you are not even on).</p>\n</blockquote>\n    </div>',1,1,6120,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(80,80,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.</p>\n\n<p>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>.</p>\n\n<p>This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running <code>git fetch</code> periodically in a cron job in the background (although I wouldn\'t recommend doing this).</p>\n\n<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>\n\n<p>Git documentation: <a href=\"http://git-scm.com/docs/git-pull\"><strong>git pull</strong></a></p>\n    </div>',1,1,6065,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(81,81,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before generators come <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, but <strong>you can only iterate over them once</strong>. It\'s because they do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>Yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it\'s a useless example, but it\'s handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will be run each time the <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it\'ll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\n\n<p>The generator is considered empty once the function runs but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>\"if/else\"</code> anymore.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p>Generator:</p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef node._get_child_candidates(self, distance, min_dist, max_dist):\n\n  # Here is the code that will be called each time you use the generator object:\n\n  # If there is still a child of the node object on its left\n  # AND if distance is ok, return the next child\n  if self._leftchild and distance - max_dist &lt; self._median:\n      yield self._leftchild\n\n  # If there is still a child of the node object on its right\n  # AND if distance is ok, return the next child\n  if self._rightchild and distance + max_dist &gt;= self._median:\n      yield self._rightchild\n\n  # If the function arrives here, the generator will be considered empty\n  # there is no more than two values: the left and the right children\n</code></pre>\n\n<p>Caller:</p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidates list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list but the list expands while the loop is being iterated :-) It\'s a concise way to go through all these nested data even if it\'s a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it\'s not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don\'t need to read the values twice.</li>\n<li>You may have a lot of children and you don\'t want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # let\'s create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # when everything\'s ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n[\'$100\', \'$100\', \'$100\', \'$100\', \'$100\']\n&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it\'s even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type \'exceptions.StopIteration\'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let\'s see the possible orders of arrival for a 4 horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>More about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\">how does the for loop work</a>.</p>\n    </div>',1,1,8856,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(82,82,'<div class=\"post-text\" itemprop=\"text\">\r\n<p>For JSON text:</p>\n\n<blockquote>\n  <p>The MIME media type for JSON text is <strong><code>application/json</code></strong>. The default encoding is UTF-8. (Source: <a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>).</p>\n</blockquote>\n\n<p>For <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> with callback:</p>\n\n<blockquote>\n  <p><strong><code>application/javascript</code></strong></p>\n</blockquote>\n\n<p>Here are some blog posts that were mentioned in the comments that are relevant.</p>\n\n<ul>\n<li><a href=\"http://jibbering.com/blog/?p=514\">Why you shouldn\'t use <code>text/html</code> for JSON</a></li>\n<li><a href=\"http://www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\">Internet Explorer sometimes has issues with <code>application/json</code></a></li>\n<li><a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\">A rather complete list of Mimetypes and what to use them for</a></li>\n</ul>\n    </div>',1,1,7719,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(83,83,'<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">branch prediction</a> fail.</strong></p>\n\n<hr>\n\n<h2>What is Branch Prediction?</h2>\n\n<p>Consider a railroad junction:</p>\n\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\"><img src=\"//i.stack.imgur.com/muxnt.jpg\" alt=\"\"></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\">CC-By-SA 3.0</a> license.</sub></p>\n\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>\n\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n\n<p>Is there a better way? You guess which direction the train will go!</p>\n\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n\n<hr>\n\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n\n<p><img src=\"//i.stack.imgur.com/pyfwC.png\" alt=\"enter image description here\"></p>\n\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".</em></p>\n\n<p>Is there a better way? You guess which direction the branch will go!</p>\n\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n\n<hr>\n\n<p>This is branch prediction. I admit it\'s not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn\'t know which direction a branch will go until the last moment.</p>\n\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...</p>\n\n<p><strong><em>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>\n\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">\"Branch predictor\" article on Wikipedia</a>.</p>\n\n<hr>\n\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>Notice that the data is evenly distributed between 0 and 255. \nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n\n<p><strong>Quick visualization:</strong></p>\n\n<pre><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n\n<p>However, when the data is completely random, the branch predictor is rendered useless because it can\'t predict random data.\nThus there will probably be around 50% misprediction. (no better than random guessing)</p>\n\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code></pre>\n\n<hr>\n\n<p><strong>So what can be done?</strong></p>\n\n<p>If the compiler isn\'t able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n\n<p>Replace:</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code></pre>\n\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it\'s valid for all the input values of <code>data[]</code>.)</sub></p>\n\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n\n<pre><code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code></pre>\n\n<p>Java - Netbeans 7.1.1 JDK 7 - x64</p>\n\n<pre><code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code></pre>\n\n<p>Observations:</p>\n\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)</p>\n\n<hr>\n\n<p><strong>Update :</strong></p>\n\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p></li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>\n<li><p>Intel Compiler 11 does something miraculous. It <a href=\"//en.wikipedia.org/wiki/Loop_interchange\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>\n<li><p>If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>\n</ul>\n\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n    </div>',1,1,22859,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(84,84,'<div class=\"post-text\" itemprop=\"text\">\r\n<h1>JavaScript Closures for Beginners</h1>\n\n<blockquote>Submitted by Morris on Tue, 2006-02-21 10:19.  Community-edited since.</blockquote>\n\n<h2>Closures Are Not Magic</h2>\n\n<p>This page explains closures so that a programmer can understand them — using working JavaScript code. It is not for gurus or functional programmers.</p>\n\n<p>Closures are <em>not hard</em> to understand once the core concept is grokked. However, they are impossible to understand by reading any academic papers or academically oriented information about them!</p>\n\n<p>This article is intended for programmers with some programming experience in a mainstream language, and who can read the following JavaScript function:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayHello(name) {\r\n  var text = \'Hello \' + name;\r\n  var say = function() { console.log(text); }\r\n  say();\r\n}\r\nsayHello(\'Joe\');</code></pre>\r\n</div>\r\n</div>\r\n\n\n<h2>An Example of a Closure</h2>\n\n<p>Two one sentence summaries:</p>\n\n<ul>\n<li>a closure is one way of supporting <a href=\"https://en.wikipedia.org/wiki/First-class_function\">first-class functions</a>; it is an expression that can reference variables within its scope (when it was first declared), be assigned to a variable, be passed as an argument to a function, or be returned as a function result. Or</li>\n<li>a closure is a stack frame which is allocated when a function starts its execution, and <em>not freed</em> after the function returns (as if a \'stack frame\' were allocated on the heap rather than the stack!).</li>\n</ul>\n\n<p>The following code returns a reference to a function:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayHello2(name) {\r\n  var text = \'Hello \' + name; // Local variable\r\n  var say = function() { console.log(text); }\r\n  return say;\r\n}\r\nvar say2 = sayHello2(\'Bob\');\r\nsay2(); // logs \"Hello Bob\"</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>Most JavaScript programmers will understand how a reference to a function is returned to a variable (<code>say2</code>) in the above code. If you don\'t, then you need to before you can learn closures. A programmer using C would think of the function as returning a pointer to a function, and that the variables <code>say</code> and <code>say2</code> were each a pointer to a function.</p>\n\n<p>There is a critical difference between a C pointer to a function and a JavaScript reference to a function. In JavaScript, you can think of a function reference variable as having both a pointer to a function <em>as well</em> as a hidden pointer to a closure.</p>\n\n<p>The above code has a closure because the anonymous function <code>function() { console.log(text); }</code> is declared <em>inside</em> another function, <code>sayHello2()</code> in this example. In JavaScript, if you use the <code>function</code> keyword inside another function, you are creating a closure.</p>\n\n<p>In C and most other common languages, <em>after</em> a function returns, all the local variables are no longer accessible because the stack-frame is destroyed.</p>\n\n<p>In JavaScript, if you declare a function within another function, then the local variables can remain accessible after returning from the function you called. This is demonstrated above, because we call the function <code>say2()</code> after we have returned from <code>sayHello2()</code>. Notice that the code that we call references the variable <code>text</code>, which was a <em>local variable</em> of the function <code>sayHello2()</code>.</p>\n\n<pre><code>function() { console.log(text); } // Output of say2.toString();\n</code></pre>\n\n<p>Looking at the output of <code>say2.toString()</code>, we can see that the code refers to the variable <code>text</code>. The anonymous function can reference <code>text</code> which holds the value <code>\'Hello Bob\'</code> because the local variables of <code>sayHello2()</code> are kept in a closure.</p>\n\n<p>The magic is that in JavaScript a function reference also has a secret reference to the closure it was created in — similar to how delegates are a method pointer plus a secret reference to an object.</p>\n\n<h2>More examples</h2>\n\n<p>For some reason, closures seem really hard to understand when you read about them, but when you see some examples you can click to how they work (it took me a while).\nI recommend working through the examples carefully until you understand how they work. If you start using closures without fully understanding how they work, you would soon create some very weird bugs!</p>\n\n<h3>Example 3</h3>\n\n<p>This example shows that the local variables are not copied — they are kept by reference. It is kind of like keeping a stack-frame in memory when the outer function exits!</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function say667() {\r\n  // Local variable that ends up within closure\r\n  var num = 42;\r\n  var say = function() { console.log(num); }\r\n  num++;\r\n  return say;\r\n}\r\nvar sayNumber = say667();\r\nsayNumber(); // logs 43</code></pre>\r\n</div>\r\n</div>\r\n\n\n<h3>Example 4</h3>\n\n<p>All three global functions have a common reference to the <em>same</em> closure because they are all declared within a single call to <code>setupSomeGlobals()</code>.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var gLogNumber, gIncreaseNumber, gSetNumber;\r\nfunction setupSomeGlobals() {\r\n  // Local variable that ends up within closure\r\n  var num = 42;\r\n  // Store some references to functions as global variables\r\n  gLogNumber = function() { console.log(num); }\r\n  gIncreaseNumber = function() { num++; }\r\n  gSetNumber = function(x) { num = x; }\r\n}\r\n\r\nsetupSomeGlobals();\r\ngIncreaseNumber();\r\ngLogNumber(); // 43\r\ngSetNumber(5);\r\ngLogNumber(); // 5\r\n\r\nvar oldLog = gLogNumber;\r\n\r\nsetupSomeGlobals();\r\ngLogNumber(); // 42\r\n\r\noldLog() // 5</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>The three functions have shared access to the same closure — the local variables of <code>setupSomeGlobals()</code> when the three functions were defined.</p>\n\n<p>Note that in the above example, if you call <code>setupSomeGlobals()</code> again, then a new closure (stack-frame!) is created. The old <code>gLogNumber</code>, <code>gIncreaseNumber</code>, <code>gSetNumber</code> variables are overwritten with <em>new</em> functions that have the new closure. (In JavaScript, whenever you declare a function inside another function, the inside function(s) is/are recreated again <em>each</em> time the outside function is called.)</p>\n\n<h3>Example 5</h3>\n\n<p>This one is a real gotcha for many people, so you need to understand it. Be very careful if you are defining a function within a loop: the local variables from the closure do not act as you might first think.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function buildList(list) {\r\n    var result = [];\r\n    for (var i = 0; i &lt; list.length; i++) {\r\n        var item = \'item\' + i;\r\n        result.push( function() {console.log(item + \' \' + list[i])} );\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction testList() {\r\n    var fnlist = buildList([1,2,3]);\r\n    // Using j only to help prevent confusion -- could use i.\r\n    for (var j = 0; j &lt; fnlist.length; j++) {\r\n        fnlist[j]();\r\n    }\r\n}\r\n\r\n testList() //logs \"item2 undefined\" 3 times</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>The line <code>result.push( function() {console.log(item + \' \' + list[i])}</code> adds a reference to an anonymous function three times to the result array. If you are not so familiar with anonymous functions think of it like:</p>\n\n<pre><code>pointer = function() {console.log(item + \' \' + list[i])};\nresult.push(pointer);\n</code></pre>\n\n<p>Note that when you run the example, <code>\"item2 undefined\"</code> is alerted three times! This is because just like previous examples, there is only one closure for the local variables for <code>buildList</code>. When the anonymous functions are called on the line <code>fnlist[j]()</code>; they all use the same single closure, and they use the current value for <code>i</code> and <code>item</code> within that one closure (where <code>i</code> has a value of <code>3</code> because the loop had completed, and <code>item</code> has a value of <code>\'item2\'</code>). Note we are indexing from 0 hence <code>item</code> has a value of <code>item2</code>. And the i++ will increment <code>i</code> to the value <code>3</code>.</p>\n\n<h3>Example 6</h3>\n\n<p>This example shows that the closure contains any local variables that were declared inside the outer function before it exited. Note that the variable <code>alice</code> is actually declared after the anonymous function. The anonymous function is declared first; and when that function is called it can access the <code>alice</code> variable because <code>alice</code> is in the same scope (JavaScript does <a href=\"http://stackoverflow.com/a/3725763/1269037\">variable hoisting</a>).\nAlso <code>sayAlice()()</code> just directly calls the function reference returned from <code>sayAlice()</code> — it is exactly the same as what was done previously, but without the temporary variable.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayAlice() {\r\n    var say = function() { console.log(alice); }\r\n    // Local variable that ends up within closure\r\n    var alice = \'Hello Alice\';\r\n    return say;\r\n}\r\nsayAlice()();// logs \"Hello Alice\"</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>Tricky: note also that the <code>say</code> variable is also inside the closure, and could be accessed by any other function that might be declared within <code>sayAlice()</code>, or it could be accessed recursively within the inside function.</p>\n\n<h3>Example 7</h3>\n\n<p>This final example shows that each call creates a separate closure for the local variables. There is <em>not</em> a single closure per function declaration. There is a closure for <em>each call</em> to a function.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function newClosure(someNum, someRef) {\r\n    // Local variables that end up within closure\r\n    var num = someNum;\r\n    var anArray = [1,2,3];\r\n    var ref = someRef;\r\n    return function(x) {\r\n        num += x;\r\n        anArray.push(num);\r\n        console.log(\'num: \' + num +\r\n            \'\\nanArray \' + anArray.toString() +\r\n            \'\\nref.someVar \' + ref.someVar);\r\n      }\r\n}\r\nobj = {someVar: 4};\r\nfn1 = newClosure(4, obj);\r\nfn2 = newClosure(5, obj);\r\nfn1(1); // num: 5; anArray: 1,2,3,5; ref.someVar: 4;\r\nfn2(1); // num: 6; anArray: 1,2,3,6; ref.someVar: 4;\r\nobj.someVar++;\r\nfn1(2); // num: 7; anArray: 1,2,3,5,7; ref.someVar: 5;\r\nfn2(2); // num: 8; anArray: 1,2,3,6,8; ref.someVar: 5;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<h2>Summary</h2>\n\n<p>If everything seems completely unclear then the best thing to do is to play with the examples. Reading an explanation is much harder than understanding examples.\nMy explanations of closures and stack-frames, etc. are not technically correct — they are gross simplifications intended to help understanding. Once the basic idea is grokked, you can pick up the details later.</p>\n\n<h2>Final points:</h2>\n\n<ul>\n<li>Whenever you use <code>function</code> inside another function, a closure is used.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and within <code>eval</code> you can even create new local variables by using <code>eval(\'var foo = …\')</code></li>\n<li>When you use <code>new Function(…)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function constructor</a>) inside a function, it does not create a closure. (The new function cannot reference the local variables of the outer function.)</li>\n<li>A closure in JavaScript is like keeping a copy of all the local variables, just as they were when a function exited.</li>\n<li>It is probably best to think that a closure is always created just an entry to a function, and the local variables are added to that closure.</li>\n<li>A new set of local variables is kept every time a function with a closure is called (given that the function contains a function declaration inside it, and a reference to that inside function is either returned or an external reference is kept for it in some way).</li>\n<li>Two functions might look like they have the same source text, but have completely different behaviour because of their \'hidden\' closure. I don\'t think JavaScript code can actually find out if a function reference has a closure or not.</li>\n<li>If you are trying to do any dynamic source code modifications (for example: <code>myFunction = Function(myFunction.toString().replace(/Hello/,\'Hola\'));</code>), it won\'t work if <code>myFunction</code> is a closure (of course, you would never even think of doing source code string substitution at runtime, but...).</li>\n<li>It is possible to get function declarations within function declarations within functions — and you can get closures at more than one level.</li>\n<li>I think normally a closure is the term for both the function along with the variables that are captured. Note that I do not use that definition in this article!</li>\n<li>I suspect that closures in JavaScript differ from those normally found in functional languages.</li>\n</ul>\n\n<h2>Links</h2>\n\n<ul>\n<li>Douglas Crockford\'s simulated <a href=\"http://www.crockford.com/javascript/private.html\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited\">cause memory leaks in IE</a> if you are not careful.</li>\n</ul>\n\n<h2>Thanks</h2>\n\n<p>If you have <em>just</em> learned closures (here or elsewhere!), then I am interested in any feedback from you about any changes you might suggest that could make this article clearer. Send an email to morrisjohns.com (morris_closure @). Please note that I am not a guru on JavaScript — nor on closures.</p>\n\n<hr>\n\n<p>Original post by Morris can be found in the <a href=\"http://web.archive.org/web/20080209105120/http:/blog.morrisjohns.com/javascript_closures_for_dummies\">Internet Archive</a>.</p>\n    </div>',1,1,4090,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(85,85,'<div class=\"post-text\" itemprop=\"text\">\r\n<h3>Undo a commit and redo</h3>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n&lt;&lt; edit files as necessary &gt;&gt;                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)\n</code></pre>\n\n<ol>\n<li>This is what you want to undo</li>\n<li>This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they\'ll appear as \"Changes not staged for commit\" in <code>git status</code> and you\'ll need to add them again before committing). If you <em>only</em> want to <em>add</em> more changes to the previous commit, or change the commit message<sup>1</sup>, you could use <code>git reset --soft HEAD~</code> instead, which is like <code>git reset HEAD~</code> but leaves your existing changes staged.</li>\n<li>Make corrections to working tree files.</li>\n<li><code>git add</code> anything that you want to include in your new commit.</li>\n<li>Commit the changes, reusing the old commit message. <code>reset</code> copied the old head to <code>.git/ORIG_HEAD</code>; <code>commit</code> with <code>-c ORIG_HEAD</code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the <code>-C</code> option.</li>\n</ol>\n\n<hr>\n\n<p><sup>1</sup> Note, however, that you don\'t need to reset to an earlier commit if you just made a mistake in your <em>commit message</em>. The easier option is to <code>git reset</code> (to unstage any changes you\'ve made since) and then <a href=\"http://stackoverflow.com/q/179123/1146608\"><code>git commit --amend</code></a>, which will open your default commit message editor pre-populated with the last commit message. </p>\n\n<p>Beware however that if you have added any new changes to the index, using <code>commit --amend</code> will add them to your previous commit.</p>\n    </div>',1,1,13227,'2017-01-27 04:45:12','2017-01-27 04:45:12'),(86,86,'<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Executive Summary</h2>\n\n<pre><code>$ git push origin --delete &lt;branch_name&gt;\n$ git branch -d &lt;branch_name&gt;\n</code></pre>\n\n<h2>Delete Local Branch</h2>\n\n<p>To delete the <em>local</em> branch use:</p>\n\n<pre><code>$ git branch -d branch_name\n</code></pre>\n\n<p><strong>Note:</strong> The <code>-d</code> option is an alias for <code>--delete</code>, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use <code>-D</code>, which is an alias for <code>--delete --force</code>, which deletes the branch \"irrespective of its merged status.\" [Source: <code>man git-branch</code>] </p>\n\n<h2>Delete Remote Branch [Updated on 1-Feb-2012]</h2>\n\n<p>As of <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\">Git v1.7.0</a>, you can delete a <strong><em>remote</em></strong> branch using</p>\n\n<pre><code>$ git push origin --delete &lt;branch_name&gt;\n</code></pre>\n\n<p>which might be easier to remember than</p>\n\n<pre><code>$ git push origin :&lt;branch_name&gt;\n</code></pre>\n\n<p>which was added in <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\">Git v1.5.0</a> \"to delete a remote branch or a tag.\"</p>\n\n<p>Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.</p>\n\n<h2>Delete Remote Branch [Original Answer from 5-Jan-2010]</h2>\n\n<p>From Chapter 3 of <a href=\"http://git-scm.com/book/en/Git-Branching-Remote-Branches\"><em>Pro Git</em></a> by Scott Chacon:</p>\n\n<blockquote>\n  <h3>Deleting Remote Branches</h3>\n  \n  <p>Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the rather obtuse syntax <code>git push [remotename] :[branch]</code>. If you want to delete your serverfix branch from the server, you run the following:</p>\n\n<pre><code>$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n</code></pre>\n  \n  <p>Boom. No more branch on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the <code>git push [remotename] [localbranch]:[remotebranch]</code> syntax that we went over a bit earlier. If you leave off the <code>[localbranch]</code> portion, then you’re basically saying, “Take nothing on my side and make it be <code>[remotebranch]</code>.”</p>\n</blockquote>\n\n<p>I issued <code>git push origin :bugfix</code> and it worked beautifully. Scott Chacon was right—I will want to <a href=\"http://en.wiktionary.org/wiki/dogear#Verb\">dog ear</a> that page (or virtually dog ear by answering this on Stack Overflow).</p>\n\n<p>Then you should execute this on other machines</p>\n\n<pre><code>git fetch --all --prune\n</code></pre>\n\n<p>to propagate changes.</p>\n    </div>',1,1,11251,'2017-01-27 04:45:12','2017-01-27 04:45:12'),(87,87,'<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Amending the most recent commit message</h1>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend\n</code></pre>\n\n<p>Will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>git commit --amend -m \"New commit message\"\n</code></pre>\n\n<p>…however, this can make multi-line commit messages or small corrections more cumbersome to enter.</p>\n\n<p>Make sure you don\'t have any working copy changes <em>staged</em> before doing this or they will get committed too. (<em>Unstaged</em> changes will not get committed.)</p>\n\n<h2>Changing the message of a commit that you\'ve already pushed to your remote branch</h2>\n\n<p>If you\'ve already pushed your commit up to your remote branch, then you\'ll <a href=\"http://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message\">need to force push the commit</a> with </p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>git push &lt;remote&gt; &lt;branch&gt; --force\n# Or\ngit push &lt;remote&gt; &lt;branch&gt; -f\n</code></pre>\n\n<p><strong>Warning: force-pushing will overwrite the remote branch with the state of your local one</strong>. If there are commits on the remote branch that you don\'t have in your local branch, you <em>will</em> lose those commits.</p>\n\n<p><strong>Warning: be cautious about amending commits that you have already shared with other people.</strong> Amending commits essentially <em>rewrites</em> them to have different <a href=\"http://en.wikipedia.org/wiki/SHA-1\">SHA</a> IDs, which poses a problem if other people have copies of the old commit that you\'ve rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</p>\n\n<hr>\n\n<h3>Use interactive rebase</h3>\n\n<p>Another option is to use interactive rebase.<br>\nThis allow you to edit any message you want to update even if its not the latest message </p>\n\n<p>In order to do a git squash follow those steps:</p>\n\n<pre><code>// X is the number of commits to the last commit you want to be able to edit\ngit rebase -i HEAD~X\n</code></pre>\n\n<p>Once you squash your commits - choose the <code>e/r</code> for editing the message</p>\n\n<p><a href=\"https://i.stack.imgur.com/LVcm9.png\"><img src=\"https://i.stack.imgur.com/LVcm9.png\" alt=\"enter image description here\"></a></p>\n\n<h2>Documentation</h2>\n\n<ul>\n<li><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-commit.html\">git-commit(1) Manual Page</a></li>\n</ul>\n    </div>',1,1,12758,'2017-01-27 04:45:12','2017-01-27 04:45:12');
/*!40000 ALTER TABLE `answers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cat_question`
--

DROP TABLE IF EXISTS `cat_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cat_question` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cat_id` int(10) unsigned NOT NULL COMMENT '类别id',
  `question_id` int(10) unsigned NOT NULL COMMENT '问题id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `cat_question_cat_id_index` (`cat_id`),
  KEY `cat_question_question_id_index` (`question_id`),
  CONSTRAINT `cat_question_cat_id_foreign` FOREIGN KEY (`cat_id`) REFERENCES `cats` (`id`) ON DELETE CASCADE,
  CONSTRAINT `cat_question_question_id_foreign` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=147 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cat_question`
--

LOCK TABLES `cat_question` WRITE;
/*!40000 ALTER TABLE `cat_question` DISABLE KEYS */;
INSERT INTO `cat_question` VALUES (1,11,1,NULL,NULL),(2,12,1,NULL,NULL),(3,9,2,NULL,NULL),(4,11,3,NULL,NULL),(5,12,3,NULL,NULL),(6,11,4,NULL,NULL),(7,12,4,NULL,NULL),(8,11,5,NULL,NULL),(9,12,5,NULL,NULL),(10,9,6,NULL,NULL),(11,11,7,NULL,NULL),(12,12,7,NULL,NULL),(13,11,8,NULL,NULL),(14,12,8,NULL,NULL),(15,9,9,NULL,NULL),(16,11,10,NULL,NULL),(17,12,10,NULL,NULL),(18,11,11,NULL,NULL),(19,12,11,NULL,NULL),(20,8,12,NULL,NULL),(21,11,13,NULL,NULL),(22,12,13,NULL,NULL),(23,11,14,NULL,NULL),(24,12,14,NULL,NULL),(25,9,15,NULL,NULL),(26,11,16,NULL,NULL),(27,12,16,NULL,NULL),(28,11,17,NULL,NULL),(29,12,17,NULL,NULL),(30,11,18,NULL,NULL),(31,12,18,NULL,NULL),(32,11,19,NULL,NULL),(33,12,19,NULL,NULL),(34,9,20,NULL,NULL),(35,11,21,NULL,NULL),(36,12,21,NULL,NULL),(37,11,22,NULL,NULL),(38,12,22,NULL,NULL),(39,9,23,NULL,NULL),(40,8,24,NULL,NULL),(41,9,25,NULL,NULL),(42,11,26,NULL,NULL),(43,12,26,NULL,NULL),(44,11,27,NULL,NULL),(45,12,27,NULL,NULL),(46,9,28,NULL,NULL),(47,11,29,NULL,NULL),(48,12,29,NULL,NULL),(49,11,30,NULL,NULL),(50,12,30,NULL,NULL),(51,11,31,NULL,NULL),(52,12,31,NULL,NULL),(53,9,32,NULL,NULL),(54,11,33,NULL,NULL),(55,12,33,NULL,NULL),(56,11,34,NULL,NULL),(57,12,34,NULL,NULL),(58,11,35,NULL,NULL),(59,12,35,NULL,NULL),(60,8,36,NULL,NULL),(61,11,37,NULL,NULL),(62,12,37,NULL,NULL),(63,11,38,NULL,NULL),(64,12,38,NULL,NULL),(65,11,39,NULL,NULL),(66,12,39,NULL,NULL),(67,11,40,NULL,NULL),(68,12,40,NULL,NULL),(69,9,41,NULL,NULL),(70,9,42,NULL,NULL),(71,11,43,NULL,NULL),(72,12,43,NULL,NULL),(73,11,44,NULL,NULL),(74,12,44,NULL,NULL),(75,11,45,NULL,NULL),(76,12,45,NULL,NULL),(77,11,46,NULL,NULL),(78,12,46,NULL,NULL),(79,9,47,NULL,NULL),(80,11,48,NULL,NULL),(81,12,48,NULL,NULL),(82,9,49,NULL,NULL),(83,11,50,NULL,NULL),(84,12,50,NULL,NULL),(85,11,51,NULL,NULL),(86,12,51,NULL,NULL),(87,11,52,NULL,NULL),(88,12,52,NULL,NULL),(89,9,53,NULL,NULL),(90,11,54,NULL,NULL),(91,12,54,NULL,NULL),(92,11,55,NULL,NULL),(93,12,55,NULL,NULL),(94,11,56,NULL,NULL),(95,12,56,NULL,NULL),(96,11,57,NULL,NULL),(97,12,57,NULL,NULL),(98,11,58,NULL,NULL),(99,12,58,NULL,NULL),(100,9,59,NULL,NULL),(101,11,60,NULL,NULL),(102,12,60,NULL,NULL),(103,9,61,NULL,NULL),(104,11,62,NULL,NULL),(105,12,62,NULL,NULL),(106,11,63,NULL,NULL),(107,12,63,NULL,NULL),(108,11,64,NULL,NULL),(109,12,64,NULL,NULL),(110,11,65,NULL,NULL),(111,12,65,NULL,NULL),(112,11,66,NULL,NULL),(113,12,66,NULL,NULL),(114,9,67,NULL,NULL),(115,11,68,NULL,NULL),(116,12,68,NULL,NULL),(117,9,69,NULL,NULL),(118,11,70,NULL,NULL),(119,12,70,NULL,NULL),(120,11,71,NULL,NULL),(121,12,71,NULL,NULL),(122,9,72,NULL,NULL),(123,9,73,NULL,NULL),(124,11,74,NULL,NULL),(125,12,74,NULL,NULL),(126,11,75,NULL,NULL),(127,12,75,NULL,NULL),(128,9,76,NULL,NULL),(129,11,77,NULL,NULL),(130,12,77,NULL,NULL),(131,9,78,NULL,NULL),(132,11,79,NULL,NULL),(133,12,79,NULL,NULL),(134,11,80,NULL,NULL),(135,12,80,NULL,NULL),(136,11,81,NULL,NULL),(137,12,81,NULL,NULL),(138,9,82,NULL,NULL),(139,10,83,NULL,NULL),(140,9,84,NULL,NULL),(141,11,85,NULL,NULL),(142,12,85,NULL,NULL),(143,11,86,NULL,NULL),(144,12,86,NULL,NULL),(145,11,87,NULL,NULL),(146,12,87,NULL,NULL);
/*!40000 ALTER TABLE `cat_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cat_tag`
--

DROP TABLE IF EXISTS `cat_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cat_tag` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cat_id` int(10) unsigned NOT NULL COMMENT '类别id',
  `tag_id` int(10) unsigned NOT NULL COMMENT '标签id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `cat_tag_cat_id_index` (`cat_id`),
  KEY `cat_tag_tag_id_index` (`tag_id`),
  CONSTRAINT `cat_tag_cat_id_foreign` FOREIGN KEY (`cat_id`) REFERENCES `cats` (`id`) ON DELETE CASCADE,
  CONSTRAINT `cat_tag_tag_id_foreign` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cat_tag`
--

LOCK TABLES `cat_tag` WRITE;
/*!40000 ALTER TABLE `cat_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `cat_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cats`
--

DROP TABLE IF EXISTS `cats`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cats` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '类别id',
  `name` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '类别名称',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cats`
--

LOCK TABLES `cats` WRITE;
/*!40000 ALTER TABLE `cats` DISABLE KEYS */;
INSERT INTO `cats` VALUES (8,'Android','2017-01-16 13:07:26','2017-01-16 13:07:26'),(9,'前端','2017-01-16 13:07:26','2017-01-16 13:07:26'),(10,'IOS','2017-01-16 13:07:26','2017-01-16 13:07:26'),(11,'后台','2017-01-16 13:07:26','2017-01-16 13:07:26'),(12,'产品','2017-01-16 13:07:26','2017-01-16 13:07:26'),(13,'需求','2017-01-16 13:07:26','2017-01-16 13:07:26'),(14,'设计','2017-01-16 13:07:26','2017-01-16 13:07:26');
/*!40000 ALTER TABLE `cats` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '评论内容',
  `user_id` int(10) unsigned NOT NULL COMMENT '评论用户id',
  `answer_id` int(10) unsigned NOT NULL COMMENT '回答id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `comments_answer_id_foreign` (`answer_id`),
  KEY `comments_user_id_foreign` (`user_id`),
  CONSTRAINT `comments_answer_id_foreign` FOREIGN KEY (`answer_id`) REFERENCES `answers` (`id`) ON DELETE CASCADE,
  CONSTRAINT `comments_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permission_role`
--

DROP TABLE IF EXISTS `permission_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `permission_role` (
  `permission_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`permission_id`,`role_id`),
  KEY `permission_role_role_id_foreign` (`role_id`),
  CONSTRAINT `permission_role_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `permission_role_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permission_role`
--

LOCK TABLES `permission_role` WRITE;
/*!40000 ALTER TABLE `permission_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `permission_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permissions`
--

DROP TABLE IF EXISTS `permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `permissions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `permissions_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permissions`
--

LOCK TABLES `permissions` WRITE;
/*!40000 ALTER TABLE `permissions` DISABLE KEYS */;
INSERT INTO `permissions` VALUES (1,'role-list','展示角色列表','查看列表_角色','2017-01-22 06:52:57','2017-01-22 06:52:57'),(2,'role-create','创建角色','创建新角色','2017-01-22 06:52:57','2017-01-22 06:52:57'),(3,'role-edit','编辑角色','编辑角色','2017-01-22 06:52:57','2017-01-22 06:52:57'),(4,'role-delete','删除角色','删除角色','2017-01-22 06:52:57','2017-01-22 06:52:57'),(5,'question-list','展示问题列表','查看列表_问题','2017-01-22 06:52:57','2017-01-22 06:52:57'),(6,'question-create','创建问题','创建新问题','2017-01-22 06:52:57','2017-01-22 06:52:57'),(7,'question-edit','编辑问题','编辑问题','2017-01-22 06:52:57','2017-01-22 06:52:57'),(8,'question-delete','删除问题','删除问题','2017-01-22 06:52:57','2017-01-22 06:52:57'),(9,'tag-list','展示标签列表','查看列表_标签','2017-01-22 06:52:57','2017-01-22 06:52:57'),(10,'tag-create','创建标签','创建新标签','2017-01-22 06:52:57','2017-01-22 06:52:57'),(11,'tag-edit','编辑标签','编辑标签','2017-01-22 06:52:57','2017-01-22 06:52:57'),(12,'tag-delete','删除标签','删除标签','2017-01-22 06:52:57','2017-01-22 06:52:57'),(13,'user-list','展示用户列表','查看列表_用户','2017-01-22 06:52:57','2017-01-22 06:52:57'),(14,'user-create','创建用户','创建新用户','2017-01-22 06:52:57','2017-01-22 06:52:57'),(15,'user-edit','编辑用户','编辑用户','2017-01-22 06:52:57','2017-01-22 06:52:57'),(16,'user-delete','删除用户','删除用户','2017-01-22 06:52:57','2017-01-22 06:52:57'),(17,'cat-list','展示分类列表','查看列表_分类','2017-01-22 06:52:57','2017-01-22 06:52:57'),(18,'cat-create','创建分类','创建新分类','2017-01-22 06:52:57','2017-01-22 06:52:57'),(19,'cat-edit','编辑分类','编辑分类','2017-01-22 06:52:57','2017-01-22 06:52:57'),(20,'cat-delete','删除分类','删除分类','2017-01-22 06:52:57','2017-01-22 06:52:57'),(21,'comment-list','展示评论列表','查看列表_评论','2017-01-22 06:52:57','2017-01-22 06:52:57'),(22,'comment-create','创建评论','创建新评论','2017-01-22 06:52:57','2017-01-22 06:52:57'),(23,'comment-edit','编辑评论','编辑评论','2017-01-22 06:52:57','2017-01-22 06:52:57'),(24,'comment-delete','删除评论','删除评论','2017-01-22 06:52:57','2017-01-22 06:52:57'),(25,'permission-list','展示权限列表','查看列表_权限','2017-01-22 06:52:57','2017-01-22 06:52:57'),(26,'permission-create','创建权限','创建新权限','2017-01-22 06:52:57','2017-01-22 06:52:57'),(27,'permission-edit','编辑权限','编辑权限','2017-01-22 06:52:57','2017-01-22 06:52:57'),(28,'permission-delete','删除权限','删除权限','2017-01-22 06:52:57','2017-01-22 06:52:57'),(29,'answer-list','展示回答列表','查看列表_回答','2017-01-22 06:52:57','2017-01-22 06:52:57'),(30,'answer-create','创建回答','创建新回答','2017-01-22 06:52:57','2017-01-22 06:52:57'),(31,'answer-edit','编辑回答','编辑回答','2017-01-22 06:52:57','2017-01-22 06:52:57'),(32,'answer-delete','删除回答','删除回答','2017-01-22 06:52:57','2017-01-22 06:52:57');
/*!40000 ALTER TABLE `permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `questions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reprint_link` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '转载地址url',
  `title` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '问题标题',
  `user_id` int(10) unsigned NOT NULL COMMENT '提问用户',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '问题内容',
  `votes` bigint(20) NOT NULL COMMENT '问题投票',
  `clickcount` int(10) NOT NULL DEFAULT '0' COMMENT '问题浏览次数',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `questions_user_id_foreign` (`user_id`),
  CONSTRAINT `questions_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` VALUES (1,'http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers','What is the maximum length of a URL in different browsers?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the maximum length of a URL in different browsers? Does it differ among browsers? </p>\n\n<p>Does the HTTP protocol dictate it?</p>\n    </div>',3300,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(2,'http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript','What is the most efficient way to deep clone an object in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most efficient way to clone a JavaScript object? I\'ve seen <code>obj = eval(uneval(o));</code> being used, but <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\">that\'s non-standard and only supported by Firefox</a>. I\'ve done things like <code>obj = JSON.parse(JSON.stringify(o));</code> but question the efficiency. I\'ve also seen recursive copying functions with various flaws.</p>\n\n<p>I\'m surprised no canonical solution exists.</p>\n    </div>',3439,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(3,'http://stackoverflow.com/questions/38549/what-is-the-difference-between-inner-join-and-outer-join','What is the difference between &quot;INNER JOIN&quot; and &quot;OUTER JOIN&quot;?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Also how do <code>LEFT JOIN</code>, <code>RIGHT JOIN</code> and <code>FULL JOIN</code> fit in?</p>\n    </div>',3204,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(4,'http://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files','How do I force &quot;git pull&quot; to overwrite local files?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I force an overwrite of local files on a <code>git pull</code>?</p>\n\n<p>The scenario is following:</p>\n\n<ul>\n<li>A team member is modifying the templates for a website we are working on</li>\n<li>They are adding some images to the images directory (but forgets to add them under source control)</li>\n<li>They are sending the images by mail, later, to me</li>\n<li>I\'m adding the images under the source control and pushing them to GitHub together with other changes</li>\n<li>They cannot pull updates from GitHub because Git doesn\'t want to overwrite their files.</li>\n</ul>\n\n<p>The errors I\'m getting are:</p>\n\n<blockquote>\n  <p>error: Untracked working tree file \'public/images/icon.gif\' would be overwritten by merge.</p>\n</blockquote>\n\n<p>How do I force Git to overwrite them? The person is a designer - usually I resolve all the conflicts by hand, so the server has the most recent version that they just needs to update on their computer.</p>\n    </div>',3485,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(5,'http://stackoverflow.com/questions/630453/put-vs-post-in-rest','PUT vs POST in REST',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>According to the HTTP/1.1 Spec: </p>\n\n<blockquote>\n  <p>The <strong><code>POST</code></strong> method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the <code>Request-URI</code> in the <code>Request-Line</code></p>\n</blockquote>\n\n<p>In other words, <code>POST</code> is used to <strong>create</strong>.</p>\n\n<blockquote>\n  <p>The <strong><code>PUT</code></strong> method requests that the enclosed entity be stored under the supplied <code>Request-URI</code>. If the <code>Request-URI</code> refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the <code>Request-URI</code> does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\"</p>\n</blockquote>\n\n<p>That is, <code>PUT</code> is used to <strong>create or update</strong>.</p>\n\n<p>So, which one should be used to create a resource? Or one needs to support both?</p>\n    </div>',3325,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(6,'http://stackoverflow.com/questions/208105/how-to-remove-a-property-from-a-javascript-object','How to remove a property from a JavaScript object?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Say I create an object as follows: </p>\n\n<pre><code>var myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n</code></pre>\n\n<p>What is the best way to remove the property <code>regex</code> to end up with new <code>myObject</code> as follows?</p>\n\n<pre><code>var myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\"\n};\n</code></pre>\n    </div>',3521,0,'2017-01-27 04:45:04','2017-01-27 04:45:04'),(7,'http://stackoverflow.com/questions/1783405/how-to-check-out-a-remote-git-branch','How to check out a remote Git branch?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Somebody pushed a branch called <code>test</code> with <code>git push origin test</code> to a shared repository. I can see the branch with <code>git branch -r</code>.</p>\n\n<p>Now I\'m trying to check out the remote <code>test</code> branch.</p>\n\n<p>I\'ve tried:</p>\n\n<ul>\n<li><p><code>git checkout test</code> which does nothing</p></li>\n<li><p><code>git checkout origin/test</code> gives <code>* (no branch)</code>. Which is confusing. How can I be on \"no branch\"?</p></li>\n</ul>\n\n<p>How do I check out a remote git branch?</p>\n    </div>',3700,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(8,'http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python','What is a metaclass in Python?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are metaclasses? What do you use them for?</p>\n    </div>',3418,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(9,'http://stackoverflow.com/questions/5767325/how-to-remove-a-particular-element-from-an-array-in-javascript','How to remove a particular element from an array in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an array of integers, which I\'m using the <code>.push()</code> method to add to.</p>\n\n<p>Is there a simple way to remove a specific element from an array? The equivalent of something like <code>array.remove(int);</code>.</p>\n\n<p>I have to use <em>core</em> JavaScript - <em>no</em> frameworks are allowed.</p>\n    </div>',3813,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(10,'http://stackoverflow.com/questions/7074/what-is-the-difference-between-string-and-string-in-c','What is the difference between String and string in C#?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Example (<em>note the case</em>):</p>\n\n<pre><code>string s = \"Hello world!\";\nString S = \"Hello world!\";\n</code></pre>\n\n<p>What are the guidelines for the use of each? And what are the differences?</p>\n    </div>',4017,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(11,'http://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation','What is a plain English explanation of &quot;Big O&quot; notation?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'d prefer as little formal definition as possible and simple mathematics.</p>\n    </div>',3811,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(12,'http://stackoverflow.com/questions/2025282/what-is-the-difference-between-px-dp-dip-and-sp-on-android','What is the difference between &quot;px&quot;, &quot;dp&quot;, &quot;dip&quot; and &quot;sp&quot; on Android?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between:</p>\n\n<ul>\n<li><code>px</code></li>\n<li><code>dip</code></li>\n<li><code>dp</code></li>\n<li><code>sp</code></li>\n</ul>\n\n<p>on Android?</p>\n    </div>',4086,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(13,'http://stackoverflow.com/questions/2432764/change-the-uri-url-for-a-remote-git-repository','Change the URI (URL) for a remote Git repository',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a repo (origin) on a USB key that I cloned on my hard drive (local). I moved \"origin\" to a NAS and successfully tested cloning it from here.</p>\n\n<p>I would like to know if I can change the URI of \"origin\" in the settings of \"local\" so it will now pull from the NAS, and not from the USB key.</p>\n\n<p>For now, I can see two solutions:</p>\n\n<ul>\n<li><p>push everything to the usb-orign, and copy it to the NAS again (implies a lot of work due to new commits to nas-origin);</p></li>\n<li><p>add a new remote to \"local\" and delete the old one (I fear I\'ll break my history).</p></li>\n</ul>\n    </div>',2119,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(14,'http://stackoverflow.com/questions/1066589/iterate-through-a-hashmap','Iterate through a HashMap',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/46898/how-do-i-iterate-over-each-entry-in-a-collection-map\">How do I iterate over each Entry in a Collection Map?</a>  </p>\n</blockquote>\n\n\n\n<p>What\'s the best way to iterate over the items in a <code>HashMap</code>?</p>\n    </div>',2186,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(15,'http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false','event.preventDefault() vs. return false',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I\'ll use jQuery in the examples, but this applies to plain-JS as well:</p>\n\n<h3>1. <code>event.preventDefault()</code></h3>\n\n<pre><code>$(\'a\').click(function (e) {\n    // custom handling here\n    e.preventDefault();\n});\n</code></pre>\n\n<h3>2. <code>return false</code></h3>\n\n<pre><code>$(\'a\').click(function () {\n    // custom handling here\n    return false;\n});\n</code></pre>\n\n<p>Is there any significant difference between those two methods of stopping event propagation?</p>\n\n<p>For me, <code>return false;</code> is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc. </p>\n\n<p>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use <code>preventDefault</code> instead? What\'s the better way?</p>\n    </div>',2202,0,'2017-01-27 04:45:05','2017-01-27 04:45:05'),(16,'http://stackoverflow.com/questions/2334712/update-from-select-using-sql-server','UPDATE from SELECT using SQL Server',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In SQL Server, it\'s possible to <em>insert</em> into a table using a <code>SELECT</code> statement:</p>\n\n<pre><code>INSERT INTO Table (col, col2, col3)\n    SELECT col, col2, col3 FROM other_table WHERE sql = \'cool\'\n</code></pre>\n\n<p>Is it also possible to <em>update</em> via a <code>SELECT</code>? I have a temporary table containing the values, and would like to update another table using those values. Perhaps something like this:</p>\n\n<pre><code>UPDATE Table SET col1, col2\n    SELECT col1, col2 FROM other_table WHERE sql = \'cool\'\n    WHERE Table.id = other_table.id\n</code></pre>\n    </div>',2218,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(17,'http://stackoverflow.com/questions/157944/create-arraylist-from-array','Create ArrayList from array',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an array that is initialized like:</p>\n\n<pre><code>Element[] array = {new Element(1), new Element(2), new Element(3)};\n</code></pre>\n\n<p>I would like to convert this array into an object of the ArrayList class.</p>\n\n<pre><code>ArrayList&lt;Element&gt; arraylist = ???;\n</code></pre>\n    </div>',2225,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(18,'http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords','Why is char[] preferred over String for passwords?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Swing, the password field has a <code>getPassword()</code> (returns <code>char[]</code>) method instead of the usual <code>getText()</code> (returns <code>String</code>) method. Similarly, I have come across a suggestion not to use <code>String</code> to handle passwords.</p>\n\n<p>Why does <code>String</code> pose a threat to security when it comes to passwords?\nIt feels inconvenient to use <code>char[]</code>.</p>\n    </div>',2250,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(19,'http://stackoverflow.com/questions/59838/check-if-a-directory-exists-in-a-shell-script','Check if a directory exists in a shell script',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What command can be used to check if a directory exists or not, within a shell script?</p>\n    </div>',2267,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(20,'http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply','What is the difference between call and apply?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between using call and apply to invoke a function?</p>\n\n<pre><code>var func = function(){\n  alert(\'hello!\');\n};\n</code></pre>\n\n<p><code>func.apply();</code></p>\n\n<p>vs</p>\n\n<pre><code>func.call();\n</code></pre>\n\n<p>Are there performance differences between the two methods? When is it best to use call over apply and vice versa?</p>\n    </div>',2270,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(21,'http://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet','Undo a Git merge that hasn&#39;t been pushed yet',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Within my master branch, I did a <code>git merge some-other-branch</code> locally, but never pushed the changes to origin master. I didn\'t mean to merge, so I\'d like to undo it. When doing a <code>git status</code> after my merge, I was getting this message:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of \'origin/master\' by 4 commits.\n</code></pre>\n\n<p>Based upon some <a href=\"http://www.gitready.com/intermediate/2009/03/16/rolling-back-changes-with-revert.html\">instructions I found</a>, I tried running</p>\n\n<pre><code>git revert HEAD -m 1\n</code></pre>\n\n<p>but now I\'m getting this message with <code>git status</code>:</p>\n\n<pre><code># On branch master\n# Your branch is ahead of \'origin/master\' by 5 commits.\n</code></pre>\n\n<p>I don\'t want my branch to be ahead by any number of commits. How do I get back to that point?</p>\n    </div>',2283,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(22,'http://stackoverflow.com/questions/215718/reset-or-revert-a-specific-file-to-a-specific-revision-using-git','Reset or revert a specific file to a specific revision using Git?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have made some changes to a file which has been committed a few times as part of a group of files, but now want to reset/revert the changes on it back to a previous version. </p>\n\n<p>I have done a <code>git log</code> along with a <code>git diff</code> to find the revision I need, but just have no idea how to get the file back to its former state in the past.</p>\n    </div>',2404,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(23,'http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript','Create GUID / UUID in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'m trying to create globally-unique identifiers in JavaScript.  I\'m not sure what routines are available on all browsers, how \"random\" and seeded the built-in random number generator is, etc..</p>\n\n<p>The GUID / UUID should be at least 32 characters and should stay in the ASCII range to avoid trouble when passing them around.</p>\n    </div>',2405,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(24,'http://stackoverflow.com/questions/1109022/close-hide-the-android-soft-keyboard','Close/hide the Android Soft Keyboard',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an <code>EditText</code> and a <code>Button</code> in my layout.</p>\n\n<p>After writing in the edit field and clicking on the <code>Button</code>, I want to hide the virtual keyboard. I assume that there\'s a simple, one or two-liner to make this happen. </p>\n\n<p>Where can I find an example of it?</p>\n    </div>',2320,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(25,'http://stackoverflow.com/questions/237104/how-do-i-check-if-an-array-includes-an-object-in-javascript','How do I check if an array includes an object in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most concise and efficient way to find out if a JavaScript array contains an object?</p>\n\n<p>This is the only way I know to do it:</p>\n\n<pre><code>function contains(a, obj) {\n    for (var i = 0; i &lt; a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Is there a better and more concise way to accomplish this?</p>\n\n<p>This is very closely related to Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\">Best way to find an item in a JavaScript Array?</a></em> which addresses finding objects in an array using <code>indexOf</code>.</p>\n    </div>',2425,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(26,'http://stackoverflow.com/questions/339923/set-cellpadding-and-cellspacing-in-css','Set cellpadding and cellspacing in CSS?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In an HTML table, the <code>cellpadding</code> and <code>cellspacing</code> can be set like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table cellspacing=\"1\" cellpadding=\"1\"&gt;\n</code></pre>\n\n<p>How can the same be accomplished using CSS?</p>\n    </div>',2433,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(27,'http://stackoverflow.com/questions/419163/what-does-if-name-main-do','What does if __name__ == &quot;__main__&quot;: do?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What does the <code>if __name__ == \"__main__\":</code> do?</p>\n\n<pre><code># Threading example\nimport time, thread\n\ndef myfunction(string, sleeptime, lock, *args):\n    while 1:\n        lock.acquire()\n        time.sleep(sleeptime)\n        lock.release()\n        time.sleep(sleeptime)\nif __name__ == \"__main__\":\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))\n    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\n</code></pre>\n    </div>',2438,0,'2017-01-27 04:45:06','2017-01-27 04:45:06'),(28,'http://stackoverflow.com/questions/46155/validate-email-address-in-javascript','Validate email address in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can an email address be validated in JavaScript?</p>\n    </div>',2250,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(29,'http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable','Differences between HashMap and Hashtable?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the differences between a <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/HashMap.html\"><code>HashMap</code></a> and a <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/Hashtable.html\"><code>Hashtable</code></a> in Java?</p>\n\n<p>Which is more efficient for non-threaded applications?</p>\n    </div>',2437,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(30,'http://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule','How do I remove a submodule?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I remove a Git submodule?</p>\n\n<p>By the way, is there a reason I can\'t simply do </p>\n\n<pre><code>git submodule rm whatever\n</code></pre>\n\n<p>?</p>\n    </div>',2502,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(31,'http://stackoverflow.com/questions/89228/calling-an-external-command-in-python','Calling an external command in Python',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I call an external command (as if I\'d typed it at the Unix shell or Windows command prompt) from within a Python script?</p>\n    </div>',2505,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(32,'http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses','Why does Google prepend while(1); to their JSON responses?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Why does Google prepend <code>while(1);</code> to their (private) JSON responses?</p>\n\n<p>For example, here\'s a response while turning a calendar on and off in <a href=\"http://en.wikipedia.org/wiki/Google_Calendar\">Google Calendar</a>:</p>\n\n<pre><code>while(1);[[\'u\',[[\'smsSentFlag\',\'false\'],[\'hideInvitations\',\'false\'],\n  [\'remindOnRespondedEventsOnly\',\'true\'],\n  [\'hideInvitations_remindOnRespondedEventsOnly\',\'false_true\'],\n  [\'Calendar ID stripped for privacy\',\'false\'],[\'smsVerifiedFlag\',\'true\']]]]\n</code></pre>\n\n<p>I would assume this is to prevent people from doing an <code>eval()</code> on it, but all you\'d really have to do is replace the <code>while</code> and then you\'d be set. I would assume the eval prevention is to make sure people write safe JSON parsing code.</p>\n\n<p>I\'ve seen this used in a couple of other places, too, but a lot more so with Google (Mail, Calendar, Contacts, etc.) Strangely enough, <a href=\"http://en.wikipedia.org/wiki/Google_Docs\">Google Docs</a> starts with <code>&amp;&amp;&amp;START&amp;&amp;&amp;</code> instead, and Google Contacts seems to start with <code>while(1); &amp;&amp;&amp;START&amp;&amp;&amp;</code>.</p>\n\n<p>What\'s going on here?</p>\n    </div>',2464,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(33,'http://stackoverflow.com/questions/105372/how-do-i-enumerate-an-enum','How do I enumerate an enum?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can you enumerate an <code>enum</code> in C#?</p>\n\n<p>E.g. the following code does not compile:</p>\n\n<pre><code>public enum Suit \n{\n    Spades,\n    Hearts,\n    Clubs,\n    Diamonds\n}\n\npublic void EnumerateAllSuitsDemoMethod() \n{\n    foreach (Suit suit in Suit) \n    {\n        DoSomething(suit);\n    }\n}\n</code></pre>\n\n<p>And gives the following compile-time error:</p>\n\n<blockquote>\n  <p>\'Suit\' is a \'type\' but is used like a \'variable\'</p>\n</blockquote>\n\n<p>It fails on the <code>Suit</code> keyword, the second one.</p>\n    </div>',2466,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(34,'http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string','Read/convert an InputStream to a String',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If you have <code>java.io.InputStream</code> object, how should you process that object and produce a <code>String</code>?</p>\n\n<hr>\n\n<p>Suppose I have an <code>InputStream</code> that contains text data, and I want to convert this to a <code>String</code> (for example, so I can write the contents of the stream to a log file).</p>\n\n<p>What is the easiest way to take the <code>InputStream</code> and convert it to a <code>String</code>?</p>\n\n<pre><code>public String convertStreamToString(InputStream is) { \n    // ???\n}\n</code></pre>\n    </div>',2445,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(35,'http://stackoverflow.com/questions/520650/make-an-existing-git-branch-track-a-remote-branch','Make an existing Git branch track a remote branch?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know how to make a new branch that tracks remote branches, but <strong>how do I make an existing branch track a remote branch?</strong></p>\n\n<p>I know I can just edit the <code>.git/config</code> file, but it seems there should be an easier way.</p>\n    </div>',2504,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(36,'http://stackoverflow.com/questions/13375357/proper-use-cases-for-android-usermanager-isuseragoat','Proper use cases for Android UserManager.isUserAGoat()?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I was looking at the new APIs introduced in <a href=\"http://en.wikipedia.org/wiki/Android_version_history#Android_4.1.2F4.2_Jelly_Bean\">Android 4.2</a>.\nWhile looking at the <a href=\"http://developer.android.com/reference/android/os/UserManager.html\"><code>UserManager</code></a> class I came across the following method:</p>\n\n<blockquote>\n<pre><code>public boolean isUserAGoat()\n</code></pre>\n  \n  <p>Used to determine whether the user making this call is subject to teleportations.</p>\n  \n  <p>Returns whether the user making this call is a goat.</p>\n</blockquote>\n\n<p>How and when should this be used?</p>\n    </div>',2540,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(37,'http://stackoverflow.com/questions/2765421/how-to-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too','How to push a new local branch to a remote Git repository and track it too?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to be able to do the following:</p>\n\n<ol>\n<li><p>Create a local branch based on some other (remote or local) branch (via <code>git branch</code> or <code>git checkout -b</code>)</p></li>\n<li><p>Push the local branch\nto the remote repository (publish), but make it\ntrackable so <code>git pull</code> and <code>git push</code> will work immediately.</p></li>\n</ol>\n\n<p>How do I do that?</p>\n\n<p>I know about <code>--set-upstream</code> in Git 1.7, but that is a post-creation action. I want to find a way to make a similar change when pushing the branch to the remote repository.</p>\n    </div>',2593,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(38,'http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address','Using a regular expression to validate an email address',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Over the years I have slowly developed a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> that validates MOST email addresses correctly, assuming they don\'t use an IP address as the server part.</p>\n\n<p>I use it in several PHP programs, and it works most of the time.  However, from time to time I get contacted by someone that is having trouble with a site that uses it, and I end up having to make some adjustment (most recently I realized that I wasn\'t allowing 4-character TLDs).</p>\n\n<p><em>What\'s the best regular expression you have or have seen for validating emails?</em></p>\n\n<p>I\'ve seen several solutions that use functions that use several shorter expressions, but I\'d rather have one long complex expression in a simple function instead of several short expression in a more complex function.</p>\n    </div>',2503,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(39,'http://stackoverflow.com/questions/2193953/flash-cs4-refuses-to-let-go','Flash CS4 refuses to let go',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a Flash project, and it has many source files. I have a fairly heavily-used class, call it Jenine. I recently (and, perhaps, callously) relocated Jenine from one namespace to another. I thought we were ready - I thought it was time. The new Jenine was better in every way - she had lost some code bloat, she had decoupled herself from a few vestigial class relationships, and she had finally come home to the namespace that she had always secretly known in her heart was the one she truly belonged to. She was among her own kind.</p>\n\n<p>Unfortunately, Flash would have none of that. Perhaps it had formed an attachment. Perhaps it didn\'t <em>want</em> Jenine to be decoupled. Either way, it clung to the old, perfect version of Jenine in its memory. It refused to move on. It ignored her (function) calls. It tried to forget her new, public interfaces. Instead, every instance of Jenine that it constructed was always a copy of the old version, down to its classpath:</p>\n\n<pre><code>var jenineInstance:Jenine = new Jenine();\ntrace( getQualifiedClassName(jenineInstance));\n// Should print: com.newnamespace.subspace::Jenine\n// Prints: com.oldnamespace.subspace::Jenine\n// Ah, young love!\n</code></pre>\n\n<p>We fought. I\'m not proud of some of the things I said or did. In the end, in a towering fit of rage, I deleted all references of Jenine completely. She was utterly, completely erased from the system. My cursor fell upon the \"Empty Trash\" menu option like the cold lid of a casket.</p>\n\n<p>I don\'t think Flash ever recovered. To this day it still clings to the memory of Jenine. Her old, imperfect definitions still float through my project like abandoned ghosts. Whenever I force Flash to compile, it still lovingly inserts her into my movie, nestling her definition in amongst the other, living classes, like a small shrine. I wonder if they can see her.</p>\n\n<p>Flash and I don\'t really talk anymore. I write my code, it compiles it. There\'s a new girl in town named Summer who looks almost identical to Jenine, as if someone had just copied her source-code wholesale into a new class, but Flash hasn\'t shown any interest. Most days it just mopes around and writes bad poetry in my comments when it thinks I\'m not looking.</p>\n\n<p>I hope no one else has had a similar experience, that this is just a singular, painful ripple in the horrifying dark lagoon that is the Flash code-base. If, by some fluke chance you have, or you have any idea how to erase whatever damn cache the compiler is using, please, please help.</p>\n    </div>',2581,0,'2017-01-27 04:45:07','2017-01-27 04:45:07'),(40,'http://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git','Move the most recent commit(s) to a new branch with Git',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'d like to move the last several commits I\'ve committed to master to a new branch and take master back to before those commits were made. Unfortunately, my Git-fu isn\'t strong enough yet, any help?</p>\n\n<p>I.e. How can I go from this</p>\n\n<pre><code>master A - B - C - D - E\n</code></pre>\n\n<p>to this?</p>\n\n<pre><code>newbranch     C - D - E\n             /\nmaster A - B \n</code></pre>\n    </div>',2651,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(41,'http://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call','How do I return the response from an asynchronous call?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a function <code>foo</code> which makes an Ajax request. How can I return the response from <code>foo</code>?</p>\n\n<p>I tried to return the value from the <code>success</code> callback as well as assigning the response to a local variable inside the function and return that one, but none of those ways actually return the response.</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: \'...\',\n        success: function(response) {\n            result = response;\n            // return response; // &lt;- I tried that one as well\n        }\n    });\n\n    return result;\n}\n\nvar result = foo(); // It always ends up being `undefined`.\n</code></pre>\n    </div>',2669,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(42,'http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript','How do you get a timestamp in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to Unix\'s timestamp, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n    </div>',2638,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(43,'http://stackoverflow.com/questions/406230/regular-expression-to-match-line-that-doesnt-contain-a-word','Regular expression to match line that doesn&#39;t contain a word?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know it\'s possible to match a word and then reverse the matches using other tools (e.g. <code>grep -v</code>). However, I\'d like to know if it\'s possible to match lines that <em>don\'t</em> contain a specific word (e.g. hede) using a regular expression? </p>\n\n<p>Input:</p>\n\n<pre><code>hoho\nhihi\nhaha\nhede\n</code></pre>\n\n<p>Code:\n</p>\n\n<pre><code># grep \"Regex for doesn\'t contain hede\" Input\n</code></pre>\n\n<p>Desired output: </p>\n\n<pre><code>hoho\nhihi\nhaha\n</code></pre>\n    </div>',2728,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(44,'http://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository','How can I add an empty directory to a Git repository?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I add an empty directory (that contains no files) to a Git repository?</p>\n    </div>',2702,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(45,'http://stackoverflow.com/questions/114543/horizontally-center-a-div-in-a-div','Horizontally center a div in a div',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I horizontally center a <code>&lt;div&gt;</code> within a <code>&lt;div&gt;</code> using <code>CSS</code> (if it\'s even possible)? </p>\n\n<p>The outer <code>&lt;div&gt;</code> has <code>width:100%</code>:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"outer\" style=\"width:100%\"&gt;  \r\n  &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n    </div>',2795,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(46,'http://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php','How can I prevent SQL injection in PHP?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If user input is inserted without modification into an SQL query, then the application becomes vulnerable to <a href=\"https://stackoverflow.com/a/332367/\">SQL injection</a>, like in the following example:</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$unsafe_variable = $_POST[\'user_input\']; \n\nmysql_query(\"INSERT INTO `table` (`column`) VALUES (\'$unsafe_variable\')\");\n</code></pre>\n\n<p>That\'s because the user can input something like <code>value\'); DROP TABLE table;--</code>, and the query becomes:</p>\n\n<pre><code>INSERT INTO `table` (`column`) VALUES(\'value\'); DROP TABLE table;--\')\n</code></pre>\n\n<p>What can be done to prevent this from happening?</p>\n    </div>',2786,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(47,'http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript','How can I get query string values in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a plugin-less way of retrieving <a href=\"http://en.wikipedia.org/wiki/Query_string\" rel=\"nofollow noreferrer\">query string</a> values via jQuery (or without)? </p>\n\n<p>If so, how? If not, is there a plugin which can do so?</p>\n    </div>',2706,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(48,'http://stackoverflow.com/questions/15666048/angularjs-service-vs-provider-vs-factory','AngularJS: Service vs provider vs factory',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the differences between a <code>Service</code>, <code>Provider</code> and <code>Factory</code> in AngularJS?</p>\n    </div>',2720,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(49,'http://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript','For-each over an array in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I loop through all the objects in an array using JavaScript?</p>\n\n<p>I thought it was something like this:</p>\n\n<pre><code>forEach(instance in objects)\n</code></pre>\n\n<p>Where <code>objects</code> is my array of objects, but this seems to be incorrect.</p>\n    </div>',2825,0,'2017-01-27 04:45:08','2017-01-27 04:45:08'),(50,'http://stackoverflow.com/questions/3737139/reference-what-does-this-symbol-mean-in-php','Reference - What does this symbol mean in PHP?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<h3>What is this?</h3>\n\n<p>This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list. </p>\n\n<h3>Why is this?</h3>\n\n<p>It used to be hard to find questions about operators and other syntax tokens.¹<br>\nThe main idea is to have links to existing questions on Stack Overflow, so it\'s easier for us to reference them, not to copy over content from the PHP Manual.</p>\n\n<p>¹ Note: Since January 2013, Stack Overflow <a href=\"http://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange\">does support special characters</a>. Just surround the search terms by quotes, e.g. <a href=\"http://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22\"><code>[php] \"==\" vs \"===\"</code></a></p>\n\n<h3>What should I do here?</h3>\n\n<p>If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the <a href=\"http://php.net/manual/en/index.php\">PHP manual</a> along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute to the help others provided.</p>\n\n<h2>The List</h2>\n\n<p>If your particular token is not listed below, you might find it in the <a href=\"http://www.php.net/manual/en/tokens.php\">List of Parser Tokens</a>.</p>\n\n<hr>\n\n<p><code>&amp;</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a> or <a href=\"http://www.php.net/manual/en/language.references.php\">References</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1676897\">What does it mean to start a PHP function with an ampersand?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/600202\">Understanding PHP &amp; (ampersand, bitwise and) operator</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2209934/\">PHP \"&amp;\" operator</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1006652\">What does \"&amp;\" mean here in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2297592\">What does \"&amp;\" mean in this case?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2422907\">What does the \"&amp;\" sign mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2478149\">What does this signature mean (&amp;) in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3957584\">How does the \"&amp;\" operator work in a PHP function?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4705262\">What does &amp; in &amp;2 mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4705838\">When should I use a bitwise operator?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/21058439\">Is there ever a need to use ampersand in front of an object?</a></li>\n</ul>\n\n<hr>\n\n<p><code>=&amp;</code> <a href=\"http://www.php.net/manual/en/language.references.php\">References</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1768343\">Reference assignment operator in PHP, =&amp;</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1367454\">What do the \"=&amp;\" and \"&amp;=\" operators in PHP mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3177342\">What do the \'&amp;=\' and \'=&amp;\' operators do?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2081806\">What does =&amp; mean in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&amp;=</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1367454\">What do the \"=&amp;\" and \"&amp;=\" operators in PHP mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3177342\">What do the \'&amp;=\' and \'=&amp;\' operators do?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&amp;&amp;</code> <a href=\"http://www.php.net/manual/en/language.operators.logical.php\">Logical Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2803321\">\'AND\' vs \'&amp;&amp;\' as operator</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2376348\">Difference between &amp; and &amp;&amp; in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4746865\">Is there a difference between PHP operators AND and &amp;&amp; for this code?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n</ul>\n\n<hr>\n\n<p><code>%</code> <a href=\"http://www.php.net/manual/en/language.operators.arithmetic.php\">Arithmetic Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1934173\">What does the percent sign mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3204919\">What is the PHP operator % and how do I use it in real-world examples?</a></li>\n</ul>\n\n<hr>\n\n<p><code>!!</code> <a href=\"http://www.php.net/manual/en/language.operators.logical.php\">Logical Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2127260\">Double not (!!) operator in PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>@</code> <a href=\"http://www.php.net/manual/en/language.operators.errorcontrol.php\">Error Control Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1032161\">What is the use of the @ symbol in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3551527\">\'At\' symbol before variable name in PHP: @$_POST</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3984864\">PHP functions and @functions</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4872340\">Should I use @ in my PHP code?</a></li>\n</ul>\n\n<hr>\n\n<p><code>?:</code> <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\">Ternary Operator</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2153180\">What is ?: in PHP 5.3?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1080247\">What are the PHP operators \"?\" and \":\" called and what do they do?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1993409\">?: operator (the \'Elvis operator\') in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4055355\">Where can I read about conditionals done with \"?\" and \":\" (colon)?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4210187\">Using PHP 5.3 ?: operator</a></li>\n</ul>\n\n<hr>\n\n<p><code>??</code> <a href=\"https://wiki.php.net/rfc/isset_ternary\">Null Coalesce Operator</a> (since PHP 7)</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/7278835\">C#\'s null coalescing operator (??) in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>:</code> <a href=\"http://www.php.net/manual/en/control-structures.alternative-syntax.php\">Alternative syntax for control structures</a>, <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\">Ternary Operator</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2908095\">What is \":\" in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4747761\">What does \":\" mean in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>::</code> <a href=\"http://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php\">Scope Resolution Operator</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2903564\">What do two colons mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2588298\">What\'s the meaning of the PHP token name T_PAAMAYIM_NEKUDOTAYIM?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3173501\">What\'s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1912902\">What exactly are late static bindings in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4120755\">static::staticFunctionName()</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8734823\">Unexpected T_PAAMAYIM_NEKUDOTAYIM, expecting T_NS_Separator</a></li>\n</ul>\n\n<hr>\n\n<p><code>\\</code> <a href=\"http://php.net/namespaces\">Namespaces</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/10788400\">Backslash in PHP -- what does it mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4790020\">What does a \\ (backslash) do in PHP (5.3+)?</a></li>\n</ul>\n\n<hr>\n\n<p><code>-&gt;</code> <a href=\"http://www.php.net/manual/en/language.oop5.php\">Classes And Objects</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2588149\">What is the \"-&gt;\" PHP operator called and how do you say it when reading code out loud?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3037526\">Where do we use the object operator \"-&gt;\" in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3173501\">What\'s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2316370\">What does the PHP syntax $var1-&gt;$var2 mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4502587\">What does \"-&gt;\" mean/refer to in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>=&gt;</code> <a href=\"http://www.php.net/manual/en/language.types.array.php\">Arrays</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1241819\">What does \"=&gt;\" mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1655336\">Use of =&gt; in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4758791\">What does $k =&gt; $v in foreach($ex as $k=&gt;$v) mean?</a></li>\n</ul>\n\n<hr>\n\n<p><code>^</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2674920\">How does the bitwise operator XOR (\'^\') work?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2724936\">What does ^ mean in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&gt;&gt;</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2790329\">What does &gt;&gt; mean in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;&lt;</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/9718689/strange-print-behaviour-in-php\">Strange print behaviour in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;&lt;&lt;</code> <a href=\"http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc\">Heredoc or Nowdoc</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5539669\">What does &lt;&lt;&lt;END mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1048481\">PHP expression &lt;&lt;&lt;EOB</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3700042\">In PHP, what does \"&lt;&lt;&lt;\" represent?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2090081\">Using &lt;&lt;&lt;CON in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2333779\">What\'s this kind of syntax in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>=</code> <a href=\"http://www.php.net/manual/en/language.operators.assignment.php\">Assignment Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n</ul>\n\n<hr>\n\n<p><code>==</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>===</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1117967\">What does \"===\" mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/80646\">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2063480\">The 3 different equals</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>!==</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1298083\">What does !== comparison operator in PHP mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>!=</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1663451\">PHP != and == operators</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1139154\">Is there a difference between !== and != in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6356826\">comparing, !== versus !=</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9671785/what-is-the-difference-between-and\">What is the difference between &lt;&gt; and !=</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;&gt;</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/249312\">PHP operator &lt;&gt;</a></li>\n<li><a href=\"http://stackoverflow.com/questions/589391\">PHP\'s &lt;&gt; operator</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9671785\">What is the difference between &lt;&gt; and !=</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15813490/\">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;=&gt;</code> <a href=\"http://www.php.net/manual/en/language.operators.comparison.php\">Comparison Operators</a> (since PHP 7.0)</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/31298778\">Spaceship (three way comparison) operator</a></li>\n</ul>\n\n<hr>\n\n<p><code>|</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/13811922\">What Does Using A Single Pipe \'|\' In A Function Argument Do?</a></li>\n</ul>\n\n<hr>\n\n<p><code>||</code> <a href=\"http://www.php.net/manual/en/language.operators.logical.php\">Logical Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2233835\">What is the difference between the | and || operators?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4502092\">PHP - and / or keywords</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5666741\">What exactly does || mean?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/12213283\">The behaviour of the or operator in PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>~</code> <a href=\"http://www.php.net/manual/en/language.operators.bitwise.php\">Bitwise Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1967360\">What does this ~ operator mean here?</a></li>\n</ul>\n\n<hr>\n\n<p><code>+</code> <a href=\"http://www.php.net/manual/en/language.operators.arithmetic.php\">Arithmetic Operators</a>, <a href=\"http://www.php.net/manual/en/language.operators.array.php\">Array Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2140090\">+ operator for array in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>+=</code> <a href=\"http://www.php.net/manual/en/language.operators.assignment.php\">Assignment Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/542995\">What is += used for?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7140158\">What does `$page -= 1` in my PHP document mean?</a></li>\n</ul>\n\n<hr>\n\n<p><code>++</code> <a href=\"http://www.php.net/manual/en/language.operators.increment.php\">Incrementing/Decrementing Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1968371\">Understanding Incrementing</a></li>\n<li><a href=\"http://stackoverflow.com/a/3737177\">Answer below</a></li>\n</ul>\n\n<hr>\n\n<p><code>.=</code> <a href=\"http://www.php.net/manual/en/language.operators.assignment.php\">Assignment Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2202331\">What is the difference between .= and += in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1241432\">To understand a line of PHP</a></li>\n</ul>\n\n<hr>\n\n<p><code>.</code> <a href=\"http://www.php.net/manual/en/language.operators.string.php\">String Operators</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1466408\">Difference between period and comma?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6484968\">What does a . (dot) do in PHP?</a></li>\n</ul>\n\n<hr>\n\n<p><code>,</code> <a href=\"http://php.net/manual/en/functions.arguments.php\">Function Arguments</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1466408\">Difference between period and comma?</a></li>\n</ul>\n\n<p><code>,</code> <a href=\"http://php.net/manual/en/language.variables.scope.php\">Variable Declarations</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/41383218\">What do commas mean in a variable declaration?</a></li>\n</ul>\n\n<hr>\n\n<p><code>$$</code> <a href=\"http://php.net/manual/en/language.variables.variable.php\">Variable Variables</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2715654\">What does $$ (dollar dollar or double dollar) mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4169882\">what is \"$$\" in PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4891872\">$function() and $$variable</a></li>\n</ul>\n\n<hr>\n\n<p><code>`</code> <a href=\"http://php.net/manual/en/language.operators.execution.php\">Execution Operator</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/6002296\">What are the backticks `` called?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;?=</code> <a href=\"http://php.net/manual/en/ini.core.php#ini.short-open-tag\">Short Open Tags</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1963901\">What does this symbol mean in PHP &lt;?=</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2020445\">What does \'&lt;?=\' mean in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1959256/what-does-mean\">What does &lt;?= mean?</a></li>\n</ul>\n\n<hr>\n\n<p><code>[]</code> <a href=\"http://www.php.net/manual/en/language.types.array.php\">Arrays</a> (since PHP 5.4)</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/20709055/2758197\">PHP arrays... What is/are the meaning(s) of an empty bracket?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6933345\">PHP : What is the meaning of []</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2431629\">Php array_push() vs myArray[]</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3908576\">What does [] mean when reading from a PHP array?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4271874\">Shorthand for arrays: literal <code>$var = []</code> empty array</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;?</code> <a href=\"http://www.php.net/manual/en/language.basic-syntax.php\">Opening and Closing tags</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/200640\">Are PHP short tags acceptable to use?</a></li>\n</ul>\n\n<hr>\n\n<p><code>...</code> <a href=\"http://wiki.php.net/rfc/argument_unpacking\">Argument unpacking</a> (since PHP 5.6)</p>\n\n<hr>\n\n<p><code>**</code> <a href=\"http://www.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation\">Exponentiation</a> (since PHP 5.6)</p>\n\n<hr>\n\n<p><code>#</code> <a href=\"http://php.net/manual/en/language.basic-syntax.comments.php\">One-line shell-style comment</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/9093609/can-i-use-hashes-for-comments-in-php\">Can I use hashes for comments in PHP?</a></li>\n</ul>\n\n<hr>\n    </div>',2829,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(51,'http://stackoverflow.com/questions/8710619/javas-compound-assignment-operators','Java&#39;s +=, -=, *=, /= compound assignment operators',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Until today I thought that for example:</p>\n\n<pre><code>i += j;\n</code></pre>\n\n<p>is just a shortcut for:</p>\n\n<pre><code>i = i + j;\n</code></pre>\n\n<p>But what if we try this:</p>\n\n<pre><code>int i = 5;\nlong j = 8;\n</code></pre>\n\n<p>Then <code>i = i + j;</code> will not compile but <code>i += j;</code> will compile fine.</p>\n\n<p>Does it mean that in fact <code>i += j;</code> is a shortcut for something like this\n<code>i = (type of i) (i + j)</code>?</p>\n    </div>',2837,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(52,'http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn','What is the difference between a URI, a URL and a URN?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>People talk about <strong>URL</strong>s, <strong>URI</strong>s and <strong>URN</strong>s as if they\'re different things, but they look the same to the naked eye.</p>\n\n<p>What are the distinguishable differences between them?</p>\n    </div>',2859,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(53,'http://stackoverflow.com/questions/426258/setting-checked-for-a-checkbox-with-jquery','Setting &quot;checked&quot; for a checkbox with jQuery?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'d like to do something like this to tick a <code>checkbox</code> using <strong>jQuery</strong>:</p>\n\n<pre><code>$(\".myCheckBox\").checked(true);\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$(\".myCheckBox\").selected(true);\n</code></pre>\n\n<p>Does such a thing exist?</p>\n    </div>',2894,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(54,'http://stackoverflow.com/questions/2610497/change-an-html5-inputs-placeholder-color-with-css','Change an HTML5 input&#39;s placeholder color with CSS',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Chrome supports the <a href=\"http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-placeholder-attribute\" title=\"The placeholder attribute\">placeholder attribute</a> on <code>input[type=text]</code> elements (others probably do too).</p>\n\n<p>But the following <code>CSS</code> doesn\'t do diddly squat to the placeholder\'s value:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[placeholder], [placeholder], *[placeholder] {\r\n    color: red !important;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"text\" placeholder=\"Value\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p><code>Value</code> will still remain <code>grey</code> instead of <code>red</code>.</p>\n\n<p><strong>Is there a way to change the color of the placeholder text?</strong></p>\n\n<p>I\'m already using the jQuery placeholder plugin for the browsers that don\'t support the placeholder attribute natively.</p>\n    </div>',2881,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(55,'http://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git','How to clone all remote branches in Git?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a <code>master</code> and a <code>development</code> branch, both pushed to <a href=\"http://en.wikipedia.org/wiki/GitHub\">GitHub</a>. I\'ve <code>clone</code>d, <code>pull</code>ed, and <code>fetch</code>ed, but I remain unable to get anything other than the <code>master</code> branch back.</p>\n\n<p>I\'m sure I\'m missing something obvious, but I have read the manual and I\'m getting no joy at all.</p>\n    </div>',2971,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(56,'http://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator','Does Python have a ternary conditional operator?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>\n    </div>',2897,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(57,'http://stackoverflow.com/questions/271526/avoiding-null-statements','Avoiding != null statements',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The idiom I use the most when programming in Java is to test if <code>object != null</code> before I use it. This is to avoid a <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/NullPointerException.html\">NullPointerException</a>. I find the code very ugly, and it becomes unreadable.</p>\n\n<p>Is there a good alternative to this? </p>\n\n<p>I want to address the necessity to test every object if you want to access a field or method of this object. For example:</p>\n\n<pre><code>if (someobject != null) {\n    someobject.doCalc();\n}\n</code></pre>\n\n<p>In this case I will avoid a <code>NullPointerException</code>, and I don\'t know exactly if the object is <code>null</code> or not. These tests appear throughout my code as a consequence.</p>\n    </div>',2845,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(58,'http://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git','How do I discard unstaged changes in Git?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I discard changes in my working copy that are not in the index?</p>\n    </div>',2847,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(59,'http://stackoverflow.com/questions/901712/how-do-i-check-if-a-checkbox-is-checked-in-jquery','How do I check if a checkbox is checked in jQuery?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to check the <code>checked</code> property of a checkbox and perform an action based on the checked property using jQuery.</p>\n\n<p>For example, if the age checkbox is checked, then I need to show a textbox to enter age, else hide the textbox.</p>\n\n<p>But the following code returns <code>false</code> by default:</p>\n\n<pre><code>if($(\'#isAgeSelected\').attr(\'checked\')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>How do I successfully query the <code>checked</code> property?</p>\n    </div>',3087,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(60,'http://stackoverflow.com/questions/244777/can-comments-be-used-in-json','Can comments be used in JSON?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can I use comments inside a JSON file? If so, how?</p>\n    </div>',4150,0,'2017-01-27 04:45:09','2017-01-27 04:45:09'),(61,'http://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file','How do I include a JavaScript file in another JavaScript file?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there something in JavaScript similar to <code>@import</code> in CSS that allows you to include a JavaScript file inside another JavaScript file?</p>\n    </div>',3167,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(62,'http://stackoverflow.com/questions/14415881/how-to-pair-socks-from-a-pile-efficiently','How to pair socks from a pile efficiently?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Yesterday I was pairing the socks from the clean laundry and figured out the way I was doing it is not very efficient. I was doing a naive search — picking one sock and \"iterating\" the pile in order to find its pair. This requires iterating over n/2 * n/4 = n<sup>2</sup>/8 socks on average.</p>\n\n<p>As a computer scientist I was thinking what I could do? Sorting (according to size/color/...) of course came to mind to achieve an O(NlogN) solution.</p>\n\n<p>Hashing or other not-in-place solutions are not an option, because I am not able to duplicate my socks (though it could be nice if I could).</p>\n\n<p><strong>So, the question is basically:</strong></p>\n\n<p>Given a pile of <code>n</code> pairs of socks, containing <code>2n</code> elements (assume each sock has exactly one matching pair), what is the best way to pair them up efficiently with up to logarithmic extra space? (I believe I can remember that amount of info if needed.)</p>\n\n<p>I will appreciate an answer that addresses the following aspects:</p>\n\n<ul>\n<li>A general <em>theoretical</em> solution for a huge number of socks.</li>\n<li>The actual number of socks is not that large, I don\'t believe my spouse and I have more than 30 pairs. (And it is fairly easy to distinguish between my socks and hers; can this be used as well?)</li>\n<li>Is it equivalent to the <a href=\"http://en.wikipedia.org/wiki/Element_distinctness_problem\">element distinctness problem</a>?</li>\n</ul>\n    </div>',3045,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(63,'http://stackoverflow.com/questions/4456438/how-to-pass-null-a-real-surname-to-a-soap-web-service-in-actionscript-3','How to pass &quot;Null&quot; (a real surname!) to a SOAP web service in ActionScript 3?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>We have an employee whose last name is Null. Our employee lookup application is killed when that last name is used as the search term (which happens to be quite often now). The error received (thanks Fiddler!) is:</p>\n\n<pre><code>  &lt;soapenv:Fault&gt;\n   &lt;faultcode&gt;soapenv:Server.userException&lt;/faultcode&gt;\n   &lt;faultstring&gt;coldfusion.xml.rpc.CFCInvocationException: [coldfusion.runtime.MissingArgumentException : The SEARCHSTRING parameter to the getFacultyNames function is required but was not passed in.]&lt;/faultstring&gt;\n</code></pre>\n\n<p>Cute, huh?</p>\n\n<p>The parameter type is <code>string</code>.</p>\n\n<p>I am using:</p>\n\n<ul>\n<li>WSDL (SOAP).</li>\n<li>Flex 3.5</li>\n<li>ActionScript 3</li>\n<li>ColdFusion 8</li>\n</ul>\n\n<p>Note that the error DOES NOT occur when calling the webservice as an object from a ColdFusion page.</p>\n    </div>',4130,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(64,'http://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-branch','How to remove local (untracked) files from the current Git branch?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you delete untracked local files from your current branch?</p>\n    </div>',4214,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(65,'http://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within','Getting the source directory of a Bash script from within',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I get the path of the directory in which a <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> script is located, <em>inside</em> that script?</p>\n\n<p>For instance, let\'s say I want to use a Bash script as a launcher for another application. I want to change the working directory to the one where the Bash script is located, so I can operate on the files in that directory, like so: </p>\n\n<pre>$ ./application</pre>\n    </div>',3075,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(66,'http://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit','How to revert Git repository to a previous commit?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I revert from my current state to a snapshot made on a certain commit? </p>\n\n<p>If I do <code>git log</code>, I get the following output:</p>\n\n<pre><code>$ git log\ncommit a867b4af366350be2e7c21b8de9cc6504678a61b`\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 18:59:41 2010 -0400\n\nblah blah blah...\n\ncommit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 05:13:39 2010 -0400\n\nmore blah blah blah...\n\ncommit 0766c053c0ea2035e90f504928f8df3c9363b8bd\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 00:55:06 2010 -0400\n\nAnd yet more blah blah...\n\ncommit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\nAuthor: Me &lt;me@me.com&gt;\nDate:   Wed Nov 3 23:56:08 2010 -0400\n\nYep, more blah blah.\n</code></pre>\n\n<p>How do revert to the commit from November 3, i.e. commit <code>0d1d7fc</code>?</p>\n    </div>',4213,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(67,'http://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons','Which equals operator (== vs ===) should be used in JavaScript comparisons?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'m using <a href=\"http://en.wikipedia.org/wiki/JSLint\">JSLint</a> to go through JavaScript, and it\'s returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n    </div>',4323,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(68,'http://stackoverflow.com/questions/6591213/how-to-rename-a-local-git-branch','How to rename a local Git branch?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I don\'t want to rename a remote branch, as described in <em><a href=\"http://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">Rename master branch for both local and remote Git repositories</a></em>.</p>\n\n<p>How can I rename a local branch which hasn\'t been pushed to a remote branch.</p>\n    </div>',4688,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(69,'http://stackoverflow.com/questions/336859/javascript-function-declaration-syntax-var-fn-function-vs-function-fn','JavaScript function declaration syntax: var fn = function() {} vs function fn() {}',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'ve recently started maintaining someone else\'s JavaScript code. I\'m fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer uses two ways of declaring functions and I can\'t work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can\'t be done with the other?</p>\n    </div>',4722,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(70,'http://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result','Why is subtracting these two times (in 1927) giving a strange result?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I run the following program, which parses two date strings referencing times one second apart and compares them:</p>\n\n<pre><code>public static void main(String[] args) throws ParseException {\n    SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  \n    String str3 = \"1927-12-31 23:54:07\";  \n    String str4 = \"1927-12-31 23:54:08\";  \n    Date sDt3 = sf.parse(str3);  \n    Date sDt4 = sf.parse(str4);  \n    long ld3 = sDt3.getTime() /1000;  \n    long ld4 = sDt4.getTime() /1000;\n    System.out.println(ld4-ld3);\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>353\n</code></pre>\n\n<p>Why is <code>ld4-ld3</code> not <code>1</code> (as I would expect from the one-second difference in the times), but <code>353</code>?</p>\n\n<p>If I change the dates to times one second later:</p>\n\n<pre><code>String str3 = \"1927-12-31 23:54:08\";  \nString str4 = \"1927-12-31 23:54:09\";  \n</code></pre>\n\n<p>Then <code>ld4-ld3</code> will be <code>1</code>.</p>\n\n<hr>\n\n<p>Java version:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>java version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04)\nDynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)\n\nTimezone(`TimeZone.getDefault()`):\n\nsun.util.calendar.ZoneInfo[id=\"Asia/Shanghai\",\noffset=28800000,dstSavings=0,\nuseDaylight=false,\ntransitions=19,\nlastRule=null]\n\nLocale(Locale.getDefault()): zh_CN\n</code></pre>\n    </div>',4843,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(71,'http://stackoverflow.com/questions/8318911/why-does-html-think-chucknorris-is-a-color','Why does HTML think “chucknorris” is a color?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How come certain random strings produce colors when entered as background colors in HTML? For example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;body bgcolor=\"chucknorris\"&gt; test &lt;/body&gt;</code></pre>\r\n</div>\r\n</div>\r\n\n\n<p>...produces a document with a <strong>red background</strong> across all browsers and platforms.</p>\n\n<p>Interestingly, while <code>chucknorri</code> produces a red background as well, <code>chucknorr</code> produces a yellow background.</p>\n\n<p>What\'s going on here?</p>\n    </div>',4946,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(72,'http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it','What does &quot;use strict&quot; do in JavaScript, and what is the reasoning behind it?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Recently, I ran some of my JavaScript code through Crockford\'s <a href=\"http://www.jslint.com/\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n    </div>',5288,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(73,'http://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery','How do I check if an element is hidden in jQuery?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>It is possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>.</p>\n\n<p>How would you test if an element is visible or hidden?</p>\n    </div>',5274,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(74,'http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication','The definitive guide to form-based website authentication',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<h2>Form-based authentication for websites</h2>\n\n<p>We believe that Stack Overflow should not just be a resource for very specific technical questions, but also for general guidelines on how to solve variations on common problems. \"Form based authentication for websites\" should be a fine topic for such an experiment.</p>\n\n<h3>It should include topics such as:</h3>\n\n<ul>\n<li>How to log in</li>\n<li>How to remain logged in</li>\n<li>Managing cookies (including recommended settings)</li>\n<li>SSL/HTTPS encryption</li>\n<li>How to store passwords</li>\n<li>Using secret questions</li>\n<li>Forgotten username/password functionality</li>\n<li>Use of <a href=\"https://en.wikipedia.org/wiki/Cryptographic_nonce\">nonces</a> to prevent <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">cross-site request forgeries (CSRF)</a></li>\n<li><a href=\"http://openid.net/\">OpenID</a></li>\n<li>\"Remember me\" checkbox</li>\n<li>Browser autocompletion of usernames and passwords</li>\n<li>Secret URLs (public <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> protected by digest)</li>\n<li>Checking password strength</li>\n<li>E-mail validation</li>\n<li><em>and much more about</em> <a href=\"http://en.wikipedia.org/wiki/Form-based_authentication\">form based authentication</a>...</li>\n</ul>\n\n<h3>It should not include things like:</h3>\n\n<ul>\n<li>Roles and authorization</li>\n<li>HTTP basic authentication</li>\n</ul>\n\n<h3>Please help us by:</h3>\n\n<ol>\n<li>Suggesting subtopics</li>\n<li>Submitting good articles about this subject</li>\n<li>Editing the official answer</li>\n</ol>\n    </div>',4350,0,'2017-01-27 04:45:10','2017-01-27 04:45:10'),(75,'http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap','What and where are the stack and heap?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Programming language books explain that value types are created on the stack, and reference types are created on the heap, without explaining what these two things are. I haven\'t read a clear explanation of this.  I understand what <em>a stack</em> is, but where and what are they (physically in a real computer\'s memory)?  </p>\n\n<ul>\n<li>To what extent are they controlled by the OS or language runtime?</li>\n<li>What is their scope?</li>\n<li>What determines the size of each of them?</li>\n<li>What makes one faster? </li>\n</ul>\n    </div>',5667,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(76,'http://stackoverflow.com/questions/1789945/how-to-check-if-one-string-contains-another-substring-in-javascript','How to check if one string contains another substring in JavaScript?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Usually, I would expect a <code>String.contains()</code> method, but there doesn\'t seem to be one. What is the reasonable way to check for this?</p>\n    </div>',5623,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(77,'http://stackoverflow.com/questions/1642028/what-is-the-name-of-the-operator-in-c','What is the name of the &quot;--&gt;&quot; operator in C++?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>After reading <a href=\"http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20\">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>\n\n<p>Here\'s the code:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int x = 10;\n    while (x --&gt; 0) // x goes to 0\n    {\n        printf(\"%d \", x);\n    }\n}\n</code></pre>\n\n<p>I\'d assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>\n    </div>',6163,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(78,'http://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-page-in-jquery','How do I redirect to another page in jQuery?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I redirect the user from one page to another using jQuery?</p>\n    </div>',6030,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(79,'http://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit','How to undo &#39;git add&#39; before commit?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I mistakenly added files using the command:</p>\n\n<pre><code>git add myfile.txt\n</code></pre>\n\n<p>I have not yet run <code>git commit</code>. Is there a way to undo this, so these files won\'t be included in the commit?</p>\n    </div>',5540,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(80,'http://stackoverflow.com/questions/292357/difference-between-git-pull-and-git-fetch','Difference between &#39;git pull&#39; and &#39;git fetch&#39;',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the differences between <code>git pull</code> and <code>git fetch</code>?</p>\n    </div>',7250,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(81,'http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do','What does the &quot;yield&quot; keyword do?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>\n\n<p>For example, I\'m trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = list(), [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list is returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. The code comes from Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\">Module mspace</a>.</sub></p>\n    </div>',5905,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(82,'http://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type','What is the correct JSON content type?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I\'ve been messing around with <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> for some time, just pushing it out as text and it hasn\'t hurt anybody (that I know of), but I\'d like to start doing things properly.</p>\n\n<p>I have seen <em>so</em> many purported \"standards\" for the JSON content type:</p>\n\n<pre><code>application/json\napplication/x-javascript\ntext/javascript\ntext/x-javascript\ntext/x-json\n</code></pre>\n\n<p>But which is correct, or best? I gather that there are security and browser support issues varying between them.</p>\n\n<p>I know there\'s a similar question, <em><a href=\"http://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\">What MIME type if JSON is being returned by a REST API?</a></em>, but I\'d like a slightly more targeted answer.</p>\n    </div>',7524,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(83,'http://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array','Why is it faster to process a sorted array than an unsorted array?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Here is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c &lt; arraySize; ++c)\n        {\n            if (data[c] &gt;= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n<li>With the sorted data, the code runs in 1.93 seconds.</li>\n</ul>\n\n<p>Initially, I thought this might be just a language or compiler anomaly. So I tried it in Java.</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i &lt; 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c &lt; arraySize; ++c)\n            {\n                if (data[c] &gt;= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n</code></pre>\n\n<p>With a somewhat similar but less extreme result.</p>\n\n<hr>\n\n<p>My first thought was that sorting brings the data into the cache, but then I thought how silly that is because the array was just generated.</p>\n\n<ul>\n<li>What is going on?</li>\n<li>Why is a sorted array faster to process than an unsorted array?</li>\n<li>The code is summing up some independent terms, and the order should not matter.</li>\n</ul>\n    </div>',16811,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(84,'http://stackoverflow.com/questions/111102/how-do-javascript-closures-work','How do JavaScript closures work?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How would you explain JavaScript closures to someone with a knowledge of the concepts they consist of (for example functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\">the Scheme example</a> given on Wikipedia, but unfortunately it did not help.</p>\n    </div>',7029,0,'2017-01-27 04:45:11','2017-01-27 04:45:11'),(85,'http://stackoverflow.com/questions/927358/how-to-undo-last-commits-in-git','How to undo last commit(s) in Git?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I committed the wrong files to <strong>Git</strong>.</p>\n\n<p>How can I undo that commit?</p>\n    </div>',12871,0,'2017-01-27 04:45:12','2017-01-27 04:45:12'),(86,'http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely','How to delete a Git branch both locally and remotely?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to delete a branch both locally and on my remote project fork on <a href=\"http://en.wikipedia.org/wiki/GitHub\">GitHub</a>.</p>\n\n<h3>Failed Attempts to Delete Remote Branch</h3>\n\n<pre><code>$ git branch -d remotes/origin/bugfix\nerror: branch \'remotes/origin/bugfix\' not found.\n\n$ git branch -d origin/bugfix\nerror: branch \'origin/bugfix\' not found.\n\n$ git branch -rd origin/bugfix\nDeleted remote branch origin/bugfix (was 2a14ef7).\n\n$ git push\nEverything up-to-date\n\n$ git pull\nFrom github.com:gituser/gitproject\n* [new branch] bugfix -&gt; origin/bugfix\nAlready up-to-date.\n</code></pre>\n\n<p>What do I need to do differently to successfully delete the\n<code>remotes/origin/bugfix</code> branch both locally and on GitHub?</p>\n    </div>',9404,0,'2017-01-27 04:45:12','2017-01-27 04:45:12'),(87,'http://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits','How to modify existing, unpushed commits?',1,'<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I wrote the wrong thing in a commit message. Alternatively, I\'ve forgotten to include some files.</p>\n\n<p>How can I change the commit message/files? The commit has not been pushed yet.</p>\n    </div>',7687,0,'2017-01-27 04:45:12','2017-01-27 04:45:12');
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_user`
--

DROP TABLE IF EXISTS `role_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_user` (
  `user_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `role_user_role_id_foreign` (`role_id`),
  CONSTRAINT `role_user_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `role_user_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role_user`
--

LOCK TABLES `role_user` WRITE;
/*!40000 ALTER TABLE `role_user` DISABLE KEYS */;
INSERT INTO `role_user` VALUES (2,2),(3,2),(4,2),(1,5);
/*!40000 ALTER TABLE `role_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `roles_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'visitor','游客','未注册游客','2017-01-22 06:50:37','2017-01-22 06:50:37'),(2,'common','注册用户','普通注册用户','2017-01-22 06:50:37','2017-01-22 06:50:37'),(3,'vip','VIP用户','具有增值服务的用户角色','2017-01-22 06:50:37','2017-01-22 06:50:37'),(4,'admin','管理员','管理员','2017-01-22 06:50:37','2017-01-22 06:50:37'),(5,'superadmin','超级管理员','超级管理员','2017-01-22 06:50:37','2017-01-22 06:50:37');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag_question`
--

DROP TABLE IF EXISTS `tag_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag_question` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tag_id` int(10) unsigned NOT NULL COMMENT '标签id',
  `question_id` int(10) unsigned NOT NULL COMMENT '问题id',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `tag_question_tag_id_index` (`tag_id`),
  KEY `tag_question_question_id_index` (`question_id`),
  CONSTRAINT `tag_question_question_id_foreign` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE,
  CONSTRAINT `tag_question_tag_id_foreign` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=330 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag_question`
--

LOCK TABLES `tag_question` WRITE;
/*!40000 ALTER TABLE `tag_question` DISABLE KEYS */;
INSERT INTO `tag_question` VALUES (1,39,1,NULL,NULL),(2,40,1,NULL,NULL),(3,41,1,NULL,NULL),(4,42,1,NULL,NULL),(5,43,1,NULL,NULL),(6,44,2,NULL,NULL),(7,45,2,NULL,NULL),(8,46,2,NULL,NULL),(9,47,3,NULL,NULL),(10,48,3,NULL,NULL),(11,49,3,NULL,NULL),(12,50,3,NULL,NULL),(13,51,3,NULL,NULL),(14,52,4,NULL,NULL),(15,53,4,NULL,NULL),(16,54,4,NULL,NULL),(17,55,4,NULL,NULL),(18,56,4,NULL,NULL),(19,39,5,NULL,NULL),(20,57,5,NULL,NULL),(21,58,5,NULL,NULL),(22,59,5,NULL,NULL),(23,21,6,NULL,NULL),(24,60,6,NULL,NULL),(25,61,6,NULL,NULL),(26,33,7,NULL,NULL),(27,65,7,NULL,NULL),(28,66,7,NULL,NULL),(29,67,8,NULL,NULL),(30,68,8,NULL,NULL),(31,69,8,NULL,NULL),(32,70,8,NULL,NULL),(33,21,9,NULL,NULL),(34,71,9,NULL,NULL),(35,77,10,NULL,NULL),(36,78,10,NULL,NULL),(37,79,10,NULL,NULL),(38,80,11,NULL,NULL),(39,81,11,NULL,NULL),(40,82,11,NULL,NULL),(41,83,11,NULL,NULL),(42,84,11,NULL,NULL),(43,87,12,NULL,NULL),(44,88,12,NULL,NULL),(45,89,12,NULL,NULL),(46,90,12,NULL,NULL),(47,91,12,NULL,NULL),(48,33,13,NULL,NULL),(49,40,13,NULL,NULL),(50,92,13,NULL,NULL),(51,24,14,NULL,NULL),(52,97,14,NULL,NULL),(53,98,14,NULL,NULL),(54,99,14,NULL,NULL),(55,21,15,NULL,NULL),(56,93,15,NULL,NULL),(57,102,15,NULL,NULL),(58,103,15,NULL,NULL),(59,104,15,NULL,NULL),(60,47,16,NULL,NULL),(61,105,16,NULL,NULL),(62,106,16,NULL,NULL),(63,107,16,NULL,NULL),(64,108,16,NULL,NULL),(65,24,17,NULL,NULL),(66,71,17,NULL,NULL),(67,109,17,NULL,NULL),(68,110,17,NULL,NULL),(69,24,18,NULL,NULL),(70,78,18,NULL,NULL),(71,111,18,NULL,NULL),(72,112,18,NULL,NULL),(73,113,18,NULL,NULL),(74,114,19,NULL,NULL),(75,115,19,NULL,NULL),(76,116,19,NULL,NULL),(77,21,20,NULL,NULL),(78,117,20,NULL,NULL),(79,118,20,NULL,NULL),(80,119,20,NULL,NULL),(81,33,21,NULL,NULL),(82,120,21,NULL,NULL),(83,62,21,NULL,NULL),(84,33,22,NULL,NULL),(85,53,22,NULL,NULL),(86,21,23,NULL,NULL),(87,121,23,NULL,NULL),(88,122,23,NULL,NULL),(89,27,24,NULL,NULL),(90,123,24,NULL,NULL),(91,124,24,NULL,NULL),(92,125,24,NULL,NULL),(93,126,24,NULL,NULL),(94,21,25,NULL,NULL),(95,71,25,NULL,NULL),(96,41,25,NULL,NULL),(97,127,26,NULL,NULL),(98,35,26,NULL,NULL),(99,128,26,NULL,NULL),(100,129,26,NULL,NULL),(101,130,26,NULL,NULL),(102,23,27,NULL,NULL),(103,131,27,NULL,NULL),(104,132,27,NULL,NULL),(105,133,27,NULL,NULL),(106,134,27,NULL,NULL),(107,21,28,NULL,NULL),(108,135,28,NULL,NULL),(109,136,28,NULL,NULL),(110,137,28,NULL,NULL),(111,138,28,NULL,NULL),(112,24,29,NULL,NULL),(113,139,29,NULL,NULL),(114,98,29,NULL,NULL),(115,33,30,NULL,NULL),(116,140,30,NULL,NULL),(117,23,31,NULL,NULL),(118,114,31,NULL,NULL),(119,141,31,NULL,NULL),(120,142,31,NULL,NULL),(121,143,31,NULL,NULL),(122,21,32,NULL,NULL),(123,94,32,NULL,NULL),(124,144,32,NULL,NULL),(125,77,33,NULL,NULL),(126,145,33,NULL,NULL),(127,146,33,NULL,NULL),(128,147,33,NULL,NULL),(129,24,34,NULL,NULL),(130,78,34,NULL,NULL),(131,148,34,NULL,NULL),(132,149,34,NULL,NULL),(133,150,34,NULL,NULL),(134,33,35,NULL,NULL),(135,151,35,NULL,NULL),(136,152,35,NULL,NULL),(137,24,36,NULL,NULL),(138,27,36,NULL,NULL),(139,153,36,NULL,NULL),(140,33,37,NULL,NULL),(141,154,37,NULL,NULL),(142,152,37,NULL,NULL),(143,155,37,NULL,NULL),(144,156,38,NULL,NULL),(145,135,38,NULL,NULL),(146,137,38,NULL,NULL),(147,138,38,NULL,NULL),(148,157,39,NULL,NULL),(149,158,39,NULL,NULL),(150,159,39,NULL,NULL),(151,160,39,NULL,NULL),(152,33,40,NULL,NULL),(153,152,40,NULL,NULL),(154,162,40,NULL,NULL),(155,21,41,NULL,NULL),(156,93,41,NULL,NULL),(157,94,41,NULL,NULL),(158,95,41,NULL,NULL),(159,21,42,NULL,NULL),(160,165,42,NULL,NULL),(161,166,42,NULL,NULL),(162,167,42,NULL,NULL),(163,168,42,NULL,NULL),(164,135,43,NULL,NULL),(165,169,43,NULL,NULL),(166,33,44,NULL,NULL),(167,170,44,NULL,NULL),(168,171,44,NULL,NULL),(169,127,45,NULL,NULL),(170,35,45,NULL,NULL),(171,128,45,NULL,NULL),(172,22,46,NULL,NULL),(173,172,46,NULL,NULL),(174,47,46,NULL,NULL),(175,111,46,NULL,NULL),(176,173,46,NULL,NULL),(177,21,47,NULL,NULL),(178,40,47,NULL,NULL),(179,174,47,NULL,NULL),(180,175,47,NULL,NULL),(181,176,48,NULL,NULL),(182,177,48,NULL,NULL),(183,178,48,NULL,NULL),(184,179,48,NULL,NULL),(185,180,48,NULL,NULL),(186,21,49,NULL,NULL),(187,71,49,NULL,NULL),(188,97,49,NULL,NULL),(189,181,49,NULL,NULL),(190,99,49,NULL,NULL),(191,22,50,NULL,NULL),(192,182,50,NULL,NULL),(193,183,50,NULL,NULL),(194,24,51,NULL,NULL),(195,184,51,NULL,NULL),(196,182,51,NULL,NULL),(197,185,51,NULL,NULL),(198,186,51,NULL,NULL),(199,39,52,NULL,NULL),(200,40,52,NULL,NULL),(201,187,52,NULL,NULL),(202,188,52,NULL,NULL),(203,189,52,NULL,NULL),(204,21,53,NULL,NULL),(205,93,53,NULL,NULL),(206,190,53,NULL,NULL),(207,191,53,NULL,NULL),(208,192,53,NULL,NULL),(209,127,54,NULL,NULL),(210,35,54,NULL,NULL),(211,193,54,NULL,NULL),(212,194,54,NULL,NULL),(213,195,54,NULL,NULL),(214,33,55,NULL,NULL),(215,152,55,NULL,NULL),(216,196,55,NULL,NULL),(217,66,55,NULL,NULL),(218,23,56,NULL,NULL),(219,182,56,NULL,NULL),(220,197,56,NULL,NULL),(221,198,56,NULL,NULL),(222,199,56,NULL,NULL),(223,24,57,NULL,NULL),(224,200,57,NULL,NULL),(225,201,57,NULL,NULL),(226,33,58,NULL,NULL),(227,21,59,NULL,NULL),(228,93,59,NULL,NULL),(229,190,59,NULL,NULL),(230,144,60,NULL,NULL),(231,204,60,NULL,NULL),(232,21,61,NULL,NULL),(233,202,61,NULL,NULL),(234,207,61,NULL,NULL),(235,208,61,NULL,NULL),(236,80,62,NULL,NULL),(237,209,62,NULL,NULL),(238,210,62,NULL,NULL),(239,211,62,NULL,NULL),(240,212,63,NULL,NULL),(241,213,63,NULL,NULL),(242,214,63,NULL,NULL),(243,215,63,NULL,NULL),(244,216,63,NULL,NULL),(245,33,64,NULL,NULL),(246,151,64,NULL,NULL),(247,152,64,NULL,NULL),(248,217,65,NULL,NULL),(249,170,65,NULL,NULL),(250,33,66,NULL,NULL),(251,220,66,NULL,NULL),(252,221,66,NULL,NULL),(253,21,67,NULL,NULL),(254,182,67,NULL,NULL),(255,222,67,NULL,NULL),(256,223,67,NULL,NULL),(257,224,67,NULL,NULL),(258,33,68,NULL,NULL),(259,152,68,NULL,NULL),(260,21,69,NULL,NULL),(261,118,69,NULL,NULL),(262,225,69,NULL,NULL),(263,134,69,NULL,NULL),(264,24,70,NULL,NULL),(265,165,70,NULL,NULL),(266,226,70,NULL,NULL),(267,127,71,NULL,NULL),(268,227,71,NULL,NULL),(269,21,72,NULL,NULL),(270,225,72,NULL,NULL),(271,228,72,NULL,NULL),(272,229,72,NULL,NULL),(273,21,73,NULL,NULL),(274,93,73,NULL,NULL),(275,230,73,NULL,NULL),(276,231,73,NULL,NULL),(277,111,74,NULL,NULL),(278,39,74,NULL,NULL),(279,232,74,NULL,NULL),(280,210,74,NULL,NULL),(281,233,74,NULL,NULL),(282,234,75,NULL,NULL),(283,210,75,NULL,NULL),(284,235,75,NULL,NULL),(285,236,75,NULL,NULL),(286,21,76,NULL,NULL),(287,78,76,NULL,NULL),(288,237,76,NULL,NULL),(289,238,76,NULL,NULL),(290,31,77,NULL,NULL),(291,182,77,NULL,NULL),(292,239,77,NULL,NULL),(293,240,77,NULL,NULL),(294,21,78,NULL,NULL),(295,93,78,NULL,NULL),(296,241,78,NULL,NULL),(297,33,79,NULL,NULL),(298,53,79,NULL,NULL),(299,242,79,NULL,NULL),(300,33,80,NULL,NULL),(301,55,80,NULL,NULL),(302,56,80,NULL,NULL),(303,23,81,NULL,NULL),(304,243,81,NULL,NULL),(305,244,81,NULL,NULL),(306,245,81,NULL,NULL),(307,246,81,NULL,NULL),(308,144,82,NULL,NULL),(309,247,82,NULL,NULL),(310,24,83,NULL,NULL),(311,31,83,NULL,NULL),(312,117,83,NULL,NULL),(313,205,83,NULL,NULL),(314,248,83,NULL,NULL),(315,21,84,NULL,NULL),(316,249,84,NULL,NULL),(317,250,84,NULL,NULL),(318,33,85,NULL,NULL),(319,251,85,NULL,NULL),(320,252,85,NULL,NULL),(321,220,85,NULL,NULL),(322,221,85,NULL,NULL),(323,33,86,NULL,NULL),(324,152,86,NULL,NULL),(325,92,86,NULL,NULL),(326,33,87,NULL,NULL),(327,252,87,NULL,NULL),(328,253,87,NULL,NULL),(329,254,87,NULL,NULL);
/*!40000 ALTER TABLE `tag_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '标签id',
  `name` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '标签名字',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=255 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (21,'JavaScript','2017-01-16 13:07:29','2017-01-16 13:07:29'),(22,'PHP','2017-01-16 13:07:29','2017-01-16 13:07:29'),(23,'Python','2017-01-16 13:07:29','2017-01-16 13:07:29'),(24,'Java','2017-01-16 13:07:29','2017-01-16 13:07:29'),(25,'Mysql','2017-01-16 13:07:29','2017-01-16 13:07:29'),(26,'IOS','2017-01-16 13:07:29','2017-01-16 13:07:29'),(27,'Android','2017-01-16 13:07:29','2017-01-16 13:07:29'),(28,'Node','2017-01-16 13:07:29','2017-01-16 13:07:29'),(29,'H5','2017-01-16 13:07:29','2017-01-16 13:07:29'),(30,'Linux','2017-01-16 13:07:29','2017-01-16 13:07:29'),(31,'C++','2017-01-16 13:07:29','2017-01-16 13:07:29'),(32,'CSS3','2017-01-16 13:07:29','2017-01-16 13:07:29'),(33,'Git','2017-01-16 13:07:29','2017-01-16 13:07:29'),(34,'Golang','2017-01-16 13:07:29','2017-01-16 13:07:29'),(35,'css','2017-01-27 04:45:04','2017-01-27 04:45:04'),(36,'cross-browser','2017-01-27 04:45:04','2017-01-27 04:45:04'),(37,'highlighting','2017-01-27 04:45:04','2017-01-27 04:45:04'),(38,'textselection','2017-01-27 04:45:04','2017-01-27 04:45:04'),(39,'http','2017-01-27 04:45:04','2017-01-27 04:45:04'),(40,'url','2017-01-27 04:45:04','2017-01-27 04:45:04'),(41,'browser','2017-01-27 04:45:04','2017-01-27 04:45:04'),(42,'max','2017-01-27 04:45:04','2017-01-27 04:45:04'),(43,'content-length','2017-01-27 04:45:04','2017-01-27 04:45:04'),(44,'javascript','2017-01-27 04:45:04','2017-01-27 04:45:04'),(45,'object','2017-01-27 04:45:04','2017-01-27 04:45:04'),(46,'clone','2017-01-27 04:45:04','2017-01-27 04:45:04'),(47,'sql','2017-01-27 04:45:04','2017-01-27 04:45:04'),(48,'database','2017-01-27 04:45:04','2017-01-27 04:45:04'),(49,'join','2017-01-27 04:45:04','2017-01-27 04:45:04'),(50,'inner-join','2017-01-27 04:45:04','2017-01-27 04:45:04'),(51,'outer-join','2017-01-27 04:45:04','2017-01-27 04:45:04'),(52,'git','2017-01-27 04:45:04','2017-01-27 04:45:04'),(53,'version-control','2017-01-27 04:45:04','2017-01-27 04:45:04'),(54,'overwrite','2017-01-27 04:45:04','2017-01-27 04:45:04'),(55,'git-pull','2017-01-27 04:45:04','2017-01-27 04:45:04'),(56,'git-fetch','2017-01-27 04:45:04','2017-01-27 04:45:04'),(57,'rest','2017-01-27 04:45:04','2017-01-27 04:45:04'),(58,'post','2017-01-27 04:45:04','2017-01-27 04:45:04'),(59,'put','2017-01-27 04:45:04','2017-01-27 04:45:04'),(60,'javascript-objects','2017-01-27 04:45:04','2017-01-27 04:45:04'),(61,'object-properties','2017-01-27 04:45:04','2017-01-27 04:45:04'),(62,'git-merge','2017-01-27 04:45:05','2017-01-27 04:45:05'),(63,'merge-conflict-resolution','2017-01-27 04:45:05','2017-01-27 04:45:05'),(64,'git-conflict-resolution','2017-01-27 04:45:05','2017-01-27 04:45:05'),(65,'git-checkout','2017-01-27 04:45:05','2017-01-27 04:45:05'),(66,'remote-branch','2017-01-27 04:45:05','2017-01-27 04:45:05'),(67,'python','2017-01-27 04:45:05','2017-01-27 04:45:05'),(68,'oop','2017-01-27 04:45:05','2017-01-27 04:45:05'),(69,'metaclass','2017-01-27 04:45:05','2017-01-27 04:45:05'),(70,'python-datamodel','2017-01-27 04:45:05','2017-01-27 04:45:05'),(71,'arrays','2017-01-27 04:45:05','2017-01-27 04:45:05'),(72,'java','2017-01-27 04:45:05','2017-01-27 04:45:05'),(73,'methods','2017-01-27 04:45:05','2017-01-27 04:45:05'),(74,'parameter-passing','2017-01-27 04:45:05','2017-01-27 04:45:05'),(75,'pass-by-reference','2017-01-27 04:45:05','2017-01-27 04:45:05'),(76,'pass-by-value','2017-01-27 04:45:05','2017-01-27 04:45:05'),(77,'c#','2017-01-27 04:45:05','2017-01-27 04:45:05'),(78,'string','2017-01-27 04:45:05','2017-01-27 04:45:05'),(79,'types','2017-01-27 04:45:05','2017-01-27 04:45:05'),(80,'algorithm','2017-01-27 04:45:05','2017-01-27 04:45:05'),(81,'complexity-theory','2017-01-27 04:45:05','2017-01-27 04:45:05'),(82,'computer-science','2017-01-27 04:45:05','2017-01-27 04:45:05'),(83,'big-o','2017-01-27 04:45:05','2017-01-27 04:45:05'),(84,'time-complexity','2017-01-27 04:45:05','2017-01-27 04:45:05'),(85,'capitalize','2017-01-27 04:45:05','2017-01-27 04:45:05'),(86,'letter','2017-01-27 04:45:05','2017-01-27 04:45:05'),(87,'android','2017-01-27 04:45:05','2017-01-27 04:45:05'),(88,'android-layout','2017-01-27 04:45:05','2017-01-27 04:45:05'),(89,'user-interface','2017-01-27 04:45:05','2017-01-27 04:45:05'),(90,'dimension','2017-01-27 04:45:05','2017-01-27 04:45:05'),(91,'units-of-measurement','2017-01-27 04:45:05','2017-01-27 04:45:05'),(92,'git-remote','2017-01-27 04:45:05','2017-01-27 04:45:05'),(93,'jquery','2017-01-27 04:45:05','2017-01-27 04:45:05'),(94,'ajax','2017-01-27 04:45:05','2017-01-27 04:45:05'),(95,'asynchronous','2017-01-27 04:45:05','2017-01-27 04:45:05'),(96,'upload','2017-01-27 04:45:05','2017-01-27 04:45:05'),(97,'loops','2017-01-27 04:45:05','2017-01-27 04:45:05'),(98,'hashmap','2017-01-27 04:45:05','2017-01-27 04:45:05'),(99,'iteration','2017-01-27 04:45:05','2017-01-27 04:45:05'),(100,'random','2017-01-27 04:45:05','2017-01-27 04:45:05'),(101,'integer','2017-01-27 04:45:05','2017-01-27 04:45:05'),(102,'javascript-events','2017-01-27 04:45:05','2017-01-27 04:45:05'),(103,'event-handling','2017-01-27 04:45:05','2017-01-27 04:45:05'),(104,'event-propagation','2017-01-27 04:45:05','2017-01-27 04:45:05'),(105,'sql-server','2017-01-27 04:45:06','2017-01-27 04:45:06'),(106,'tsql','2017-01-27 04:45:06','2017-01-27 04:45:06'),(107,'select','2017-01-27 04:45:06','2017-01-27 04:45:06'),(108,'sql-update','2017-01-27 04:45:06','2017-01-27 04:45:06'),(109,'arraylist','2017-01-27 04:45:06','2017-01-27 04:45:06'),(110,'type-conversion','2017-01-27 04:45:06','2017-01-27 04:45:06'),(111,'security','2017-01-27 04:45:06','2017-01-27 04:45:06'),(112,'passwords','2017-01-27 04:45:06','2017-01-27 04:45:06'),(113,'char','2017-01-27 04:45:06','2017-01-27 04:45:06'),(114,'shell','2017-01-27 04:45:06','2017-01-27 04:45:06'),(115,'unix','2017-01-27 04:45:06','2017-01-27 04:45:06'),(116,'posix','2017-01-27 04:45:06','2017-01-27 04:45:06'),(117,'performance','2017-01-27 04:45:06','2017-01-27 04:45:06'),(118,'function','2017-01-27 04:45:06','2017-01-27 04:45:06'),(119,'dynamic','2017-01-27 04:45:06','2017-01-27 04:45:06'),(120,'undo','2017-01-27 04:45:06','2017-01-27 04:45:06'),(121,'guid','2017-01-27 04:45:06','2017-01-27 04:45:06'),(122,'uuid','2017-01-27 04:45:06','2017-01-27 04:45:06'),(123,'android-softkeyboard','2017-01-27 04:45:06','2017-01-27 04:45:06'),(124,'android-keypad','2017-01-27 04:45:06','2017-01-27 04:45:06'),(125,'android-input-method','2017-01-27 04:45:06','2017-01-27 04:45:06'),(126,'soft-keyboard','2017-01-27 04:45:06','2017-01-27 04:45:06'),(127,'html','2017-01-27 04:45:06','2017-01-27 04:45:06'),(128,'alignment','2017-01-27 04:45:06','2017-01-27 04:45:06'),(129,'html-table','2017-01-27 04:45:06','2017-01-27 04:45:06'),(130,'stylesheet','2017-01-27 04:45:06','2017-01-27 04:45:06'),(131,'module','2017-01-27 04:45:06','2017-01-27 04:45:06'),(132,'namespaces','2017-01-27 04:45:06','2017-01-27 04:45:06'),(133,'main','2017-01-27 04:45:06','2017-01-27 04:45:06'),(134,'idioms','2017-01-27 04:45:06','2017-01-27 04:45:06'),(135,'regex','2017-01-27 04:45:07','2017-01-27 04:45:07'),(136,'validation','2017-01-27 04:45:07','2017-01-27 04:45:07'),(137,'email','2017-01-27 04:45:07','2017-01-27 04:45:07'),(138,'email-validation','2017-01-27 04:45:07','2017-01-27 04:45:07'),(139,'hashtable','2017-01-27 04:45:07','2017-01-27 04:45:07'),(140,'git-submodules','2017-01-27 04:45:07','2017-01-27 04:45:07'),(141,'command','2017-01-27 04:45:07','2017-01-27 04:45:07'),(142,'subprocess','2017-01-27 04:45:07','2017-01-27 04:45:07'),(143,'external','2017-01-27 04:45:07','2017-01-27 04:45:07'),(144,'json','2017-01-27 04:45:07','2017-01-27 04:45:07'),(145,'.net','2017-01-27 04:45:07','2017-01-27 04:45:07'),(146,'enums','2017-01-27 04:45:07','2017-01-27 04:45:07'),(147,'enumeration','2017-01-27 04:45:07','2017-01-27 04:45:07'),(148,'io','2017-01-27 04:45:07','2017-01-27 04:45:07'),(149,'stream','2017-01-27 04:45:07','2017-01-27 04:45:07'),(150,'inputstream','2017-01-27 04:45:07','2017-01-27 04:45:07'),(151,'branch','2017-01-27 04:45:07','2017-01-27 04:45:07'),(152,'git-branch','2017-01-27 04:45:07','2017-01-27 04:45:07'),(153,'usermanager','2017-01-27 04:45:07','2017-01-27 04:45:07'),(154,'repository','2017-01-27 04:45:07','2017-01-27 04:45:07'),(155,'git-push','2017-01-27 04:45:07','2017-01-27 04:45:07'),(156,'php','2017-01-27 04:45:07','2017-01-27 04:45:07'),(157,'flash','2017-01-27 04:45:07','2017-01-27 04:45:07'),(158,'caching','2017-01-27 04:45:07','2017-01-27 04:45:07'),(159,'compiler-construction','2017-01-27 04:45:07','2017-01-27 04:45:07'),(160,'flash-cs4','2017-01-27 04:45:07','2017-01-27 04:45:07'),(161,'definition','2017-01-27 04:45:08','2017-01-27 04:45:08'),(162,'branching-and-merging','2017-01-27 04:45:08','2017-01-27 04:45:08'),(163,'android-emulator','2017-01-27 04:45:08','2017-01-27 04:45:08'),(164,'qemu','2017-01-27 04:45:08','2017-01-27 04:45:08'),(165,'date','2017-01-27 04:45:08','2017-01-27 04:45:08'),(166,'datetime','2017-01-27 04:45:08','2017-01-27 04:45:08'),(167,'timestamp','2017-01-27 04:45:08','2017-01-27 04:45:08'),(168,'unix-timestamp','2017-01-27 04:45:08','2017-01-27 04:45:08'),(169,'regex-negation','2017-01-27 04:45:08','2017-01-27 04:45:08'),(170,'directory','2017-01-27 04:45:08','2017-01-27 04:45:08'),(171,'git-add','2017-01-27 04:45:08','2017-01-27 04:45:08'),(172,'mysql','2017-01-27 04:45:08','2017-01-27 04:45:08'),(173,'sql-injection','2017-01-27 04:45:08','2017-01-27 04:45:08'),(174,'plugins','2017-01-27 04:45:08','2017-01-27 04:45:08'),(175,'query-string','2017-01-27 04:45:08','2017-01-27 04:45:08'),(176,'angularjs','2017-01-27 04:45:08','2017-01-27 04:45:08'),(177,'dependency-injection','2017-01-27 04:45:08','2017-01-27 04:45:08'),(178,'angularjs-service','2017-01-27 04:45:08','2017-01-27 04:45:08'),(179,'angularjs-factory','2017-01-27 04:45:08','2017-01-27 04:45:08'),(180,'angularjs-provider','2017-01-27 04:45:08','2017-01-27 04:45:08'),(181,'foreach','2017-01-27 04:45:08','2017-01-27 04:45:08'),(182,'operators','2017-01-27 04:45:09','2017-01-27 04:45:09'),(183,'symbols','2017-01-27 04:45:09','2017-01-27 04:45:09'),(184,'casting','2017-01-27 04:45:09','2017-01-27 04:45:09'),(185,'variable-assignment','2017-01-27 04:45:09','2017-01-27 04:45:09'),(186,'assignment-operator','2017-01-27 04:45:09','2017-01-27 04:45:09'),(187,'uri','2017-01-27 04:45:09','2017-01-27 04:45:09'),(188,'urn','2017-01-27 04:45:09','2017-01-27 04:45:09'),(189,'rfc3986','2017-01-27 04:45:09','2017-01-27 04:45:09'),(190,'checkbox','2017-01-27 04:45:09','2017-01-27 04:45:09'),(191,'selected','2017-01-27 04:45:09','2017-01-27 04:45:09'),(192,'checked','2017-01-27 04:45:09','2017-01-27 04:45:09'),(193,'html5','2017-01-27 04:45:09','2017-01-27 04:45:09'),(194,'placeholder','2017-01-27 04:45:09','2017-01-27 04:45:09'),(195,'html-input','2017-01-27 04:45:09','2017-01-27 04:45:09'),(196,'git-clone','2017-01-27 04:45:09','2017-01-27 04:45:09'),(197,'ternary-operator','2017-01-27 04:45:09','2017-01-27 04:45:09'),(198,'conditional-operator','2017-01-27 04:45:09','2017-01-27 04:45:09'),(199,'python-2.5','2017-01-27 04:45:09','2017-01-27 04:45:09'),(200,'nullpointerexception','2017-01-27 04:45:09','2017-01-27 04:45:09'),(201,'null','2017-01-27 04:45:09','2017-01-27 04:45:09'),(202,'file','2017-01-27 04:45:09','2017-01-27 04:45:09'),(203,'filesystems','2017-01-27 04:45:09','2017-01-27 04:45:09'),(204,'comments','2017-01-27 04:45:09','2017-01-27 04:45:09'),(205,'optimization','2017-01-27 04:45:10','2017-01-27 04:45:10'),(206,'href','2017-01-27 04:45:10','2017-01-27 04:45:10'),(207,'import','2017-01-27 04:45:10','2017-01-27 04:45:10'),(208,'include','2017-01-27 04:45:10','2017-01-27 04:45:10'),(209,'sorting','2017-01-27 04:45:10','2017-01-27 04:45:10'),(210,'language-agnostic','2017-01-27 04:45:10','2017-01-27 04:45:10'),(211,'matching','2017-01-27 04:45:10','2017-01-27 04:45:10'),(212,'flex','2017-01-27 04:45:10','2017-01-27 04:45:10'),(213,'actionscript','2017-01-27 04:45:10','2017-01-27 04:45:10'),(214,'soap','2017-01-27 04:45:10','2017-01-27 04:45:10'),(215,'coldfusion','2017-01-27 04:45:10','2017-01-27 04:45:10'),(216,'wsdl','2017-01-27 04:45:10','2017-01-27 04:45:10'),(217,'bash','2017-01-27 04:45:10','2017-01-27 04:45:10'),(218,'c++','2017-01-27 04:45:10','2017-01-27 04:45:10'),(219,'c++-faq','2017-01-27 04:45:10','2017-01-27 04:45:10'),(220,'git-reset','2017-01-27 04:45:10','2017-01-27 04:45:10'),(221,'git-revert','2017-01-27 04:45:10','2017-01-27 04:45:10'),(222,'equality','2017-01-27 04:45:10','2017-01-27 04:45:10'),(223,'equality-operator','2017-01-27 04:45:10','2017-01-27 04:45:10'),(224,'identity-operator','2017-01-27 04:45:10','2017-01-27 04:45:10'),(225,'syntax','2017-01-27 04:45:10','2017-01-27 04:45:10'),(226,'timezone','2017-01-27 04:45:10','2017-01-27 04:45:10'),(227,'background-color','2017-01-27 04:45:10','2017-01-27 04:45:10'),(228,'jslint','2017-01-27 04:45:10','2017-01-27 04:45:10'),(229,'use-strict','2017-01-27 04:45:10','2017-01-27 04:45:10'),(230,'dom','2017-01-27 04:45:10','2017-01-27 04:45:10'),(231,'visibility','2017-01-27 04:45:10','2017-01-27 04:45:10'),(232,'authentication','2017-01-27 04:45:10','2017-01-27 04:45:10'),(233,'article','2017-01-27 04:45:10','2017-01-27 04:45:10'),(234,'memory-management','2017-01-27 04:45:11','2017-01-27 04:45:11'),(235,'stack','2017-01-27 04:45:11','2017-01-27 04:45:11'),(236,'heap','2017-01-27 04:45:11','2017-01-27 04:45:11'),(237,'substring','2017-01-27 04:45:11','2017-01-27 04:45:11'),(238,'string-matching','2017-01-27 04:45:11','2017-01-27 04:45:11'),(239,'code-formatting','2017-01-27 04:45:11','2017-01-27 04:45:11'),(240,'standards-compliance','2017-01-27 04:45:11','2017-01-27 04:45:11'),(241,'redirect','2017-01-27 04:45:11','2017-01-27 04:45:11'),(242,'git-stage','2017-01-27 04:45:11','2017-01-27 04:45:11'),(243,'iterator','2017-01-27 04:45:11','2017-01-27 04:45:11'),(244,'generator','2017-01-27 04:45:11','2017-01-27 04:45:11'),(245,'yield','2017-01-27 04:45:11','2017-01-27 04:45:11'),(246,'coroutine','2017-01-27 04:45:11','2017-01-27 04:45:11'),(247,'content-type','2017-01-27 04:45:11','2017-01-27 04:45:11'),(248,'branch-prediction','2017-01-27 04:45:11','2017-01-27 04:45:11'),(249,'scope','2017-01-27 04:45:11','2017-01-27 04:45:11'),(250,'closures','2017-01-27 04:45:11','2017-01-27 04:45:11'),(251,'git-rebase','2017-01-27 04:45:12','2017-01-27 04:45:12'),(252,'git-commit','2017-01-27 04:45:12','2017-01-27 04:45:12'),(253,'git-rewrite-history','2017-01-27 04:45:12','2017-01-27 04:45:12'),(254,'amend','2017-01-27 04:45:12','2017-01-27 04:45:12');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `name` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '用户名字',
  `email` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '用户邮箱',
  `password` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '用户密码',
  `remember_token` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '是否记住密码',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'YuanPengfei','345161974@qq.com','$2y$10$o6EAbV20y9vM.hw9HrBBjuHxItOmfQQpqFUN7eKbnKjfUIB7WxihS',NULL,'2017-01-22 06:55:13','2017-01-22 06:55:13'),(2,'Jarvis Lueilwitz','stephania64@example.org','$2y$10$5gc44TA5bMQmQQHHSXJIUe.FaIBpey6C9arUQgILz6WjO38rL5ZkK','5FPVBMumwA','2017-01-22 06:55:13','2017-01-22 06:55:13'),(3,'Darrell Monahan','muller.edgardo@example.org','$2y$10$LTfSZT.KZxm/vXYq3VeMsOBjv9UbEwpvwCaahusJk3PVwxBqo4XKO','SrZYUabftJ','2017-01-22 06:55:13','2017-01-22 06:55:13'),(4,'Millie Weissnat','ereynolds@example.com','$2y$10$Fy/3XGKFbwDqaoddZP5O5O0vwpGsQ7qJd65fBjujhFMB6ohUonkDq','CsFvbQllfo','2017-01-22 06:55:13','2017-01-22 06:55:13');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-01-27 12:48:58
